// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module krnl_bp_replicate_stream (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        krnl_bp_u_stream_dout,
        krnl_bp_u_stream_empty_n,
        krnl_bp_u_stream_read,
        krnl_bp_u_copy_1_stream_din,
        krnl_bp_u_copy_1_stream_full_n,
        krnl_bp_u_copy_1_stream_write,
        krnl_bp_u_copy_2_stream_din,
        krnl_bp_u_copy_2_stream_full_n,
        krnl_bp_u_copy_2_stream_write,
        krnl_bp_u_copy_3_stream_din,
        krnl_bp_u_copy_3_stream_full_n,
        krnl_bp_u_copy_3_stream_write,
        krnl_bp_u_stream_blk_n,
        krnl_bp_u_copy_1_stream_blk_n,
        krnl_bp_u_copy_2_stream_blk_n,
        krnl_bp_u_copy_3_stream_blk_n,
        ap_ce
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] krnl_bp_u_stream_dout;
input   krnl_bp_u_stream_empty_n;
output   krnl_bp_u_stream_read;
output  [31:0] krnl_bp_u_copy_1_stream_din;
input   krnl_bp_u_copy_1_stream_full_n;
output   krnl_bp_u_copy_1_stream_write;
output  [31:0] krnl_bp_u_copy_2_stream_din;
input   krnl_bp_u_copy_2_stream_full_n;
output   krnl_bp_u_copy_2_stream_write;
output  [31:0] krnl_bp_u_copy_3_stream_din;
input   krnl_bp_u_copy_3_stream_full_n;
output   krnl_bp_u_copy_3_stream_write;
output   krnl_bp_u_stream_blk_n;
output   krnl_bp_u_copy_1_stream_blk_n;
output   krnl_bp_u_copy_2_stream_blk_n;
output   krnl_bp_u_copy_3_stream_blk_n;
input   ap_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg krnl_bp_u_stream_read;
reg krnl_bp_u_copy_1_stream_write;
reg krnl_bp_u_copy_2_stream_write;
reg krnl_bp_u_copy_3_stream_write;
reg krnl_bp_u_stream_blk_n;
reg krnl_bp_u_copy_1_stream_blk_n;
reg krnl_bp_u_copy_2_stream_blk_n;
reg krnl_bp_u_copy_3_stream_blk_n;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
reg    ap_block_state1;
reg    ap_block_state2;
reg    ap_block_state3;
reg    ap_block_state4;
reg    ap_block_state5;
reg    ap_block_state6;
reg    ap_block_state7;
reg    ap_block_state8;
reg   [7:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
reg    ap_ST_fsm_state7_blk;
reg    ap_ST_fsm_state8_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (*) begin
    if (((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0) | (1'b0 == ap_ce) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0) | (1'b0 == ap_ce))) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if (((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0) | (1'b0 == ap_ce))) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0) | (1'b0 == ap_ce))) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if (((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0) | (1'b0 == ap_ce))) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if (((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0) | (1'b0 == ap_ce))) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if (((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0) | (1'b0 == ap_ce))) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

always @ (*) begin
    if (((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0) | (1'b0 == ap_ce))) begin
        ap_ST_fsm_state8_blk = 1'b1;
    end else begin
        ap_ST_fsm_state8_blk = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) | (~((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8) & (1'b1 == ap_ce)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8) & (1'b1 == ap_ce))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        krnl_bp_u_copy_1_stream_blk_n = krnl_bp_u_copy_1_stream_full_n;
    end else begin
        krnl_bp_u_copy_1_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8) & (1'b1 == ap_ce)) | (~((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7) & (1'b1 == ap_ce)) | (~((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6) & (1'b1 == ap_ce)) | (~((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5) & (1'b1 == ap_ce)) | (~((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4) & (1'b1 == ap_ce)) | (~((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_ce)) | (~((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2) & (1'b1 == ap_ce)) | (~((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce)))) begin
        krnl_bp_u_copy_1_stream_write = 1'b1;
    end else begin
        krnl_bp_u_copy_1_stream_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        krnl_bp_u_copy_2_stream_blk_n = krnl_bp_u_copy_2_stream_full_n;
    end else begin
        krnl_bp_u_copy_2_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8) & (1'b1 == ap_ce)) | (~((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7) & (1'b1 == ap_ce)) | (~((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6) & (1'b1 == ap_ce)) | (~((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5) & (1'b1 == ap_ce)) | (~((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4) & (1'b1 == ap_ce)) | (~((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_ce)) | (~((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2) & (1'b1 == ap_ce)) | (~((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce)))) begin
        krnl_bp_u_copy_2_stream_write = 1'b1;
    end else begin
        krnl_bp_u_copy_2_stream_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        krnl_bp_u_copy_3_stream_blk_n = krnl_bp_u_copy_3_stream_full_n;
    end else begin
        krnl_bp_u_copy_3_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8) & (1'b1 == ap_ce)) | (~((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7) & (1'b1 == ap_ce)) | (~((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6) & (1'b1 == ap_ce)) | (~((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5) & (1'b1 == ap_ce)) | (~((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4) & (1'b1 == ap_ce)) | (~((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_ce)) | (~((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2) & (1'b1 == ap_ce)) | (~((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce)))) begin
        krnl_bp_u_copy_3_stream_write = 1'b1;
    end else begin
        krnl_bp_u_copy_3_stream_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        krnl_bp_u_stream_blk_n = krnl_bp_u_stream_empty_n;
    end else begin
        krnl_bp_u_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8) & (1'b1 == ap_ce)) | (~((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7) & (1'b1 == ap_ce)) | (~((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6) & (1'b1 == ap_ce)) | (~((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5) & (1'b1 == ap_ce)) | (~((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4) & (1'b1 == ap_ce)) | (~((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_ce)) | (~((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2) & (1'b1 == ap_ce)) | (~((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce)))) begin
        krnl_bp_u_stream_read = 1'b1;
    end else begin
        krnl_bp_u_stream_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if ((~((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if ((~((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if ((~((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_block_state1 = ((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state2 = ((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3 = ((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4 = ((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state5 = ((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state6 = ((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state7 = ((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state8 = ((krnl_bp_u_copy_3_stream_full_n == 1'b0) | (krnl_bp_u_copy_2_stream_full_n == 1'b0) | (krnl_bp_u_copy_1_stream_full_n == 1'b0) | (krnl_bp_u_stream_empty_n == 1'b0));
end

assign krnl_bp_u_copy_1_stream_din = krnl_bp_u_stream_dout;

assign krnl_bp_u_copy_2_stream_din = krnl_bp_u_stream_dout;

assign krnl_bp_u_copy_3_stream_din = krnl_bp_u_stream_dout;

endmodule //krnl_bp_replicate_stream
