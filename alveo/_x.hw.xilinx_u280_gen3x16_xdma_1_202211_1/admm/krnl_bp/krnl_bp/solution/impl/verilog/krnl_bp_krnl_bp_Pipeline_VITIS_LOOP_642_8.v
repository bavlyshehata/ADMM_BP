// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module krnl_bp_krnl_bp_Pipeline_VITIS_LOOP_642_8 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        chunk,
        z_old_15_address0,
        z_old_15_ce0,
        z_old_15_we0,
        z_old_15_d0,
        z_old_14_address0,
        z_old_14_ce0,
        z_old_14_we0,
        z_old_14_d0,
        z_old_13_address0,
        z_old_13_ce0,
        z_old_13_we0,
        z_old_13_d0,
        z_old_12_address0,
        z_old_12_ce0,
        z_old_12_we0,
        z_old_12_d0,
        z_old_11_address0,
        z_old_11_ce0,
        z_old_11_we0,
        z_old_11_d0,
        z_old_10_address0,
        z_old_10_ce0,
        z_old_10_we0,
        z_old_10_d0,
        z_old_9_address0,
        z_old_9_ce0,
        z_old_9_we0,
        z_old_9_d0,
        z_old_8_address0,
        z_old_8_ce0,
        z_old_8_we0,
        z_old_8_d0,
        z_old_7_address0,
        z_old_7_ce0,
        z_old_7_we0,
        z_old_7_d0,
        z_old_6_address0,
        z_old_6_ce0,
        z_old_6_we0,
        z_old_6_d0,
        z_old_5_address0,
        z_old_5_ce0,
        z_old_5_we0,
        z_old_5_d0,
        z_old_4_address0,
        z_old_4_ce0,
        z_old_4_we0,
        z_old_4_d0,
        z_old_3_address0,
        z_old_3_ce0,
        z_old_3_we0,
        z_old_3_d0,
        z_old_2_address0,
        z_old_2_ce0,
        z_old_2_we0,
        z_old_2_d0,
        z_old_1_address0,
        z_old_1_ce0,
        z_old_1_we0,
        z_old_1_d0,
        z_old_address0,
        z_old_ce0,
        z_old_we0,
        z_old_d0,
        z_address0,
        z_ce0,
        z_q0,
        z_1_address0,
        z_1_ce0,
        z_1_q0,
        z_2_address0,
        z_2_ce0,
        z_2_q0,
        z_3_address0,
        z_3_ce0,
        z_3_q0,
        z_4_address0,
        z_4_ce0,
        z_4_q0,
        z_5_address0,
        z_5_ce0,
        z_5_q0,
        z_6_address0,
        z_6_ce0,
        z_6_q0,
        z_7_address0,
        z_7_ce0,
        z_7_q0,
        z_8_address0,
        z_8_ce0,
        z_8_q0,
        z_9_address0,
        z_9_ce0,
        z_9_q0,
        z_10_address0,
        z_10_ce0,
        z_10_q0,
        z_11_address0,
        z_11_ce0,
        z_11_q0,
        z_12_address0,
        z_12_ce0,
        z_12_q0,
        z_13_address0,
        z_13_ce0,
        z_13_q0,
        z_14_address0,
        z_14_ce0,
        z_14_q0,
        z_15_address0,
        z_15_ce0,
        z_15_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [30:0] chunk;
output  [2:0] z_old_15_address0;
output   z_old_15_ce0;
output   z_old_15_we0;
output  [31:0] z_old_15_d0;
output  [2:0] z_old_14_address0;
output   z_old_14_ce0;
output   z_old_14_we0;
output  [31:0] z_old_14_d0;
output  [2:0] z_old_13_address0;
output   z_old_13_ce0;
output   z_old_13_we0;
output  [31:0] z_old_13_d0;
output  [2:0] z_old_12_address0;
output   z_old_12_ce0;
output   z_old_12_we0;
output  [31:0] z_old_12_d0;
output  [2:0] z_old_11_address0;
output   z_old_11_ce0;
output   z_old_11_we0;
output  [31:0] z_old_11_d0;
output  [2:0] z_old_10_address0;
output   z_old_10_ce0;
output   z_old_10_we0;
output  [31:0] z_old_10_d0;
output  [2:0] z_old_9_address0;
output   z_old_9_ce0;
output   z_old_9_we0;
output  [31:0] z_old_9_d0;
output  [2:0] z_old_8_address0;
output   z_old_8_ce0;
output   z_old_8_we0;
output  [31:0] z_old_8_d0;
output  [2:0] z_old_7_address0;
output   z_old_7_ce0;
output   z_old_7_we0;
output  [31:0] z_old_7_d0;
output  [2:0] z_old_6_address0;
output   z_old_6_ce0;
output   z_old_6_we0;
output  [31:0] z_old_6_d0;
output  [2:0] z_old_5_address0;
output   z_old_5_ce0;
output   z_old_5_we0;
output  [31:0] z_old_5_d0;
output  [2:0] z_old_4_address0;
output   z_old_4_ce0;
output   z_old_4_we0;
output  [31:0] z_old_4_d0;
output  [2:0] z_old_3_address0;
output   z_old_3_ce0;
output   z_old_3_we0;
output  [31:0] z_old_3_d0;
output  [2:0] z_old_2_address0;
output   z_old_2_ce0;
output   z_old_2_we0;
output  [31:0] z_old_2_d0;
output  [2:0] z_old_1_address0;
output   z_old_1_ce0;
output   z_old_1_we0;
output  [31:0] z_old_1_d0;
output  [2:0] z_old_address0;
output   z_old_ce0;
output   z_old_we0;
output  [31:0] z_old_d0;
output  [2:0] z_address0;
output   z_ce0;
input  [31:0] z_q0;
output  [2:0] z_1_address0;
output   z_1_ce0;
input  [31:0] z_1_q0;
output  [2:0] z_2_address0;
output   z_2_ce0;
input  [31:0] z_2_q0;
output  [2:0] z_3_address0;
output   z_3_ce0;
input  [31:0] z_3_q0;
output  [2:0] z_4_address0;
output   z_4_ce0;
input  [31:0] z_4_q0;
output  [2:0] z_5_address0;
output   z_5_ce0;
input  [31:0] z_5_q0;
output  [2:0] z_6_address0;
output   z_6_ce0;
input  [31:0] z_6_q0;
output  [2:0] z_7_address0;
output   z_7_ce0;
input  [31:0] z_7_q0;
output  [2:0] z_8_address0;
output   z_8_ce0;
input  [31:0] z_8_q0;
output  [2:0] z_9_address0;
output   z_9_ce0;
input  [31:0] z_9_q0;
output  [2:0] z_10_address0;
output   z_10_ce0;
input  [31:0] z_10_q0;
output  [2:0] z_11_address0;
output   z_11_ce0;
input  [31:0] z_11_q0;
output  [2:0] z_12_address0;
output   z_12_ce0;
input  [31:0] z_12_q0;
output  [2:0] z_13_address0;
output   z_13_ce0;
input  [31:0] z_13_q0;
output  [2:0] z_14_address0;
output   z_14_ce0;
input  [31:0] z_14_q0;
output  [2:0] z_15_address0;
output   z_15_ce0;
input  [31:0] z_15_q0;

reg ap_idle;
reg z_old_15_ce0;
reg z_old_15_we0;
reg z_old_14_ce0;
reg z_old_14_we0;
reg z_old_13_ce0;
reg z_old_13_we0;
reg z_old_12_ce0;
reg z_old_12_we0;
reg z_old_11_ce0;
reg z_old_11_we0;
reg z_old_10_ce0;
reg z_old_10_we0;
reg z_old_9_ce0;
reg z_old_9_we0;
reg z_old_8_ce0;
reg z_old_8_we0;
reg z_old_7_ce0;
reg z_old_7_we0;
reg z_old_6_ce0;
reg z_old_6_we0;
reg z_old_5_ce0;
reg z_old_5_we0;
reg z_old_4_ce0;
reg z_old_4_we0;
reg z_old_3_ce0;
reg z_old_3_we0;
reg z_old_2_ce0;
reg z_old_2_we0;
reg z_old_1_ce0;
reg z_old_1_we0;
reg z_old_ce0;
reg z_old_we0;
reg z_ce0;
reg z_1_ce0;
reg z_2_ce0;
reg z_3_ce0;
reg z_4_ce0;
reg z_5_ce0;
reg z_6_ce0;
reg z_7_ce0;
reg z_8_ce0;
reg z_9_ce0;
reg z_10_ce0;
reg z_11_ce0;
reg z_12_ce0;
reg z_13_ce0;
reg z_14_ce0;
reg z_15_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln642_fu_552_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [3:0] trunc_ln642_fu_564_p1;
reg   [3:0] trunc_ln642_reg_716;
wire    ap_block_pp0_stage0_11001;
reg   [2:0] z_old_addr_reg_801;
reg   [2:0] z_old_1_addr_reg_806;
reg   [2:0] z_old_2_addr_reg_811;
reg   [2:0] z_old_3_addr_reg_816;
reg   [2:0] z_old_4_addr_reg_821;
reg   [2:0] z_old_5_addr_reg_826;
reg   [2:0] z_old_6_addr_reg_831;
reg   [2:0] z_old_7_addr_reg_836;
reg   [2:0] z_old_8_addr_reg_841;
reg   [2:0] z_old_9_addr_reg_846;
reg   [2:0] z_old_10_addr_reg_851;
reg   [2:0] z_old_11_addr_reg_856;
reg   [2:0] z_old_12_addr_reg_861;
reg   [2:0] z_old_13_addr_reg_866;
reg   [2:0] z_old_14_addr_reg_871;
reg   [2:0] z_old_15_addr_reg_876;
wire   [63:0] zext_ln642_fu_578_p1;
wire    ap_block_pp0_stage0;
reg   [30:0] i_fu_134;
wire   [30:0] add_ln642_fu_558_p2;
wire    ap_loop_init;
reg   [30:0] ap_sig_allocacmp_i_5;
wire   [31:0] tmp_5_fu_619_p35;
wire   [2:0] lshr_ln6_fu_568_p4;
wire   [31:0] tmp_5_fu_619_p33;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [3:0] tmp_5_fu_619_p1;
wire   [3:0] tmp_5_fu_619_p3;
wire   [3:0] tmp_5_fu_619_p5;
wire   [3:0] tmp_5_fu_619_p7;
wire   [3:0] tmp_5_fu_619_p9;
wire   [3:0] tmp_5_fu_619_p11;
wire   [3:0] tmp_5_fu_619_p13;
wire   [3:0] tmp_5_fu_619_p15;
wire  signed [3:0] tmp_5_fu_619_p17;
wire  signed [3:0] tmp_5_fu_619_p19;
wire  signed [3:0] tmp_5_fu_619_p21;
wire  signed [3:0] tmp_5_fu_619_p23;
wire  signed [3:0] tmp_5_fu_619_p25;
wire  signed [3:0] tmp_5_fu_619_p27;
wire  signed [3:0] tmp_5_fu_619_p29;
wire  signed [3:0] tmp_5_fu_619_p31;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 i_fu_134 = 31'd0;
#0 ap_done_reg = 1'b0;
end

krnl_bp_sparsemux_33_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 32 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 32 ),
    .CASE13( 4'hD ),
    .din13_WIDTH( 32 ),
    .CASE14( 4'hE ),
    .din14_WIDTH( 32 ),
    .CASE15( 4'hF ),
    .din15_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_33_4_32_1_1_U156(
    .din0(z_q0),
    .din1(z_1_q0),
    .din2(z_2_q0),
    .din3(z_3_q0),
    .din4(z_4_q0),
    .din5(z_5_q0),
    .din6(z_6_q0),
    .din7(z_7_q0),
    .din8(z_8_q0),
    .din9(z_9_q0),
    .din10(z_10_q0),
    .din11(z_11_q0),
    .din12(z_12_q0),
    .din13(z_13_q0),
    .din14(z_14_q0),
    .din15(z_15_q0),
    .def(tmp_5_fu_619_p33),
    .sel(trunc_ln642_reg_716),
    .dout(tmp_5_fu_619_p35)
);

krnl_bp_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln642_fu_552_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_134 <= add_ln642_fu_558_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_134 <= 31'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln642_reg_716 <= trunc_ln642_fu_564_p1;
        z_old_10_addr_reg_851 <= zext_ln642_fu_578_p1;
        z_old_11_addr_reg_856 <= zext_ln642_fu_578_p1;
        z_old_12_addr_reg_861 <= zext_ln642_fu_578_p1;
        z_old_13_addr_reg_866 <= zext_ln642_fu_578_p1;
        z_old_14_addr_reg_871 <= zext_ln642_fu_578_p1;
        z_old_15_addr_reg_876 <= zext_ln642_fu_578_p1;
        z_old_1_addr_reg_806 <= zext_ln642_fu_578_p1;
        z_old_2_addr_reg_811 <= zext_ln642_fu_578_p1;
        z_old_3_addr_reg_816 <= zext_ln642_fu_578_p1;
        z_old_4_addr_reg_821 <= zext_ln642_fu_578_p1;
        z_old_5_addr_reg_826 <= zext_ln642_fu_578_p1;
        z_old_6_addr_reg_831 <= zext_ln642_fu_578_p1;
        z_old_7_addr_reg_836 <= zext_ln642_fu_578_p1;
        z_old_8_addr_reg_841 <= zext_ln642_fu_578_p1;
        z_old_9_addr_reg_846 <= zext_ln642_fu_578_p1;
        z_old_addr_reg_801 <= zext_ln642_fu_578_p1;
    end
end

always @ (*) begin
    if (((icmp_ln642_fu_552_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_5 = 31'd0;
    end else begin
        ap_sig_allocacmp_i_5 = i_fu_134;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_10_ce0 = 1'b1;
    end else begin
        z_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_11_ce0 = 1'b1;
    end else begin
        z_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_12_ce0 = 1'b1;
    end else begin
        z_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_13_ce0 = 1'b1;
    end else begin
        z_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_14_ce0 = 1'b1;
    end else begin
        z_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_15_ce0 = 1'b1;
    end else begin
        z_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_1_ce0 = 1'b1;
    end else begin
        z_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_2_ce0 = 1'b1;
    end else begin
        z_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_3_ce0 = 1'b1;
    end else begin
        z_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_4_ce0 = 1'b1;
    end else begin
        z_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_5_ce0 = 1'b1;
    end else begin
        z_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_6_ce0 = 1'b1;
    end else begin
        z_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_7_ce0 = 1'b1;
    end else begin
        z_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_8_ce0 = 1'b1;
    end else begin
        z_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_9_ce0 = 1'b1;
    end else begin
        z_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_ce0 = 1'b1;
    end else begin
        z_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_old_10_ce0 = 1'b1;
    end else begin
        z_old_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln642_reg_716 == 4'd10) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_old_10_we0 = 1'b1;
    end else begin
        z_old_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_old_11_ce0 = 1'b1;
    end else begin
        z_old_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln642_reg_716 == 4'd11) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_old_11_we0 = 1'b1;
    end else begin
        z_old_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_old_12_ce0 = 1'b1;
    end else begin
        z_old_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln642_reg_716 == 4'd12) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_old_12_we0 = 1'b1;
    end else begin
        z_old_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_old_13_ce0 = 1'b1;
    end else begin
        z_old_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln642_reg_716 == 4'd13) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_old_13_we0 = 1'b1;
    end else begin
        z_old_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_old_14_ce0 = 1'b1;
    end else begin
        z_old_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln642_reg_716 == 4'd14) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_old_14_we0 = 1'b1;
    end else begin
        z_old_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_old_15_ce0 = 1'b1;
    end else begin
        z_old_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln642_reg_716 == 4'd15) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_old_15_we0 = 1'b1;
    end else begin
        z_old_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_old_1_ce0 = 1'b1;
    end else begin
        z_old_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln642_reg_716 == 4'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_old_1_we0 = 1'b1;
    end else begin
        z_old_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_old_2_ce0 = 1'b1;
    end else begin
        z_old_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln642_reg_716 == 4'd2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_old_2_we0 = 1'b1;
    end else begin
        z_old_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_old_3_ce0 = 1'b1;
    end else begin
        z_old_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln642_reg_716 == 4'd3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_old_3_we0 = 1'b1;
    end else begin
        z_old_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_old_4_ce0 = 1'b1;
    end else begin
        z_old_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln642_reg_716 == 4'd4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_old_4_we0 = 1'b1;
    end else begin
        z_old_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_old_5_ce0 = 1'b1;
    end else begin
        z_old_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln642_reg_716 == 4'd5) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_old_5_we0 = 1'b1;
    end else begin
        z_old_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_old_6_ce0 = 1'b1;
    end else begin
        z_old_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln642_reg_716 == 4'd6) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_old_6_we0 = 1'b1;
    end else begin
        z_old_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_old_7_ce0 = 1'b1;
    end else begin
        z_old_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln642_reg_716 == 4'd7) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_old_7_we0 = 1'b1;
    end else begin
        z_old_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_old_8_ce0 = 1'b1;
    end else begin
        z_old_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln642_reg_716 == 4'd8) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_old_8_we0 = 1'b1;
    end else begin
        z_old_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_old_9_ce0 = 1'b1;
    end else begin
        z_old_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln642_reg_716 == 4'd9) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_old_9_we0 = 1'b1;
    end else begin
        z_old_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_old_ce0 = 1'b1;
    end else begin
        z_old_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln642_reg_716 == 4'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_old_we0 = 1'b1;
    end else begin
        z_old_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln642_fu_558_p2 = (ap_sig_allocacmp_i_5 + 31'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln642_fu_552_p2 = ((ap_sig_allocacmp_i_5 == chunk) ? 1'b1 : 1'b0);

assign lshr_ln6_fu_568_p4 = {{ap_sig_allocacmp_i_5[6:4]}};

assign tmp_5_fu_619_p33 = 'bx;

assign trunc_ln642_fu_564_p1 = ap_sig_allocacmp_i_5[3:0];

assign z_10_address0 = zext_ln642_fu_578_p1;

assign z_11_address0 = zext_ln642_fu_578_p1;

assign z_12_address0 = zext_ln642_fu_578_p1;

assign z_13_address0 = zext_ln642_fu_578_p1;

assign z_14_address0 = zext_ln642_fu_578_p1;

assign z_15_address0 = zext_ln642_fu_578_p1;

assign z_1_address0 = zext_ln642_fu_578_p1;

assign z_2_address0 = zext_ln642_fu_578_p1;

assign z_3_address0 = zext_ln642_fu_578_p1;

assign z_4_address0 = zext_ln642_fu_578_p1;

assign z_5_address0 = zext_ln642_fu_578_p1;

assign z_6_address0 = zext_ln642_fu_578_p1;

assign z_7_address0 = zext_ln642_fu_578_p1;

assign z_8_address0 = zext_ln642_fu_578_p1;

assign z_9_address0 = zext_ln642_fu_578_p1;

assign z_address0 = zext_ln642_fu_578_p1;

assign z_old_10_address0 = z_old_10_addr_reg_851;

assign z_old_10_d0 = tmp_5_fu_619_p35;

assign z_old_11_address0 = z_old_11_addr_reg_856;

assign z_old_11_d0 = tmp_5_fu_619_p35;

assign z_old_12_address0 = z_old_12_addr_reg_861;

assign z_old_12_d0 = tmp_5_fu_619_p35;

assign z_old_13_address0 = z_old_13_addr_reg_866;

assign z_old_13_d0 = tmp_5_fu_619_p35;

assign z_old_14_address0 = z_old_14_addr_reg_871;

assign z_old_14_d0 = tmp_5_fu_619_p35;

assign z_old_15_address0 = z_old_15_addr_reg_876;

assign z_old_15_d0 = tmp_5_fu_619_p35;

assign z_old_1_address0 = z_old_1_addr_reg_806;

assign z_old_1_d0 = tmp_5_fu_619_p35;

assign z_old_2_address0 = z_old_2_addr_reg_811;

assign z_old_2_d0 = tmp_5_fu_619_p35;

assign z_old_3_address0 = z_old_3_addr_reg_816;

assign z_old_3_d0 = tmp_5_fu_619_p35;

assign z_old_4_address0 = z_old_4_addr_reg_821;

assign z_old_4_d0 = tmp_5_fu_619_p35;

assign z_old_5_address0 = z_old_5_addr_reg_826;

assign z_old_5_d0 = tmp_5_fu_619_p35;

assign z_old_6_address0 = z_old_6_addr_reg_831;

assign z_old_6_d0 = tmp_5_fu_619_p35;

assign z_old_7_address0 = z_old_7_addr_reg_836;

assign z_old_7_d0 = tmp_5_fu_619_p35;

assign z_old_8_address0 = z_old_8_addr_reg_841;

assign z_old_8_d0 = tmp_5_fu_619_p35;

assign z_old_9_address0 = z_old_9_addr_reg_846;

assign z_old_9_d0 = tmp_5_fu_619_p35;

assign z_old_address0 = z_old_addr_reg_801;

assign z_old_d0 = tmp_5_fu_619_p35;

assign zext_ln642_fu_578_p1 = lshr_ln6_fu_568_p4;

endmodule //krnl_bp_krnl_bp_Pipeline_VITIS_LOOP_642_8
