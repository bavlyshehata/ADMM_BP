-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity krnl_bp is
generic (
    C_M_AXI_GMEM0_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_DATA_WIDTH : INTEGER := 512;
    C_M_AXI_GMEM0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_DATA_WIDTH : INTEGER := 256;
    C_M_AXI_GMEM1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM2_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_DATA_WIDTH : INTEGER := 256;
    C_M_AXI_GMEM2_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM0_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM1_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM2_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM2_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM2_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_WUSER_WIDTH-1 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_RUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_BUSER_WIDTH-1 downto 0);
    m_axi_gmem1_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem1_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_WREADY : IN STD_LOGIC;
    m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem1_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_WUSER_WIDTH-1 downto 0);
    m_axi_gmem1_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem1_RVALID : IN STD_LOGIC;
    m_axi_gmem1_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_RLAST : IN STD_LOGIC;
    m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_RUSER_WIDTH-1 downto 0);
    m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BVALID : IN STD_LOGIC;
    m_axi_gmem1_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_BUSER_WIDTH-1 downto 0);
    m_axi_gmem2_AWVALID : OUT STD_LOGIC;
    m_axi_gmem2_AWREADY : IN STD_LOGIC;
    m_axi_gmem2_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ADDR_WIDTH-1 downto 0);
    m_axi_gmem2_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem2_WVALID : OUT STD_LOGIC;
    m_axi_gmem2_WREADY : IN STD_LOGIC;
    m_axi_gmem2_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_DATA_WIDTH-1 downto 0);
    m_axi_gmem2_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem2_WLAST : OUT STD_LOGIC;
    m_axi_gmem2_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_WUSER_WIDTH-1 downto 0);
    m_axi_gmem2_ARVALID : OUT STD_LOGIC;
    m_axi_gmem2_ARREADY : IN STD_LOGIC;
    m_axi_gmem2_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ADDR_WIDTH-1 downto 0);
    m_axi_gmem2_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem2_RVALID : IN STD_LOGIC;
    m_axi_gmem2_RREADY : OUT STD_LOGIC;
    m_axi_gmem2_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_DATA_WIDTH-1 downto 0);
    m_axi_gmem2_RLAST : IN STD_LOGIC;
    m_axi_gmem2_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_RUSER_WIDTH-1 downto 0);
    m_axi_gmem2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_BVALID : IN STD_LOGIC;
    m_axi_gmem2_BREADY : OUT STD_LOGIC;
    m_axi_gmem2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of krnl_bp is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "krnl_bp_krnl_bp,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu250-figd2104-2L-e,HLS_INPUT_CLOCK=3.333000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.692486,HLS_SYN_LAT=1158,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=21740,HLS_SYN_LUT=29317,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state121 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state122 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state123 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state124 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state125 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state126 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state127 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state128 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state129 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state130 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state131 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state132 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state133 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state134 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state135 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state136 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state137 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state138 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state139 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state140 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state141 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state142 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state143 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state144 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state145 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state146 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state147 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state148 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state149 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state150 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state151 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state152 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state153 : STD_LOGIC_VECTOR (162 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state154 : STD_LOGIC_VECTOR (162 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state155 : STD_LOGIC_VECTOR (162 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state156 : STD_LOGIC_VECTOR (162 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state157 : STD_LOGIC_VECTOR (162 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state158 : STD_LOGIC_VECTOR (162 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state159 : STD_LOGIC_VECTOR (162 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state160 : STD_LOGIC_VECTOR (162 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state161 : STD_LOGIC_VECTOR (162 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state162 : STD_LOGIC_VECTOR (162 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state163 : STD_LOGIC_VECTOR (162 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_A2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100010";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv256_lc_1 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_rst_reg_2 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_2 : signal is "no";
    signal ap_rst_reg_1 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_1 : signal is "no";
    signal ap_rst_n_inv : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_n_inv : signal is "no";
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_continue : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (162 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal mat_p : STD_LOGIC_VECTOR (63 downto 0);
    signal vec_q : STD_LOGIC_VECTOR (63 downto 0);
    signal out_r : STD_LOGIC_VECTOR (63 downto 0);
    signal rho : STD_LOGIC_VECTOR (31 downto 0);
    signal alpha : STD_LOGIC_VECTOR (31 downto 0);
    signal mat_p_bram_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mat_p_bram_ce0 : STD_LOGIC;
    signal mat_p_bram_we0 : STD_LOGIC;
    signal mat_p_bram_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mat_p_bram_ce1 : STD_LOGIC;
    signal mat_p_bram_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal vec_q_bram_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal vec_q_bram_ce0 : STD_LOGIC;
    signal vec_q_bram_we0 : STD_LOGIC;
    signal vec_q_bram_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_bram_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_bram_ce0 : STD_LOGIC;
    signal x_bram_we0 : STD_LOGIC;
    signal x_bram_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem0_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal gmem1_blk_n_AR : STD_LOGIC;
    signal gmem1_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal gmem2_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal gmem2_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal gmem2_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state163 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state163 : signal is "none";
    signal trunc_ln_reg_438 : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln15_1_reg_444 : STD_LOGIC_VECTOR (58 downto 0);
    signal trunc_ln4_reg_449 : STD_LOGIC_VECTOR (58 downto 0);
    signal gmem1_addr_read_reg_465 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal grp_fu_363_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_alpha_reg_481 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal grp_krnl_bp_Pipeline_l_load_input_fu_253_ap_start : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_l_load_input_fu_253_ap_done : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_l_load_input_fu_253_ap_idle : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_l_load_input_fu_253_ap_ready : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_AWVALID : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_WVALID : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_WLAST : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_ARVALID : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_RREADY : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_BREADY : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_l_load_input_fu_253_mat_p_bram_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_krnl_bp_Pipeline_l_load_input_fu_253_mat_p_bram_ce0 : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_l_load_input_fu_253_mat_p_bram_we0 : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_l_load_input_fu_253_mat_p_bram_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_krnl_bp_Pipeline_l_load_input1_fu_262_ap_start : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_l_load_input1_fu_262_ap_done : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_l_load_input1_fu_262_ap_idle : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_l_load_input1_fu_262_ap_ready : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_l_load_input1_fu_262_vec_q_bram_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_krnl_bp_Pipeline_l_load_input1_fu_262_vec_q_bram_ce0 : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_l_load_input1_fu_262_vec_q_bram_we0 : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_l_load_input1_fu_262_vec_q_bram_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_krnl_bp_Pipeline_VITIS_LOOP_236_1_fu_269_ap_start : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_VITIS_LOOP_236_1_fu_269_ap_done : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_VITIS_LOOP_236_1_fu_269_ap_idle : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_VITIS_LOOP_236_1_fu_269_ap_ready : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_VITIS_LOOP_236_1_fu_269_u_stream_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_krnl_bp_Pipeline_VITIS_LOOP_236_1_fu_269_u_stream_write : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_VITIS_LOOP_236_12_fu_275_ap_start : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_VITIS_LOOP_236_12_fu_275_ap_done : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_VITIS_LOOP_236_12_fu_275_ap_idle : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_VITIS_LOOP_236_12_fu_275_ap_ready : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_VITIS_LOOP_236_12_fu_275_z_copy_2_stream_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_krnl_bp_Pipeline_VITIS_LOOP_236_12_fu_275_z_copy_2_stream_write : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_VITIS_LOOP_236_13_fu_281_ap_start : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_VITIS_LOOP_236_13_fu_281_ap_done : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_VITIS_LOOP_236_13_fu_281_ap_idle : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_VITIS_LOOP_236_13_fu_281_ap_ready : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_VITIS_LOOP_236_13_fu_281_z_old_stream_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_krnl_bp_Pipeline_VITIS_LOOP_236_13_fu_281_z_old_stream_write : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_l_main_fu_287_ap_start : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_l_main_fu_287_ap_done : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_l_main_fu_287_ap_idle : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_l_main_fu_287_ap_ready : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_l_main_fu_287_u_stream_read : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_l_main_fu_287_u_stream_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_krnl_bp_Pipeline_l_main_fu_287_u_stream_write : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_l_main_fu_287_z_copy_2_stream_read : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_l_main_fu_287_z_copy_2_stream_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_krnl_bp_Pipeline_l_main_fu_287_z_copy_2_stream_write : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_l_main_fu_287_z_u_stream_read : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_l_main_fu_287_z_u_stream_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_krnl_bp_Pipeline_l_main_fu_287_z_u_stream_write : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_l_main_fu_287_mac_res_stream_read : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_l_main_fu_287_mac_res_stream_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_krnl_bp_Pipeline_l_main_fu_287_mac_res_stream_write : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_l_main_fu_287_mat_p_bram_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_krnl_bp_Pipeline_l_main_fu_287_mat_p_bram_ce0 : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_l_main_fu_287_mat_p_bram_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_krnl_bp_Pipeline_l_main_fu_287_mat_p_bram_ce1 : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_l_main_fu_287_z_old_stream_read : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_l_main_fu_287_z_old_stream_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_krnl_bp_Pipeline_l_main_fu_287_z_old_stream_write : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_l_main_fu_287_vec_q_bram_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_krnl_bp_Pipeline_l_main_fu_287_vec_q_bram_ce0 : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_l_main_fu_287_x_bram_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_krnl_bp_Pipeline_l_main_fu_287_x_bram_ce0 : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_l_main_fu_287_x_bram_we0 : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_l_main_fu_287_x_bram_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_krnl_bp_Pipeline_l_main_fu_287_grp_fu_363_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_krnl_bp_Pipeline_l_main_fu_287_grp_fu_363_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_krnl_bp_Pipeline_l_main_fu_287_grp_fu_363_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_krnl_bp_Pipeline_l_main_fu_287_grp_fu_363_p_ce : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_VITIS_LOOP_229_1_fu_338_ap_start : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_VITIS_LOOP_229_1_fu_338_ap_done : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_VITIS_LOOP_229_1_fu_338_ap_idle : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_VITIS_LOOP_229_1_fu_338_ap_ready : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_VITIS_LOOP_229_1_fu_338_u_stream_read : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_VITIS_LOOP_229_14_fu_344_ap_start : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_VITIS_LOOP_229_14_fu_344_ap_done : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_VITIS_LOOP_229_14_fu_344_ap_idle : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_VITIS_LOOP_229_14_fu_344_ap_ready : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_VITIS_LOOP_229_14_fu_344_z_old_stream_read : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_VITIS_LOOP_229_15_fu_350_ap_start : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_VITIS_LOOP_229_15_fu_350_ap_done : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_VITIS_LOOP_229_15_fu_350_ap_idle : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_VITIS_LOOP_229_15_fu_350_ap_ready : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_VITIS_LOOP_229_15_fu_350_z_copy_2_stream_read : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_l_write_mem_fu_356_ap_start : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_l_write_mem_fu_356_ap_done : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_l_write_mem_fu_356_ap_idle : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_l_write_mem_fu_356_ap_ready : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_l_write_mem_fu_356_shiftreg_out : STD_LOGIC_VECTOR (255 downto 0);
    signal grp_krnl_bp_Pipeline_l_write_mem_fu_356_shiftreg_out_ap_vld : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_l_write_mem_fu_356_x_bram_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_krnl_bp_Pipeline_l_write_mem_fu_356_x_bram_ce0 : STD_LOGIC;
    signal gmem0_AWREADY : STD_LOGIC;
    signal gmem0_WREADY : STD_LOGIC;
    signal gmem0_ARVALID : STD_LOGIC;
    signal gmem0_ARREADY : STD_LOGIC;
    signal gmem0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem0_RVALID : STD_LOGIC;
    signal gmem0_RREADY : STD_LOGIC;
    signal gmem0_RDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal gmem0_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem0_BVALID : STD_LOGIC;
    signal gmem1_AWREADY : STD_LOGIC;
    signal gmem1_WREADY : STD_LOGIC;
    signal gmem1_ARVALID : STD_LOGIC;
    signal gmem1_ARREADY : STD_LOGIC;
    signal gmem1_RVALID : STD_LOGIC;
    signal gmem1_RREADY : STD_LOGIC;
    signal gmem1_RDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal gmem1_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem1_BVALID : STD_LOGIC;
    signal gmem2_AWVALID : STD_LOGIC;
    signal gmem2_AWREADY : STD_LOGIC;
    signal gmem2_WVALID : STD_LOGIC;
    signal gmem2_WREADY : STD_LOGIC;
    signal gmem2_ARREADY : STD_LOGIC;
    signal gmem2_RVALID : STD_LOGIC;
    signal gmem2_RDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal gmem2_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem2_BVALID : STD_LOGIC;
    signal gmem2_BREADY : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_l_load_input_fu_253_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal grp_krnl_bp_Pipeline_l_load_input1_fu_262_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (162 downto 0);
    signal ap_NS_fsm_state73 : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_VITIS_LOOP_236_1_fu_269_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal u_stream_din : STD_LOGIC_VECTOR (31 downto 0);
    signal u_stream_full_n : STD_LOGIC;
    signal u_stream_write : STD_LOGIC;
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal grp_krnl_bp_Pipeline_VITIS_LOOP_236_12_fu_275_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal z_copy_2_stream_din : STD_LOGIC_VECTOR (31 downto 0);
    signal z_copy_2_stream_full_n : STD_LOGIC;
    signal z_copy_2_stream_write : STD_LOGIC;
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal grp_krnl_bp_Pipeline_VITIS_LOOP_236_13_fu_281_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal z_old_stream_din : STD_LOGIC_VECTOR (31 downto 0);
    signal z_old_stream_full_n : STD_LOGIC;
    signal z_old_stream_write : STD_LOGIC;
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal grp_krnl_bp_Pipeline_l_main_fu_287_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal u_stream_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal u_stream_empty_n : STD_LOGIC;
    signal u_stream_read : STD_LOGIC;
    signal z_copy_2_stream_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal z_copy_2_stream_empty_n : STD_LOGIC;
    signal z_copy_2_stream_read : STD_LOGIC;
    signal z_u_stream_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal z_u_stream_empty_n : STD_LOGIC;
    signal z_u_stream_read : STD_LOGIC;
    signal z_u_stream_full_n : STD_LOGIC;
    signal z_u_stream_write : STD_LOGIC;
    signal mac_res_stream_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal mac_res_stream_empty_n : STD_LOGIC;
    signal mac_res_stream_read : STD_LOGIC;
    signal mac_res_stream_full_n : STD_LOGIC;
    signal mac_res_stream_write : STD_LOGIC;
    signal z_old_stream_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal z_old_stream_empty_n : STD_LOGIC;
    signal z_old_stream_read : STD_LOGIC;
    signal grp_krnl_bp_Pipeline_VITIS_LOOP_229_1_fu_338_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal grp_krnl_bp_Pipeline_VITIS_LOOP_229_14_fu_344_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal grp_krnl_bp_Pipeline_VITIS_LOOP_229_15_fu_350_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal grp_krnl_bp_Pipeline_l_write_mem_fu_356_ap_start_reg : STD_LOGIC := '0';
    signal sext_ln15_fu_398_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln15_1_fu_408_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln475_fu_418_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state2_io : BOOLEAN;
    signal ap_block_state94_on_subcall_done : BOOLEAN;
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_state74_on_subcall_done : BOOLEAN;
    signal grp_fu_363_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_363_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal grp_fu_363_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_363_ce : STD_LOGIC;
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal ap_ST_fsm_state69_blk : STD_LOGIC;
    signal ap_ST_fsm_state70_blk : STD_LOGIC;
    signal ap_ST_fsm_state71_blk : STD_LOGIC;
    signal ap_ST_fsm_state72_blk : STD_LOGIC;
    signal ap_ST_fsm_state73_blk : STD_LOGIC;
    signal ap_ST_fsm_state74_blk : STD_LOGIC;
    signal ap_ST_fsm_state75_blk : STD_LOGIC;
    signal ap_ST_fsm_state76_blk : STD_LOGIC;
    signal ap_ST_fsm_state77_blk : STD_LOGIC;
    signal ap_ST_fsm_state78_blk : STD_LOGIC;
    signal ap_ST_fsm_state79_blk : STD_LOGIC;
    signal ap_ST_fsm_state80_blk : STD_LOGIC;
    signal ap_ST_fsm_state81_blk : STD_LOGIC;
    signal ap_ST_fsm_state82_blk : STD_LOGIC;
    signal ap_ST_fsm_state83_blk : STD_LOGIC;
    signal ap_ST_fsm_state84_blk : STD_LOGIC;
    signal ap_ST_fsm_state85_blk : STD_LOGIC;
    signal ap_ST_fsm_state86_blk : STD_LOGIC;
    signal ap_ST_fsm_state87_blk : STD_LOGIC;
    signal ap_ST_fsm_state88_blk : STD_LOGIC;
    signal ap_ST_fsm_state89_blk : STD_LOGIC;
    signal ap_ST_fsm_state90_blk : STD_LOGIC;
    signal ap_ST_fsm_state91_blk : STD_LOGIC;
    signal ap_ST_fsm_state92_blk : STD_LOGIC;
    signal ap_ST_fsm_state93_blk : STD_LOGIC;
    signal ap_ST_fsm_state94_blk : STD_LOGIC;
    signal ap_ST_fsm_state95_blk : STD_LOGIC;
    signal ap_ST_fsm_state96_blk : STD_LOGIC;
    signal ap_ST_fsm_state97_blk : STD_LOGIC;
    signal ap_ST_fsm_state98_blk : STD_LOGIC;
    signal ap_ST_fsm_state99_blk : STD_LOGIC;
    signal ap_ST_fsm_state100_blk : STD_LOGIC;
    signal ap_ST_fsm_state101_blk : STD_LOGIC;
    signal ap_ST_fsm_state102_blk : STD_LOGIC;
    signal ap_ST_fsm_state103_blk : STD_LOGIC;
    signal ap_ST_fsm_state104_blk : STD_LOGIC;
    signal ap_ST_fsm_state105_blk : STD_LOGIC;
    signal ap_ST_fsm_state106_blk : STD_LOGIC;
    signal ap_ST_fsm_state107_blk : STD_LOGIC;
    signal ap_ST_fsm_state108_blk : STD_LOGIC;
    signal ap_ST_fsm_state109_blk : STD_LOGIC;
    signal ap_ST_fsm_state110_blk : STD_LOGIC;
    signal ap_ST_fsm_state111_blk : STD_LOGIC;
    signal ap_ST_fsm_state112_blk : STD_LOGIC;
    signal ap_ST_fsm_state113_blk : STD_LOGIC;
    signal ap_ST_fsm_state114_blk : STD_LOGIC;
    signal ap_ST_fsm_state115_blk : STD_LOGIC;
    signal ap_ST_fsm_state116_blk : STD_LOGIC;
    signal ap_ST_fsm_state117_blk : STD_LOGIC;
    signal ap_ST_fsm_state118_blk : STD_LOGIC;
    signal ap_ST_fsm_state119_blk : STD_LOGIC;
    signal ap_ST_fsm_state120_blk : STD_LOGIC;
    signal ap_ST_fsm_state121_blk : STD_LOGIC;
    signal ap_ST_fsm_state122_blk : STD_LOGIC;
    signal ap_ST_fsm_state123_blk : STD_LOGIC;
    signal ap_ST_fsm_state124_blk : STD_LOGIC;
    signal ap_ST_fsm_state125_blk : STD_LOGIC;
    signal ap_ST_fsm_state126_blk : STD_LOGIC;
    signal ap_ST_fsm_state127_blk : STD_LOGIC;
    signal ap_ST_fsm_state128_blk : STD_LOGIC;
    signal ap_ST_fsm_state129_blk : STD_LOGIC;
    signal ap_ST_fsm_state130_blk : STD_LOGIC;
    signal ap_ST_fsm_state131_blk : STD_LOGIC;
    signal ap_ST_fsm_state132_blk : STD_LOGIC;
    signal ap_ST_fsm_state133_blk : STD_LOGIC;
    signal ap_ST_fsm_state134_blk : STD_LOGIC;
    signal ap_ST_fsm_state135_blk : STD_LOGIC;
    signal ap_ST_fsm_state136_blk : STD_LOGIC;
    signal ap_ST_fsm_state137_blk : STD_LOGIC;
    signal ap_ST_fsm_state138_blk : STD_LOGIC;
    signal ap_ST_fsm_state139_blk : STD_LOGIC;
    signal ap_ST_fsm_state140_blk : STD_LOGIC;
    signal ap_ST_fsm_state141_blk : STD_LOGIC;
    signal ap_ST_fsm_state142_blk : STD_LOGIC;
    signal ap_ST_fsm_state143_blk : STD_LOGIC;
    signal ap_ST_fsm_state144_blk : STD_LOGIC;
    signal ap_ST_fsm_state145_blk : STD_LOGIC;
    signal ap_ST_fsm_state146_blk : STD_LOGIC;
    signal ap_ST_fsm_state147_blk : STD_LOGIC;
    signal ap_ST_fsm_state148_blk : STD_LOGIC;
    signal ap_ST_fsm_state149_blk : STD_LOGIC;
    signal ap_ST_fsm_state150_blk : STD_LOGIC;
    signal ap_ST_fsm_state151_blk : STD_LOGIC;
    signal ap_ST_fsm_state152_blk : STD_LOGIC;
    signal ap_ST_fsm_state153_blk : STD_LOGIC;
    signal ap_ST_fsm_state154_blk : STD_LOGIC;
    signal ap_ST_fsm_state155_blk : STD_LOGIC;
    signal ap_ST_fsm_state156_blk : STD_LOGIC;
    signal ap_ST_fsm_state157_blk : STD_LOGIC;
    signal ap_ST_fsm_state158_blk : STD_LOGIC;
    signal ap_ST_fsm_state159_blk : STD_LOGIC;
    signal ap_ST_fsm_state160_blk : STD_LOGIC;
    signal ap_ST_fsm_state161_blk : STD_LOGIC;
    signal ap_ST_fsm_state162_blk : STD_LOGIC;
    signal ap_ST_fsm_state163_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component krnl_bp_krnl_bp_Pipeline_l_load_input IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem0_AWVALID : OUT STD_LOGIC;
        m_axi_gmem0_AWREADY : IN STD_LOGIC;
        m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WVALID : OUT STD_LOGIC;
        m_axi_gmem0_WREADY : IN STD_LOGIC;
        m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_WLAST : OUT STD_LOGIC;
        m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARVALID : OUT STD_LOGIC;
        m_axi_gmem0_ARREADY : IN STD_LOGIC;
        m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RVALID : IN STD_LOGIC;
        m_axi_gmem0_RREADY : OUT STD_LOGIC;
        m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem0_RLAST : IN STD_LOGIC;
        m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BVALID : IN STD_LOGIC;
        m_axi_gmem0_BREADY : OUT STD_LOGIC;
        m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        sext_ln15 : IN STD_LOGIC_VECTOR (57 downto 0);
        mat_p_bram_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        mat_p_bram_ce0 : OUT STD_LOGIC;
        mat_p_bram_we0 : OUT STD_LOGIC;
        mat_p_bram_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component krnl_bp_krnl_bp_Pipeline_l_load_input1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        gmem1_load : IN STD_LOGIC_VECTOR (255 downto 0);
        vec_q_bram_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        vec_q_bram_ce0 : OUT STD_LOGIC;
        vec_q_bram_we0 : OUT STD_LOGIC;
        vec_q_bram_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component krnl_bp_krnl_bp_Pipeline_VITIS_LOOP_236_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        u_stream_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        u_stream_full_n : IN STD_LOGIC;
        u_stream_write : OUT STD_LOGIC );
    end component;


    component krnl_bp_krnl_bp_Pipeline_VITIS_LOOP_236_12 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        z_copy_2_stream_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        z_copy_2_stream_full_n : IN STD_LOGIC;
        z_copy_2_stream_write : OUT STD_LOGIC );
    end component;


    component krnl_bp_krnl_bp_Pipeline_VITIS_LOOP_236_13 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        z_old_stream_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        z_old_stream_full_n : IN STD_LOGIC;
        z_old_stream_write : OUT STD_LOGIC );
    end component;


    component krnl_bp_krnl_bp_Pipeline_l_main IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        alpha : IN STD_LOGIC_VECTOR (31 downto 0);
        reg_alpha : IN STD_LOGIC_VECTOR (31 downto 0);
        rho : IN STD_LOGIC_VECTOR (31 downto 0);
        u_stream_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        u_stream_empty_n : IN STD_LOGIC;
        u_stream_read : OUT STD_LOGIC;
        u_stream_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        u_stream_full_n : IN STD_LOGIC;
        u_stream_write : OUT STD_LOGIC;
        z_copy_2_stream_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        z_copy_2_stream_empty_n : IN STD_LOGIC;
        z_copy_2_stream_read : OUT STD_LOGIC;
        z_copy_2_stream_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        z_copy_2_stream_full_n : IN STD_LOGIC;
        z_copy_2_stream_write : OUT STD_LOGIC;
        z_u_stream_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        z_u_stream_empty_n : IN STD_LOGIC;
        z_u_stream_read : OUT STD_LOGIC;
        z_u_stream_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        z_u_stream_full_n : IN STD_LOGIC;
        z_u_stream_write : OUT STD_LOGIC;
        mac_res_stream_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        mac_res_stream_empty_n : IN STD_LOGIC;
        mac_res_stream_read : OUT STD_LOGIC;
        mac_res_stream_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        mac_res_stream_full_n : IN STD_LOGIC;
        mac_res_stream_write : OUT STD_LOGIC;
        mat_p_bram_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        mat_p_bram_ce0 : OUT STD_LOGIC;
        mat_p_bram_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        mat_p_bram_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        mat_p_bram_ce1 : OUT STD_LOGIC;
        mat_p_bram_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        z_old_stream_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        z_old_stream_empty_n : IN STD_LOGIC;
        z_old_stream_read : OUT STD_LOGIC;
        z_old_stream_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        z_old_stream_full_n : IN STD_LOGIC;
        z_old_stream_write : OUT STD_LOGIC;
        vec_q_bram_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        vec_q_bram_ce0 : OUT STD_LOGIC;
        vec_q_bram_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        x_bram_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        x_bram_ce0 : OUT STD_LOGIC;
        x_bram_we0 : OUT STD_LOGIC;
        x_bram_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_363_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_363_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_363_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_363_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_363_p_ce : OUT STD_LOGIC );
    end component;


    component krnl_bp_krnl_bp_Pipeline_VITIS_LOOP_229_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        u_stream_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        u_stream_empty_n : IN STD_LOGIC;
        u_stream_read : OUT STD_LOGIC );
    end component;


    component krnl_bp_krnl_bp_Pipeline_VITIS_LOOP_229_14 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        z_old_stream_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        z_old_stream_empty_n : IN STD_LOGIC;
        z_old_stream_read : OUT STD_LOGIC );
    end component;


    component krnl_bp_krnl_bp_Pipeline_VITIS_LOOP_229_15 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        z_copy_2_stream_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        z_copy_2_stream_empty_n : IN STD_LOGIC;
        z_copy_2_stream_read : OUT STD_LOGIC );
    end component;


    component krnl_bp_krnl_bp_Pipeline_l_write_mem IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        shiftreg_out : OUT STD_LOGIC_VECTOR (255 downto 0);
        shiftreg_out_ap_vld : OUT STD_LOGIC;
        x_bram_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        x_bram_ce0 : OUT STD_LOGIC;
        x_bram_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component krnl_bp_faddfsub_32ns_32ns_32_7_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component krnl_bp_mat_p_bram_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component krnl_bp_vec_q_bram_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component krnl_bp_fifo_w32_d36_A_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component krnl_bp_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        mat_p : OUT STD_LOGIC_VECTOR (63 downto 0);
        vec_q : OUT STD_LOGIC_VECTOR (63 downto 0);
        out_r : OUT STD_LOGIC_VECTOR (63 downto 0);
        rho : OUT STD_LOGIC_VECTOR (31 downto 0);
        alpha : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_continue : OUT STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component krnl_bp_gmem0_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component krnl_bp_gmem1_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (31 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component krnl_bp_gmem2_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (31 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    mat_p_bram_U : component krnl_bp_mat_p_bram_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => mat_p_bram_address0,
        ce0 => mat_p_bram_ce0,
        we0 => mat_p_bram_we0,
        d0 => grp_krnl_bp_Pipeline_l_load_input_fu_253_mat_p_bram_d0,
        q0 => mat_p_bram_q0,
        address1 => grp_krnl_bp_Pipeline_l_main_fu_287_mat_p_bram_address1,
        ce1 => mat_p_bram_ce1,
        q1 => mat_p_bram_q1);

    vec_q_bram_U : component krnl_bp_vec_q_bram_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => vec_q_bram_address0,
        ce0 => vec_q_bram_ce0,
        we0 => vec_q_bram_we0,
        d0 => grp_krnl_bp_Pipeline_l_load_input1_fu_262_vec_q_bram_d0,
        q0 => vec_q_bram_q0);

    x_bram_U : component krnl_bp_vec_q_bram_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => x_bram_address0,
        ce0 => x_bram_ce0,
        we0 => x_bram_we0,
        d0 => grp_krnl_bp_Pipeline_l_main_fu_287_x_bram_d0,
        q0 => x_bram_q0);

    grp_krnl_bp_Pipeline_l_load_input_fu_253 : component krnl_bp_krnl_bp_Pipeline_l_load_input
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_krnl_bp_Pipeline_l_load_input_fu_253_ap_start,
        ap_done => grp_krnl_bp_Pipeline_l_load_input_fu_253_ap_done,
        ap_idle => grp_krnl_bp_Pipeline_l_load_input_fu_253_ap_idle,
        ap_ready => grp_krnl_bp_Pipeline_l_load_input_fu_253_ap_ready,
        m_axi_gmem0_AWVALID => grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY => ap_const_logic_0,
        m_axi_gmem0_AWADDR => grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID => grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN => grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE => grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST => grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK => grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE => grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT => grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS => grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION => grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER => grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID => grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY => ap_const_logic_0,
        m_axi_gmem0_WDATA => grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB => grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST => grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_WLAST,
        m_axi_gmem0_WID => grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_WID,
        m_axi_gmem0_WUSER => grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID => grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY => gmem0_ARREADY,
        m_axi_gmem0_ARADDR => grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID => grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN => grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE => grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST => grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK => grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE => grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT => grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS => grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION => grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER => grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID => gmem0_RVALID,
        m_axi_gmem0_RREADY => grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA => gmem0_RDATA,
        m_axi_gmem0_RLAST => ap_const_logic_0,
        m_axi_gmem0_RID => ap_const_lv1_0,
        m_axi_gmem0_RFIFONUM => gmem0_RFIFONUM,
        m_axi_gmem0_RUSER => ap_const_lv1_0,
        m_axi_gmem0_RRESP => ap_const_lv2_0,
        m_axi_gmem0_BVALID => ap_const_logic_0,
        m_axi_gmem0_BREADY => grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP => ap_const_lv2_0,
        m_axi_gmem0_BID => ap_const_lv1_0,
        m_axi_gmem0_BUSER => ap_const_lv1_0,
        sext_ln15 => trunc_ln_reg_438,
        mat_p_bram_address0 => grp_krnl_bp_Pipeline_l_load_input_fu_253_mat_p_bram_address0,
        mat_p_bram_ce0 => grp_krnl_bp_Pipeline_l_load_input_fu_253_mat_p_bram_ce0,
        mat_p_bram_we0 => grp_krnl_bp_Pipeline_l_load_input_fu_253_mat_p_bram_we0,
        mat_p_bram_d0 => grp_krnl_bp_Pipeline_l_load_input_fu_253_mat_p_bram_d0);

    grp_krnl_bp_Pipeline_l_load_input1_fu_262 : component krnl_bp_krnl_bp_Pipeline_l_load_input1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_krnl_bp_Pipeline_l_load_input1_fu_262_ap_start,
        ap_done => grp_krnl_bp_Pipeline_l_load_input1_fu_262_ap_done,
        ap_idle => grp_krnl_bp_Pipeline_l_load_input1_fu_262_ap_idle,
        ap_ready => grp_krnl_bp_Pipeline_l_load_input1_fu_262_ap_ready,
        gmem1_load => gmem1_addr_read_reg_465,
        vec_q_bram_address0 => grp_krnl_bp_Pipeline_l_load_input1_fu_262_vec_q_bram_address0,
        vec_q_bram_ce0 => grp_krnl_bp_Pipeline_l_load_input1_fu_262_vec_q_bram_ce0,
        vec_q_bram_we0 => grp_krnl_bp_Pipeline_l_load_input1_fu_262_vec_q_bram_we0,
        vec_q_bram_d0 => grp_krnl_bp_Pipeline_l_load_input1_fu_262_vec_q_bram_d0);

    grp_krnl_bp_Pipeline_VITIS_LOOP_236_1_fu_269 : component krnl_bp_krnl_bp_Pipeline_VITIS_LOOP_236_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_krnl_bp_Pipeline_VITIS_LOOP_236_1_fu_269_ap_start,
        ap_done => grp_krnl_bp_Pipeline_VITIS_LOOP_236_1_fu_269_ap_done,
        ap_idle => grp_krnl_bp_Pipeline_VITIS_LOOP_236_1_fu_269_ap_idle,
        ap_ready => grp_krnl_bp_Pipeline_VITIS_LOOP_236_1_fu_269_ap_ready,
        u_stream_din => grp_krnl_bp_Pipeline_VITIS_LOOP_236_1_fu_269_u_stream_din,
        u_stream_full_n => u_stream_full_n,
        u_stream_write => grp_krnl_bp_Pipeline_VITIS_LOOP_236_1_fu_269_u_stream_write);

    grp_krnl_bp_Pipeline_VITIS_LOOP_236_12_fu_275 : component krnl_bp_krnl_bp_Pipeline_VITIS_LOOP_236_12
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_krnl_bp_Pipeline_VITIS_LOOP_236_12_fu_275_ap_start,
        ap_done => grp_krnl_bp_Pipeline_VITIS_LOOP_236_12_fu_275_ap_done,
        ap_idle => grp_krnl_bp_Pipeline_VITIS_LOOP_236_12_fu_275_ap_idle,
        ap_ready => grp_krnl_bp_Pipeline_VITIS_LOOP_236_12_fu_275_ap_ready,
        z_copy_2_stream_din => grp_krnl_bp_Pipeline_VITIS_LOOP_236_12_fu_275_z_copy_2_stream_din,
        z_copy_2_stream_full_n => z_copy_2_stream_full_n,
        z_copy_2_stream_write => grp_krnl_bp_Pipeline_VITIS_LOOP_236_12_fu_275_z_copy_2_stream_write);

    grp_krnl_bp_Pipeline_VITIS_LOOP_236_13_fu_281 : component krnl_bp_krnl_bp_Pipeline_VITIS_LOOP_236_13
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_krnl_bp_Pipeline_VITIS_LOOP_236_13_fu_281_ap_start,
        ap_done => grp_krnl_bp_Pipeline_VITIS_LOOP_236_13_fu_281_ap_done,
        ap_idle => grp_krnl_bp_Pipeline_VITIS_LOOP_236_13_fu_281_ap_idle,
        ap_ready => grp_krnl_bp_Pipeline_VITIS_LOOP_236_13_fu_281_ap_ready,
        z_old_stream_din => grp_krnl_bp_Pipeline_VITIS_LOOP_236_13_fu_281_z_old_stream_din,
        z_old_stream_full_n => z_old_stream_full_n,
        z_old_stream_write => grp_krnl_bp_Pipeline_VITIS_LOOP_236_13_fu_281_z_old_stream_write);

    grp_krnl_bp_Pipeline_l_main_fu_287 : component krnl_bp_krnl_bp_Pipeline_l_main
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_krnl_bp_Pipeline_l_main_fu_287_ap_start,
        ap_done => grp_krnl_bp_Pipeline_l_main_fu_287_ap_done,
        ap_idle => grp_krnl_bp_Pipeline_l_main_fu_287_ap_idle,
        ap_ready => grp_krnl_bp_Pipeline_l_main_fu_287_ap_ready,
        alpha => alpha,
        reg_alpha => reg_alpha_reg_481,
        rho => rho,
        u_stream_dout => u_stream_dout,
        u_stream_empty_n => u_stream_empty_n,
        u_stream_read => grp_krnl_bp_Pipeline_l_main_fu_287_u_stream_read,
        u_stream_din => grp_krnl_bp_Pipeline_l_main_fu_287_u_stream_din,
        u_stream_full_n => u_stream_full_n,
        u_stream_write => grp_krnl_bp_Pipeline_l_main_fu_287_u_stream_write,
        z_copy_2_stream_dout => z_copy_2_stream_dout,
        z_copy_2_stream_empty_n => z_copy_2_stream_empty_n,
        z_copy_2_stream_read => grp_krnl_bp_Pipeline_l_main_fu_287_z_copy_2_stream_read,
        z_copy_2_stream_din => grp_krnl_bp_Pipeline_l_main_fu_287_z_copy_2_stream_din,
        z_copy_2_stream_full_n => z_copy_2_stream_full_n,
        z_copy_2_stream_write => grp_krnl_bp_Pipeline_l_main_fu_287_z_copy_2_stream_write,
        z_u_stream_dout => z_u_stream_dout,
        z_u_stream_empty_n => z_u_stream_empty_n,
        z_u_stream_read => grp_krnl_bp_Pipeline_l_main_fu_287_z_u_stream_read,
        z_u_stream_din => grp_krnl_bp_Pipeline_l_main_fu_287_z_u_stream_din,
        z_u_stream_full_n => z_u_stream_full_n,
        z_u_stream_write => grp_krnl_bp_Pipeline_l_main_fu_287_z_u_stream_write,
        mac_res_stream_dout => mac_res_stream_dout,
        mac_res_stream_empty_n => mac_res_stream_empty_n,
        mac_res_stream_read => grp_krnl_bp_Pipeline_l_main_fu_287_mac_res_stream_read,
        mac_res_stream_din => grp_krnl_bp_Pipeline_l_main_fu_287_mac_res_stream_din,
        mac_res_stream_full_n => mac_res_stream_full_n,
        mac_res_stream_write => grp_krnl_bp_Pipeline_l_main_fu_287_mac_res_stream_write,
        mat_p_bram_address0 => grp_krnl_bp_Pipeline_l_main_fu_287_mat_p_bram_address0,
        mat_p_bram_ce0 => grp_krnl_bp_Pipeline_l_main_fu_287_mat_p_bram_ce0,
        mat_p_bram_q0 => mat_p_bram_q0,
        mat_p_bram_address1 => grp_krnl_bp_Pipeline_l_main_fu_287_mat_p_bram_address1,
        mat_p_bram_ce1 => grp_krnl_bp_Pipeline_l_main_fu_287_mat_p_bram_ce1,
        mat_p_bram_q1 => mat_p_bram_q1,
        z_old_stream_dout => z_old_stream_dout,
        z_old_stream_empty_n => z_old_stream_empty_n,
        z_old_stream_read => grp_krnl_bp_Pipeline_l_main_fu_287_z_old_stream_read,
        z_old_stream_din => grp_krnl_bp_Pipeline_l_main_fu_287_z_old_stream_din,
        z_old_stream_full_n => z_old_stream_full_n,
        z_old_stream_write => grp_krnl_bp_Pipeline_l_main_fu_287_z_old_stream_write,
        vec_q_bram_address0 => grp_krnl_bp_Pipeline_l_main_fu_287_vec_q_bram_address0,
        vec_q_bram_ce0 => grp_krnl_bp_Pipeline_l_main_fu_287_vec_q_bram_ce0,
        vec_q_bram_q0 => vec_q_bram_q0,
        x_bram_address0 => grp_krnl_bp_Pipeline_l_main_fu_287_x_bram_address0,
        x_bram_ce0 => grp_krnl_bp_Pipeline_l_main_fu_287_x_bram_ce0,
        x_bram_we0 => grp_krnl_bp_Pipeline_l_main_fu_287_x_bram_we0,
        x_bram_d0 => grp_krnl_bp_Pipeline_l_main_fu_287_x_bram_d0,
        grp_fu_363_p_din0 => grp_krnl_bp_Pipeline_l_main_fu_287_grp_fu_363_p_din0,
        grp_fu_363_p_din1 => grp_krnl_bp_Pipeline_l_main_fu_287_grp_fu_363_p_din1,
        grp_fu_363_p_opcode => grp_krnl_bp_Pipeline_l_main_fu_287_grp_fu_363_p_opcode,
        grp_fu_363_p_dout0 => grp_fu_363_p2,
        grp_fu_363_p_ce => grp_krnl_bp_Pipeline_l_main_fu_287_grp_fu_363_p_ce);

    grp_krnl_bp_Pipeline_VITIS_LOOP_229_1_fu_338 : component krnl_bp_krnl_bp_Pipeline_VITIS_LOOP_229_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_krnl_bp_Pipeline_VITIS_LOOP_229_1_fu_338_ap_start,
        ap_done => grp_krnl_bp_Pipeline_VITIS_LOOP_229_1_fu_338_ap_done,
        ap_idle => grp_krnl_bp_Pipeline_VITIS_LOOP_229_1_fu_338_ap_idle,
        ap_ready => grp_krnl_bp_Pipeline_VITIS_LOOP_229_1_fu_338_ap_ready,
        u_stream_dout => u_stream_dout,
        u_stream_empty_n => u_stream_empty_n,
        u_stream_read => grp_krnl_bp_Pipeline_VITIS_LOOP_229_1_fu_338_u_stream_read);

    grp_krnl_bp_Pipeline_VITIS_LOOP_229_14_fu_344 : component krnl_bp_krnl_bp_Pipeline_VITIS_LOOP_229_14
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_krnl_bp_Pipeline_VITIS_LOOP_229_14_fu_344_ap_start,
        ap_done => grp_krnl_bp_Pipeline_VITIS_LOOP_229_14_fu_344_ap_done,
        ap_idle => grp_krnl_bp_Pipeline_VITIS_LOOP_229_14_fu_344_ap_idle,
        ap_ready => grp_krnl_bp_Pipeline_VITIS_LOOP_229_14_fu_344_ap_ready,
        z_old_stream_dout => z_old_stream_dout,
        z_old_stream_empty_n => z_old_stream_empty_n,
        z_old_stream_read => grp_krnl_bp_Pipeline_VITIS_LOOP_229_14_fu_344_z_old_stream_read);

    grp_krnl_bp_Pipeline_VITIS_LOOP_229_15_fu_350 : component krnl_bp_krnl_bp_Pipeline_VITIS_LOOP_229_15
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_krnl_bp_Pipeline_VITIS_LOOP_229_15_fu_350_ap_start,
        ap_done => grp_krnl_bp_Pipeline_VITIS_LOOP_229_15_fu_350_ap_done,
        ap_idle => grp_krnl_bp_Pipeline_VITIS_LOOP_229_15_fu_350_ap_idle,
        ap_ready => grp_krnl_bp_Pipeline_VITIS_LOOP_229_15_fu_350_ap_ready,
        z_copy_2_stream_dout => z_copy_2_stream_dout,
        z_copy_2_stream_empty_n => z_copy_2_stream_empty_n,
        z_copy_2_stream_read => grp_krnl_bp_Pipeline_VITIS_LOOP_229_15_fu_350_z_copy_2_stream_read);

    grp_krnl_bp_Pipeline_l_write_mem_fu_356 : component krnl_bp_krnl_bp_Pipeline_l_write_mem
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_krnl_bp_Pipeline_l_write_mem_fu_356_ap_start,
        ap_done => grp_krnl_bp_Pipeline_l_write_mem_fu_356_ap_done,
        ap_idle => grp_krnl_bp_Pipeline_l_write_mem_fu_356_ap_idle,
        ap_ready => grp_krnl_bp_Pipeline_l_write_mem_fu_356_ap_ready,
        shiftreg_out => grp_krnl_bp_Pipeline_l_write_mem_fu_356_shiftreg_out,
        shiftreg_out_ap_vld => grp_krnl_bp_Pipeline_l_write_mem_fu_356_shiftreg_out_ap_vld,
        x_bram_address0 => grp_krnl_bp_Pipeline_l_write_mem_fu_356_x_bram_address0,
        x_bram_ce0 => grp_krnl_bp_Pipeline_l_write_mem_fu_356_x_bram_ce0,
        x_bram_q0 => x_bram_q0);

    control_s_axi_U : component krnl_bp_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        mat_p => mat_p,
        vec_q => vec_q,
        out_r => out_r,
        rho => rho,
        alpha => alpha,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_continue => ap_continue,
        ap_idle => ap_idle);

    gmem0_m_axi_U : component krnl_bp_gmem0_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 69,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM0_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM0_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM0_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM0_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM0_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM0_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM0_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM0_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM0_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM0_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM0_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 512,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem0_AWVALID,
        AWREADY => m_axi_gmem0_AWREADY,
        AWADDR => m_axi_gmem0_AWADDR,
        AWID => m_axi_gmem0_AWID,
        AWLEN => m_axi_gmem0_AWLEN,
        AWSIZE => m_axi_gmem0_AWSIZE,
        AWBURST => m_axi_gmem0_AWBURST,
        AWLOCK => m_axi_gmem0_AWLOCK,
        AWCACHE => m_axi_gmem0_AWCACHE,
        AWPROT => m_axi_gmem0_AWPROT,
        AWQOS => m_axi_gmem0_AWQOS,
        AWREGION => m_axi_gmem0_AWREGION,
        AWUSER => m_axi_gmem0_AWUSER,
        WVALID => m_axi_gmem0_WVALID,
        WREADY => m_axi_gmem0_WREADY,
        WDATA => m_axi_gmem0_WDATA,
        WSTRB => m_axi_gmem0_WSTRB,
        WLAST => m_axi_gmem0_WLAST,
        WID => m_axi_gmem0_WID,
        WUSER => m_axi_gmem0_WUSER,
        ARVALID => m_axi_gmem0_ARVALID,
        ARREADY => m_axi_gmem0_ARREADY,
        ARADDR => m_axi_gmem0_ARADDR,
        ARID => m_axi_gmem0_ARID,
        ARLEN => m_axi_gmem0_ARLEN,
        ARSIZE => m_axi_gmem0_ARSIZE,
        ARBURST => m_axi_gmem0_ARBURST,
        ARLOCK => m_axi_gmem0_ARLOCK,
        ARCACHE => m_axi_gmem0_ARCACHE,
        ARPROT => m_axi_gmem0_ARPROT,
        ARQOS => m_axi_gmem0_ARQOS,
        ARREGION => m_axi_gmem0_ARREGION,
        ARUSER => m_axi_gmem0_ARUSER,
        RVALID => m_axi_gmem0_RVALID,
        RREADY => m_axi_gmem0_RREADY,
        RDATA => m_axi_gmem0_RDATA,
        RLAST => m_axi_gmem0_RLAST,
        RID => m_axi_gmem0_RID,
        RUSER => m_axi_gmem0_RUSER,
        RRESP => m_axi_gmem0_RRESP,
        BVALID => m_axi_gmem0_BVALID,
        BREADY => m_axi_gmem0_BREADY,
        BRESP => m_axi_gmem0_BRESP,
        BID => m_axi_gmem0_BID,
        BUSER => m_axi_gmem0_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem0_ARVALID,
        I_ARREADY => gmem0_ARREADY,
        I_ARADDR => gmem0_ARADDR,
        I_ARLEN => gmem0_ARLEN,
        I_RVALID => gmem0_RVALID,
        I_RREADY => gmem0_RREADY,
        I_RDATA => gmem0_RDATA,
        I_RFIFONUM => gmem0_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem0_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem0_WREADY,
        I_WDATA => ap_const_lv512_lc_1,
        I_WSTRB => ap_const_lv64_0,
        I_BVALID => gmem0_BVALID,
        I_BREADY => ap_const_logic_0);

    gmem1_m_axi_U : component krnl_bp_gmem1_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 69,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM1_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 256,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem1_AWVALID,
        AWREADY => m_axi_gmem1_AWREADY,
        AWADDR => m_axi_gmem1_AWADDR,
        AWID => m_axi_gmem1_AWID,
        AWLEN => m_axi_gmem1_AWLEN,
        AWSIZE => m_axi_gmem1_AWSIZE,
        AWBURST => m_axi_gmem1_AWBURST,
        AWLOCK => m_axi_gmem1_AWLOCK,
        AWCACHE => m_axi_gmem1_AWCACHE,
        AWPROT => m_axi_gmem1_AWPROT,
        AWQOS => m_axi_gmem1_AWQOS,
        AWREGION => m_axi_gmem1_AWREGION,
        AWUSER => m_axi_gmem1_AWUSER,
        WVALID => m_axi_gmem1_WVALID,
        WREADY => m_axi_gmem1_WREADY,
        WDATA => m_axi_gmem1_WDATA,
        WSTRB => m_axi_gmem1_WSTRB,
        WLAST => m_axi_gmem1_WLAST,
        WID => m_axi_gmem1_WID,
        WUSER => m_axi_gmem1_WUSER,
        ARVALID => m_axi_gmem1_ARVALID,
        ARREADY => m_axi_gmem1_ARREADY,
        ARADDR => m_axi_gmem1_ARADDR,
        ARID => m_axi_gmem1_ARID,
        ARLEN => m_axi_gmem1_ARLEN,
        ARSIZE => m_axi_gmem1_ARSIZE,
        ARBURST => m_axi_gmem1_ARBURST,
        ARLOCK => m_axi_gmem1_ARLOCK,
        ARCACHE => m_axi_gmem1_ARCACHE,
        ARPROT => m_axi_gmem1_ARPROT,
        ARQOS => m_axi_gmem1_ARQOS,
        ARREGION => m_axi_gmem1_ARREGION,
        ARUSER => m_axi_gmem1_ARUSER,
        RVALID => m_axi_gmem1_RVALID,
        RREADY => m_axi_gmem1_RREADY,
        RDATA => m_axi_gmem1_RDATA,
        RLAST => m_axi_gmem1_RLAST,
        RID => m_axi_gmem1_RID,
        RUSER => m_axi_gmem1_RUSER,
        RRESP => m_axi_gmem1_RRESP,
        BVALID => m_axi_gmem1_BVALID,
        BREADY => m_axi_gmem1_BREADY,
        BRESP => m_axi_gmem1_BRESP,
        BID => m_axi_gmem1_BID,
        BUSER => m_axi_gmem1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem1_ARVALID,
        I_ARREADY => gmem1_ARREADY,
        I_ARADDR => sext_ln15_1_fu_408_p1,
        I_ARLEN => ap_const_lv32_1,
        I_RVALID => gmem1_RVALID,
        I_RREADY => gmem1_RREADY,
        I_RDATA => gmem1_RDATA,
        I_RFIFONUM => gmem1_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem1_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem1_WREADY,
        I_WDATA => ap_const_lv256_lc_1,
        I_WSTRB => ap_const_lv32_0,
        I_BVALID => gmem1_BVALID,
        I_BREADY => ap_const_logic_0);

    gmem2_m_axi_U : component krnl_bp_gmem2_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 69,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM2_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM2_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM2_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM2_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM2_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM2_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM2_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM2_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM2_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM2_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM2_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 256,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem2_AWVALID,
        AWREADY => m_axi_gmem2_AWREADY,
        AWADDR => m_axi_gmem2_AWADDR,
        AWID => m_axi_gmem2_AWID,
        AWLEN => m_axi_gmem2_AWLEN,
        AWSIZE => m_axi_gmem2_AWSIZE,
        AWBURST => m_axi_gmem2_AWBURST,
        AWLOCK => m_axi_gmem2_AWLOCK,
        AWCACHE => m_axi_gmem2_AWCACHE,
        AWPROT => m_axi_gmem2_AWPROT,
        AWQOS => m_axi_gmem2_AWQOS,
        AWREGION => m_axi_gmem2_AWREGION,
        AWUSER => m_axi_gmem2_AWUSER,
        WVALID => m_axi_gmem2_WVALID,
        WREADY => m_axi_gmem2_WREADY,
        WDATA => m_axi_gmem2_WDATA,
        WSTRB => m_axi_gmem2_WSTRB,
        WLAST => m_axi_gmem2_WLAST,
        WID => m_axi_gmem2_WID,
        WUSER => m_axi_gmem2_WUSER,
        ARVALID => m_axi_gmem2_ARVALID,
        ARREADY => m_axi_gmem2_ARREADY,
        ARADDR => m_axi_gmem2_ARADDR,
        ARID => m_axi_gmem2_ARID,
        ARLEN => m_axi_gmem2_ARLEN,
        ARSIZE => m_axi_gmem2_ARSIZE,
        ARBURST => m_axi_gmem2_ARBURST,
        ARLOCK => m_axi_gmem2_ARLOCK,
        ARCACHE => m_axi_gmem2_ARCACHE,
        ARPROT => m_axi_gmem2_ARPROT,
        ARQOS => m_axi_gmem2_ARQOS,
        ARREGION => m_axi_gmem2_ARREGION,
        ARUSER => m_axi_gmem2_ARUSER,
        RVALID => m_axi_gmem2_RVALID,
        RREADY => m_axi_gmem2_RREADY,
        RDATA => m_axi_gmem2_RDATA,
        RLAST => m_axi_gmem2_RLAST,
        RID => m_axi_gmem2_RID,
        RUSER => m_axi_gmem2_RUSER,
        RRESP => m_axi_gmem2_RRESP,
        BVALID => m_axi_gmem2_BVALID,
        BREADY => m_axi_gmem2_BREADY,
        BRESP => m_axi_gmem2_BRESP,
        BID => m_axi_gmem2_BID,
        BUSER => m_axi_gmem2_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => gmem2_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARLEN => ap_const_lv32_0,
        I_RVALID => gmem2_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => gmem2_RDATA,
        I_RFIFONUM => gmem2_RFIFONUM,
        I_AWVALID => gmem2_AWVALID,
        I_AWREADY => gmem2_AWREADY,
        I_AWADDR => sext_ln475_fu_418_p1,
        I_AWLEN => ap_const_lv32_1,
        I_WVALID => gmem2_WVALID,
        I_WREADY => gmem2_WREADY,
        I_WDATA => grp_krnl_bp_Pipeline_l_write_mem_fu_356_shiftreg_out,
        I_WSTRB => ap_const_lv32_FFFFFFFF,
        I_BVALID => gmem2_BVALID,
        I_BREADY => gmem2_BREADY);

    faddfsub_32ns_32ns_32_7_full_dsp_1_U63 : component krnl_bp_faddfsub_32ns_32ns_32_7_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_363_p0,
        din1 => grp_fu_363_p1,
        opcode => grp_fu_363_opcode,
        ce => grp_fu_363_ce,
        dout => grp_fu_363_p2);

    mac_res_stream_fifo_U : component krnl_bp_fifo_w32_d36_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_krnl_bp_Pipeline_l_main_fu_287_mac_res_stream_din,
        if_full_n => mac_res_stream_full_n,
        if_write => mac_res_stream_write,
        if_dout => mac_res_stream_dout,
        if_empty_n => mac_res_stream_empty_n,
        if_read => mac_res_stream_read);

    u_stream_fifo_U : component krnl_bp_fifo_w32_d36_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => u_stream_din,
        if_full_n => u_stream_full_n,
        if_write => u_stream_write,
        if_dout => u_stream_dout,
        if_empty_n => u_stream_empty_n,
        if_read => u_stream_read);

    z_copy_2_stream_fifo_U : component krnl_bp_fifo_w32_d36_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => z_copy_2_stream_din,
        if_full_n => z_copy_2_stream_full_n,
        if_write => z_copy_2_stream_write,
        if_dout => z_copy_2_stream_dout,
        if_empty_n => z_copy_2_stream_empty_n,
        if_read => z_copy_2_stream_read);

    z_old_stream_fifo_U : component krnl_bp_fifo_w32_d36_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => z_old_stream_din,
        if_full_n => z_old_stream_full_n,
        if_write => z_old_stream_write,
        if_dout => z_old_stream_dout,
        if_empty_n => z_old_stream_empty_n,
        if_read => z_old_stream_read);

    z_u_stream_fifo_U : component krnl_bp_fifo_w32_d36_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_krnl_bp_Pipeline_l_main_fu_287_z_u_stream_din,
        if_full_n => z_u_stream_full_n,
        if_write => z_u_stream_write,
        if_dout => z_u_stream_dout,
        if_empty_n => z_u_stream_empty_n,
        if_read => z_u_stream_read);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((gmem2_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state163))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_krnl_bp_Pipeline_VITIS_LOOP_229_14_fu_344_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_krnl_bp_Pipeline_VITIS_LOOP_229_14_fu_344_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
                    grp_krnl_bp_Pipeline_VITIS_LOOP_229_14_fu_344_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_krnl_bp_Pipeline_VITIS_LOOP_229_14_fu_344_ap_ready = ap_const_logic_1)) then 
                    grp_krnl_bp_Pipeline_VITIS_LOOP_229_14_fu_344_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_krnl_bp_Pipeline_VITIS_LOOP_229_15_fu_350_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_krnl_bp_Pipeline_VITIS_LOOP_229_15_fu_350_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
                    grp_krnl_bp_Pipeline_VITIS_LOOP_229_15_fu_350_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_krnl_bp_Pipeline_VITIS_LOOP_229_15_fu_350_ap_ready = ap_const_logic_1)) then 
                    grp_krnl_bp_Pipeline_VITIS_LOOP_229_15_fu_350_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_krnl_bp_Pipeline_VITIS_LOOP_229_1_fu_338_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_krnl_bp_Pipeline_VITIS_LOOP_229_1_fu_338_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
                    grp_krnl_bp_Pipeline_VITIS_LOOP_229_1_fu_338_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_krnl_bp_Pipeline_VITIS_LOOP_229_1_fu_338_ap_ready = ap_const_logic_1)) then 
                    grp_krnl_bp_Pipeline_VITIS_LOOP_229_1_fu_338_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_krnl_bp_Pipeline_VITIS_LOOP_236_12_fu_275_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_krnl_bp_Pipeline_VITIS_LOOP_236_12_fu_275_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
                    grp_krnl_bp_Pipeline_VITIS_LOOP_236_12_fu_275_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_krnl_bp_Pipeline_VITIS_LOOP_236_12_fu_275_ap_ready = ap_const_logic_1)) then 
                    grp_krnl_bp_Pipeline_VITIS_LOOP_236_12_fu_275_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_krnl_bp_Pipeline_VITIS_LOOP_236_13_fu_281_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_krnl_bp_Pipeline_VITIS_LOOP_236_13_fu_281_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
                    grp_krnl_bp_Pipeline_VITIS_LOOP_236_13_fu_281_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_krnl_bp_Pipeline_VITIS_LOOP_236_13_fu_281_ap_ready = ap_const_logic_1)) then 
                    grp_krnl_bp_Pipeline_VITIS_LOOP_236_13_fu_281_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_krnl_bp_Pipeline_VITIS_LOOP_236_1_fu_269_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_krnl_bp_Pipeline_VITIS_LOOP_236_1_fu_269_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
                    grp_krnl_bp_Pipeline_VITIS_LOOP_236_1_fu_269_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_krnl_bp_Pipeline_VITIS_LOOP_236_1_fu_269_ap_ready = ap_const_logic_1)) then 
                    grp_krnl_bp_Pipeline_VITIS_LOOP_236_1_fu_269_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_krnl_bp_Pipeline_l_load_input1_fu_262_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_krnl_bp_Pipeline_l_load_input1_fu_262_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state73) and (ap_const_logic_1 = ap_CS_fsm_state72))) then 
                    grp_krnl_bp_Pipeline_l_load_input1_fu_262_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_krnl_bp_Pipeline_l_load_input1_fu_262_ap_ready = ap_const_logic_1)) then 
                    grp_krnl_bp_Pipeline_l_load_input1_fu_262_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_krnl_bp_Pipeline_l_load_input_fu_253_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_krnl_bp_Pipeline_l_load_input_fu_253_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
                    grp_krnl_bp_Pipeline_l_load_input_fu_253_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_krnl_bp_Pipeline_l_load_input_fu_253_ap_ready = ap_const_logic_1)) then 
                    grp_krnl_bp_Pipeline_l_load_input_fu_253_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_krnl_bp_Pipeline_l_main_fu_287_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_krnl_bp_Pipeline_l_main_fu_287_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
                    grp_krnl_bp_Pipeline_l_main_fu_287_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_krnl_bp_Pipeline_l_main_fu_287_ap_ready = ap_const_logic_1)) then 
                    grp_krnl_bp_Pipeline_l_main_fu_287_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_krnl_bp_Pipeline_l_write_mem_fu_356_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_krnl_bp_Pipeline_l_write_mem_fu_356_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
                    grp_krnl_bp_Pipeline_l_write_mem_fu_356_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_krnl_bp_Pipeline_l_write_mem_fu_356_ap_ready = ap_const_logic_1)) then 
                    grp_krnl_bp_Pipeline_l_write_mem_fu_356_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_n_inv <= ap_rst_reg_1;
        end if;
    end process;

    ap_rst_reg_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_1 <= ap_rst_reg_2;
        end if;
    end process;

    ap_rst_reg_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_reg_2 <= not(ap_rst_n);
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state72)) then
                gmem1_addr_read_reg_465 <= gmem1_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state83)) then
                reg_alpha_reg_481 <= grp_fu_363_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                trunc_ln15_1_reg_444 <= vec_q(63 downto 5);
                trunc_ln4_reg_449 <= out_r(63 downto 5);
                trunc_ln_reg_438 <= mat_p(63 downto 6);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state72, ap_CS_fsm_state94, ap_CS_fsm_state95, ap_CS_fsm_state163, ap_CS_fsm_state74, grp_krnl_bp_Pipeline_VITIS_LOOP_236_1_fu_269_ap_done, grp_krnl_bp_Pipeline_VITIS_LOOP_236_12_fu_275_ap_done, grp_krnl_bp_Pipeline_VITIS_LOOP_236_13_fu_281_ap_done, grp_krnl_bp_Pipeline_l_main_fu_287_ap_done, grp_krnl_bp_Pipeline_VITIS_LOOP_229_1_fu_338_ap_done, grp_krnl_bp_Pipeline_VITIS_LOOP_229_14_fu_344_ap_done, gmem1_RVALID, gmem2_AWREADY, gmem2_WREADY, gmem2_BVALID, ap_CS_fsm_state76, ap_CS_fsm_state79, ap_CS_fsm_state82, ap_CS_fsm_state85, ap_CS_fsm_state88, ap_CS_fsm_state91, ap_block_state2_io, ap_block_state94_on_subcall_done, ap_block_state74_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                if (((gmem1_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state72))) then
                    ap_NS_fsm <= ap_ST_fsm_state73;
                else
                    ap_NS_fsm <= ap_ST_fsm_state72;
                end if;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state74) and (ap_const_boolean_0 = ap_block_state74_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state75;
                else
                    ap_NS_fsm <= ap_ST_fsm_state74;
                end if;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                if (((grp_krnl_bp_Pipeline_VITIS_LOOP_236_1_fu_269_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state76))) then
                    ap_NS_fsm <= ap_ST_fsm_state77;
                else
                    ap_NS_fsm <= ap_ST_fsm_state76;
                end if;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                if (((grp_krnl_bp_Pipeline_VITIS_LOOP_236_12_fu_275_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state79))) then
                    ap_NS_fsm <= ap_ST_fsm_state80;
                else
                    ap_NS_fsm <= ap_ST_fsm_state79;
                end if;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                if (((grp_krnl_bp_Pipeline_VITIS_LOOP_236_13_fu_281_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state82))) then
                    ap_NS_fsm <= ap_ST_fsm_state83;
                else
                    ap_NS_fsm <= ap_ST_fsm_state82;
                end if;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                if (((grp_krnl_bp_Pipeline_l_main_fu_287_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state85))) then
                    ap_NS_fsm <= ap_ST_fsm_state86;
                else
                    ap_NS_fsm <= ap_ST_fsm_state85;
                end if;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                if (((grp_krnl_bp_Pipeline_VITIS_LOOP_229_1_fu_338_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state88))) then
                    ap_NS_fsm <= ap_ST_fsm_state89;
                else
                    ap_NS_fsm <= ap_ST_fsm_state88;
                end if;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                if (((grp_krnl_bp_Pipeline_VITIS_LOOP_229_14_fu_344_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state91))) then
                    ap_NS_fsm <= ap_ST_fsm_state92;
                else
                    ap_NS_fsm <= ap_ST_fsm_state91;
                end if;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                if ((not(((gmem2_AWREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state94_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state94))) then
                    ap_NS_fsm <= ap_ST_fsm_state95;
                else
                    ap_NS_fsm <= ap_ST_fsm_state94;
                end if;
            when ap_ST_fsm_state95 => 
                if (((gmem2_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state95))) then
                    ap_NS_fsm <= ap_ST_fsm_state96;
                else
                    ap_NS_fsm <= ap_ST_fsm_state95;
                end if;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state113;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                ap_NS_fsm <= ap_ST_fsm_state116;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when ap_ST_fsm_state117 => 
                ap_NS_fsm <= ap_ST_fsm_state118;
            when ap_ST_fsm_state118 => 
                ap_NS_fsm <= ap_ST_fsm_state119;
            when ap_ST_fsm_state119 => 
                ap_NS_fsm <= ap_ST_fsm_state120;
            when ap_ST_fsm_state120 => 
                ap_NS_fsm <= ap_ST_fsm_state121;
            when ap_ST_fsm_state121 => 
                ap_NS_fsm <= ap_ST_fsm_state122;
            when ap_ST_fsm_state122 => 
                ap_NS_fsm <= ap_ST_fsm_state123;
            when ap_ST_fsm_state123 => 
                ap_NS_fsm <= ap_ST_fsm_state124;
            when ap_ST_fsm_state124 => 
                ap_NS_fsm <= ap_ST_fsm_state125;
            when ap_ST_fsm_state125 => 
                ap_NS_fsm <= ap_ST_fsm_state126;
            when ap_ST_fsm_state126 => 
                ap_NS_fsm <= ap_ST_fsm_state127;
            when ap_ST_fsm_state127 => 
                ap_NS_fsm <= ap_ST_fsm_state128;
            when ap_ST_fsm_state128 => 
                ap_NS_fsm <= ap_ST_fsm_state129;
            when ap_ST_fsm_state129 => 
                ap_NS_fsm <= ap_ST_fsm_state130;
            when ap_ST_fsm_state130 => 
                ap_NS_fsm <= ap_ST_fsm_state131;
            when ap_ST_fsm_state131 => 
                ap_NS_fsm <= ap_ST_fsm_state132;
            when ap_ST_fsm_state132 => 
                ap_NS_fsm <= ap_ST_fsm_state133;
            when ap_ST_fsm_state133 => 
                ap_NS_fsm <= ap_ST_fsm_state134;
            when ap_ST_fsm_state134 => 
                ap_NS_fsm <= ap_ST_fsm_state135;
            when ap_ST_fsm_state135 => 
                ap_NS_fsm <= ap_ST_fsm_state136;
            when ap_ST_fsm_state136 => 
                ap_NS_fsm <= ap_ST_fsm_state137;
            when ap_ST_fsm_state137 => 
                ap_NS_fsm <= ap_ST_fsm_state138;
            when ap_ST_fsm_state138 => 
                ap_NS_fsm <= ap_ST_fsm_state139;
            when ap_ST_fsm_state139 => 
                ap_NS_fsm <= ap_ST_fsm_state140;
            when ap_ST_fsm_state140 => 
                ap_NS_fsm <= ap_ST_fsm_state141;
            when ap_ST_fsm_state141 => 
                ap_NS_fsm <= ap_ST_fsm_state142;
            when ap_ST_fsm_state142 => 
                ap_NS_fsm <= ap_ST_fsm_state143;
            when ap_ST_fsm_state143 => 
                ap_NS_fsm <= ap_ST_fsm_state144;
            when ap_ST_fsm_state144 => 
                ap_NS_fsm <= ap_ST_fsm_state145;
            when ap_ST_fsm_state145 => 
                ap_NS_fsm <= ap_ST_fsm_state146;
            when ap_ST_fsm_state146 => 
                ap_NS_fsm <= ap_ST_fsm_state147;
            when ap_ST_fsm_state147 => 
                ap_NS_fsm <= ap_ST_fsm_state148;
            when ap_ST_fsm_state148 => 
                ap_NS_fsm <= ap_ST_fsm_state149;
            when ap_ST_fsm_state149 => 
                ap_NS_fsm <= ap_ST_fsm_state150;
            when ap_ST_fsm_state150 => 
                ap_NS_fsm <= ap_ST_fsm_state151;
            when ap_ST_fsm_state151 => 
                ap_NS_fsm <= ap_ST_fsm_state152;
            when ap_ST_fsm_state152 => 
                ap_NS_fsm <= ap_ST_fsm_state153;
            when ap_ST_fsm_state153 => 
                ap_NS_fsm <= ap_ST_fsm_state154;
            when ap_ST_fsm_state154 => 
                ap_NS_fsm <= ap_ST_fsm_state155;
            when ap_ST_fsm_state155 => 
                ap_NS_fsm <= ap_ST_fsm_state156;
            when ap_ST_fsm_state156 => 
                ap_NS_fsm <= ap_ST_fsm_state157;
            when ap_ST_fsm_state157 => 
                ap_NS_fsm <= ap_ST_fsm_state158;
            when ap_ST_fsm_state158 => 
                ap_NS_fsm <= ap_ST_fsm_state159;
            when ap_ST_fsm_state159 => 
                ap_NS_fsm <= ap_ST_fsm_state160;
            when ap_ST_fsm_state160 => 
                ap_NS_fsm <= ap_ST_fsm_state161;
            when ap_ST_fsm_state161 => 
                ap_NS_fsm <= ap_ST_fsm_state162;
            when ap_ST_fsm_state162 => 
                ap_NS_fsm <= ap_ST_fsm_state163;
            when ap_ST_fsm_state163 => 
                if (((gmem2_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state163))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state163;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state163 <= ap_CS_fsm(162);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state83 <= ap_CS_fsm(82);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_CS_fsm_state90 <= ap_CS_fsm(89);
    ap_CS_fsm_state91 <= ap_CS_fsm(90);
    ap_CS_fsm_state93 <= ap_CS_fsm(92);
    ap_CS_fsm_state94 <= ap_CS_fsm(93);
    ap_CS_fsm_state95 <= ap_CS_fsm(94);
    ap_NS_fsm_state73 <= ap_NS_fsm(72);
    ap_ST_fsm_state100_blk <= ap_const_logic_0;
    ap_ST_fsm_state101_blk <= ap_const_logic_0;
    ap_ST_fsm_state102_blk <= ap_const_logic_0;
    ap_ST_fsm_state103_blk <= ap_const_logic_0;
    ap_ST_fsm_state104_blk <= ap_const_logic_0;
    ap_ST_fsm_state105_blk <= ap_const_logic_0;
    ap_ST_fsm_state106_blk <= ap_const_logic_0;
    ap_ST_fsm_state107_blk <= ap_const_logic_0;
    ap_ST_fsm_state108_blk <= ap_const_logic_0;
    ap_ST_fsm_state109_blk <= ap_const_logic_0;
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state110_blk <= ap_const_logic_0;
    ap_ST_fsm_state111_blk <= ap_const_logic_0;
    ap_ST_fsm_state112_blk <= ap_const_logic_0;
    ap_ST_fsm_state113_blk <= ap_const_logic_0;
    ap_ST_fsm_state114_blk <= ap_const_logic_0;
    ap_ST_fsm_state115_blk <= ap_const_logic_0;
    ap_ST_fsm_state116_blk <= ap_const_logic_0;
    ap_ST_fsm_state117_blk <= ap_const_logic_0;
    ap_ST_fsm_state118_blk <= ap_const_logic_0;
    ap_ST_fsm_state119_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state120_blk <= ap_const_logic_0;
    ap_ST_fsm_state121_blk <= ap_const_logic_0;
    ap_ST_fsm_state122_blk <= ap_const_logic_0;
    ap_ST_fsm_state123_blk <= ap_const_logic_0;
    ap_ST_fsm_state124_blk <= ap_const_logic_0;
    ap_ST_fsm_state125_blk <= ap_const_logic_0;
    ap_ST_fsm_state126_blk <= ap_const_logic_0;
    ap_ST_fsm_state127_blk <= ap_const_logic_0;
    ap_ST_fsm_state128_blk <= ap_const_logic_0;
    ap_ST_fsm_state129_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state130_blk <= ap_const_logic_0;
    ap_ST_fsm_state131_blk <= ap_const_logic_0;
    ap_ST_fsm_state132_blk <= ap_const_logic_0;
    ap_ST_fsm_state133_blk <= ap_const_logic_0;
    ap_ST_fsm_state134_blk <= ap_const_logic_0;
    ap_ST_fsm_state135_blk <= ap_const_logic_0;
    ap_ST_fsm_state136_blk <= ap_const_logic_0;
    ap_ST_fsm_state137_blk <= ap_const_logic_0;
    ap_ST_fsm_state138_blk <= ap_const_logic_0;
    ap_ST_fsm_state139_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state140_blk <= ap_const_logic_0;
    ap_ST_fsm_state141_blk <= ap_const_logic_0;
    ap_ST_fsm_state142_blk <= ap_const_logic_0;
    ap_ST_fsm_state143_blk <= ap_const_logic_0;
    ap_ST_fsm_state144_blk <= ap_const_logic_0;
    ap_ST_fsm_state145_blk <= ap_const_logic_0;
    ap_ST_fsm_state146_blk <= ap_const_logic_0;
    ap_ST_fsm_state147_blk <= ap_const_logic_0;
    ap_ST_fsm_state148_blk <= ap_const_logic_0;
    ap_ST_fsm_state149_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state150_blk <= ap_const_logic_0;
    ap_ST_fsm_state151_blk <= ap_const_logic_0;
    ap_ST_fsm_state152_blk <= ap_const_logic_0;
    ap_ST_fsm_state153_blk <= ap_const_logic_0;
    ap_ST_fsm_state154_blk <= ap_const_logic_0;
    ap_ST_fsm_state155_blk <= ap_const_logic_0;
    ap_ST_fsm_state156_blk <= ap_const_logic_0;
    ap_ST_fsm_state157_blk <= ap_const_logic_0;
    ap_ST_fsm_state158_blk <= ap_const_logic_0;
    ap_ST_fsm_state159_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state160_blk <= ap_const_logic_0;
    ap_ST_fsm_state161_blk <= ap_const_logic_0;
    ap_ST_fsm_state162_blk <= ap_const_logic_0;

    ap_ST_fsm_state163_blk_assign_proc : process(gmem2_BVALID)
    begin
        if ((gmem2_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state163_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state163_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;

    ap_ST_fsm_state2_blk_assign_proc : process(ap_block_state2_io)
    begin
        if ((ap_const_boolean_1 = ap_block_state2_io)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state64_blk <= ap_const_logic_0;
    ap_ST_fsm_state65_blk <= ap_const_logic_0;
    ap_ST_fsm_state66_blk <= ap_const_logic_0;
    ap_ST_fsm_state67_blk <= ap_const_logic_0;
    ap_ST_fsm_state68_blk <= ap_const_logic_0;
    ap_ST_fsm_state69_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state70_blk <= ap_const_logic_0;
    ap_ST_fsm_state71_blk <= ap_const_logic_0;

    ap_ST_fsm_state72_blk_assign_proc : process(gmem1_RVALID)
    begin
        if ((gmem1_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state72_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state72_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state73_blk <= ap_const_logic_0;

    ap_ST_fsm_state74_blk_assign_proc : process(ap_block_state74_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state74_on_subcall_done)) then 
            ap_ST_fsm_state74_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state74_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state75_blk <= ap_const_logic_0;

    ap_ST_fsm_state76_blk_assign_proc : process(grp_krnl_bp_Pipeline_VITIS_LOOP_236_1_fu_269_ap_done)
    begin
        if ((grp_krnl_bp_Pipeline_VITIS_LOOP_236_1_fu_269_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state76_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state76_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state77_blk <= ap_const_logic_0;
    ap_ST_fsm_state78_blk <= ap_const_logic_0;

    ap_ST_fsm_state79_blk_assign_proc : process(grp_krnl_bp_Pipeline_VITIS_LOOP_236_12_fu_275_ap_done)
    begin
        if ((grp_krnl_bp_Pipeline_VITIS_LOOP_236_12_fu_275_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state79_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state79_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state80_blk <= ap_const_logic_0;
    ap_ST_fsm_state81_blk <= ap_const_logic_0;

    ap_ST_fsm_state82_blk_assign_proc : process(grp_krnl_bp_Pipeline_VITIS_LOOP_236_13_fu_281_ap_done)
    begin
        if ((grp_krnl_bp_Pipeline_VITIS_LOOP_236_13_fu_281_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state82_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state82_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state83_blk <= ap_const_logic_0;
    ap_ST_fsm_state84_blk <= ap_const_logic_0;

    ap_ST_fsm_state85_blk_assign_proc : process(grp_krnl_bp_Pipeline_l_main_fu_287_ap_done)
    begin
        if ((grp_krnl_bp_Pipeline_l_main_fu_287_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state85_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state85_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state86_blk <= ap_const_logic_0;
    ap_ST_fsm_state87_blk <= ap_const_logic_0;

    ap_ST_fsm_state88_blk_assign_proc : process(grp_krnl_bp_Pipeline_VITIS_LOOP_229_1_fu_338_ap_done)
    begin
        if ((grp_krnl_bp_Pipeline_VITIS_LOOP_229_1_fu_338_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state88_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state88_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state89_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state90_blk <= ap_const_logic_0;

    ap_ST_fsm_state91_blk_assign_proc : process(grp_krnl_bp_Pipeline_VITIS_LOOP_229_14_fu_344_ap_done)
    begin
        if ((grp_krnl_bp_Pipeline_VITIS_LOOP_229_14_fu_344_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state91_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state91_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state92_blk <= ap_const_logic_0;
    ap_ST_fsm_state93_blk <= ap_const_logic_0;

    ap_ST_fsm_state94_blk_assign_proc : process(gmem2_AWREADY, ap_block_state94_on_subcall_done)
    begin
        if (((gmem2_AWREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state94_on_subcall_done))) then 
            ap_ST_fsm_state94_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state94_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state95_blk_assign_proc : process(gmem2_WREADY)
    begin
        if ((gmem2_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state95_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state95_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state96_blk <= ap_const_logic_0;
    ap_ST_fsm_state97_blk <= ap_const_logic_0;
    ap_ST_fsm_state98_blk <= ap_const_logic_0;
    ap_ST_fsm_state99_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state2_io_assign_proc : process(gmem0_ARREADY, gmem1_ARREADY)
    begin
                ap_block_state2_io <= ((gmem1_ARREADY = ap_const_logic_0) or (gmem0_ARREADY = ap_const_logic_0));
    end process;


    ap_block_state74_on_subcall_done_assign_proc : process(grp_krnl_bp_Pipeline_l_load_input_fu_253_ap_done, grp_krnl_bp_Pipeline_l_load_input1_fu_262_ap_done)
    begin
                ap_block_state74_on_subcall_done <= ((grp_krnl_bp_Pipeline_l_load_input1_fu_262_ap_done = ap_const_logic_0) or (grp_krnl_bp_Pipeline_l_load_input_fu_253_ap_done = ap_const_logic_0));
    end process;


    ap_block_state94_on_subcall_done_assign_proc : process(grp_krnl_bp_Pipeline_VITIS_LOOP_229_15_fu_350_ap_done, grp_krnl_bp_Pipeline_l_write_mem_fu_356_ap_done)
    begin
                ap_block_state94_on_subcall_done <= ((grp_krnl_bp_Pipeline_l_write_mem_fu_356_ap_done = ap_const_logic_0) or (grp_krnl_bp_Pipeline_VITIS_LOOP_229_15_fu_350_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state163, gmem2_BVALID)
    begin
        if (((gmem2_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state163))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state163, gmem2_BVALID)
    begin
        if (((gmem2_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state163))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    gmem0_ARADDR_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state74, grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_ARADDR, ap_CS_fsm_state73, sext_ln15_fu_398_p1, ap_block_state2_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io))) then 
            gmem0_ARADDR <= sext_ln15_fu_398_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state74))) then 
            gmem0_ARADDR <= grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_ARADDR;
        else 
            gmem0_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem0_ARLEN_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state74, grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_ARLEN, ap_CS_fsm_state73, ap_block_state2_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io))) then 
            gmem0_ARLEN <= ap_const_lv32_4;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state74))) then 
            gmem0_ARLEN <= grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_ARLEN;
        else 
            gmem0_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem0_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state74, grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_ARVALID, ap_CS_fsm_state73, ap_block_state2_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io))) then 
            gmem0_ARVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state74))) then 
            gmem0_ARVALID <= grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_ARVALID;
        else 
            gmem0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem0_RREADY_assign_proc : process(ap_CS_fsm_state74, grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_RREADY, ap_CS_fsm_state73)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state74))) then 
            gmem0_RREADY <= grp_krnl_bp_Pipeline_l_load_input_fu_253_m_axi_gmem0_RREADY;
        else 
            gmem0_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem0_blk_n_AR_assign_proc : process(m_axi_gmem0_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            gmem0_blk_n_AR <= m_axi_gmem0_ARREADY;
        else 
            gmem0_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem1_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io))) then 
            gmem1_ARVALID <= ap_const_logic_1;
        else 
            gmem1_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_RREADY_assign_proc : process(ap_CS_fsm_state72, gmem1_RVALID)
    begin
        if (((gmem1_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state72))) then 
            gmem1_RREADY <= ap_const_logic_1;
        else 
            gmem1_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_blk_n_AR_assign_proc : process(m_axi_gmem1_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            gmem1_blk_n_AR <= m_axi_gmem1_ARREADY;
        else 
            gmem1_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem1_blk_n_R_assign_proc : process(m_axi_gmem1_RVALID, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            gmem1_blk_n_R <= m_axi_gmem1_RVALID;
        else 
            gmem1_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem2_AWVALID_assign_proc : process(ap_CS_fsm_state94, gmem2_AWREADY, ap_block_state94_on_subcall_done)
    begin
        if ((not(((gmem2_AWREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state94_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state94))) then 
            gmem2_AWVALID <= ap_const_logic_1;
        else 
            gmem2_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem2_BREADY_assign_proc : process(ap_CS_fsm_state163, gmem2_BVALID)
    begin
        if (((gmem2_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state163))) then 
            gmem2_BREADY <= ap_const_logic_1;
        else 
            gmem2_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem2_WVALID_assign_proc : process(ap_CS_fsm_state95, gmem2_WREADY)
    begin
        if (((gmem2_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state95))) then 
            gmem2_WVALID <= ap_const_logic_1;
        else 
            gmem2_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem2_blk_n_AW_assign_proc : process(m_axi_gmem2_AWREADY, ap_CS_fsm_state94)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            gmem2_blk_n_AW <= m_axi_gmem2_AWREADY;
        else 
            gmem2_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem2_blk_n_B_assign_proc : process(m_axi_gmem2_BVALID, ap_CS_fsm_state163)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state163)) then 
            gmem2_blk_n_B <= m_axi_gmem2_BVALID;
        else 
            gmem2_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem2_blk_n_W_assign_proc : process(m_axi_gmem2_WREADY, ap_CS_fsm_state95)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            gmem2_blk_n_W <= m_axi_gmem2_WREADY;
        else 
            gmem2_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_363_ce_assign_proc : process(ap_CS_fsm_state83, grp_krnl_bp_Pipeline_VITIS_LOOP_236_12_fu_275_ap_done, grp_krnl_bp_Pipeline_VITIS_LOOP_236_13_fu_281_ap_done, grp_krnl_bp_Pipeline_l_main_fu_287_grp_fu_363_p_ce, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state85, ap_CS_fsm_state77, ap_CS_fsm_state80)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            grp_fu_363_ce <= grp_krnl_bp_Pipeline_l_main_fu_287_grp_fu_363_p_ce;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state77) or ((grp_krnl_bp_Pipeline_VITIS_LOOP_236_13_fu_281_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state82)) or ((grp_krnl_bp_Pipeline_VITIS_LOOP_236_12_fu_275_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state79)))) then 
            grp_fu_363_ce <= ap_const_logic_1;
        else 
            grp_fu_363_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_363_opcode_assign_proc : process(grp_krnl_bp_Pipeline_l_main_fu_287_grp_fu_363_p_opcode, ap_CS_fsm_state85, ap_CS_fsm_state77)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            grp_fu_363_opcode <= grp_krnl_bp_Pipeline_l_main_fu_287_grp_fu_363_p_opcode;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            grp_fu_363_opcode <= ap_const_lv2_1;
        else 
            grp_fu_363_opcode <= "XX";
        end if; 
    end process;


    grp_fu_363_p0_assign_proc : process(grp_krnl_bp_Pipeline_l_main_fu_287_grp_fu_363_p_din0, ap_CS_fsm_state85, ap_CS_fsm_state77)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            grp_fu_363_p0 <= grp_krnl_bp_Pipeline_l_main_fu_287_grp_fu_363_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            grp_fu_363_p0 <= ap_const_lv32_3F800000;
        else 
            grp_fu_363_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_363_p1_assign_proc : process(alpha, grp_krnl_bp_Pipeline_l_main_fu_287_grp_fu_363_p_din1, ap_CS_fsm_state85, ap_CS_fsm_state77)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            grp_fu_363_p1 <= grp_krnl_bp_Pipeline_l_main_fu_287_grp_fu_363_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            grp_fu_363_p1 <= alpha;
        else 
            grp_fu_363_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_krnl_bp_Pipeline_VITIS_LOOP_229_14_fu_344_ap_start <= grp_krnl_bp_Pipeline_VITIS_LOOP_229_14_fu_344_ap_start_reg;
    grp_krnl_bp_Pipeline_VITIS_LOOP_229_15_fu_350_ap_start <= grp_krnl_bp_Pipeline_VITIS_LOOP_229_15_fu_350_ap_start_reg;
    grp_krnl_bp_Pipeline_VITIS_LOOP_229_1_fu_338_ap_start <= grp_krnl_bp_Pipeline_VITIS_LOOP_229_1_fu_338_ap_start_reg;
    grp_krnl_bp_Pipeline_VITIS_LOOP_236_12_fu_275_ap_start <= grp_krnl_bp_Pipeline_VITIS_LOOP_236_12_fu_275_ap_start_reg;
    grp_krnl_bp_Pipeline_VITIS_LOOP_236_13_fu_281_ap_start <= grp_krnl_bp_Pipeline_VITIS_LOOP_236_13_fu_281_ap_start_reg;
    grp_krnl_bp_Pipeline_VITIS_LOOP_236_1_fu_269_ap_start <= grp_krnl_bp_Pipeline_VITIS_LOOP_236_1_fu_269_ap_start_reg;
    grp_krnl_bp_Pipeline_l_load_input1_fu_262_ap_start <= grp_krnl_bp_Pipeline_l_load_input1_fu_262_ap_start_reg;
    grp_krnl_bp_Pipeline_l_load_input_fu_253_ap_start <= grp_krnl_bp_Pipeline_l_load_input_fu_253_ap_start_reg;
    grp_krnl_bp_Pipeline_l_main_fu_287_ap_start <= grp_krnl_bp_Pipeline_l_main_fu_287_ap_start_reg;
    grp_krnl_bp_Pipeline_l_write_mem_fu_356_ap_start <= grp_krnl_bp_Pipeline_l_write_mem_fu_356_ap_start_reg;

    mac_res_stream_read_assign_proc : process(grp_krnl_bp_Pipeline_l_main_fu_287_mac_res_stream_read, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            mac_res_stream_read <= grp_krnl_bp_Pipeline_l_main_fu_287_mac_res_stream_read;
        else 
            mac_res_stream_read <= ap_const_logic_0;
        end if; 
    end process;


    mac_res_stream_write_assign_proc : process(grp_krnl_bp_Pipeline_l_main_fu_287_mac_res_stream_write, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            mac_res_stream_write <= grp_krnl_bp_Pipeline_l_main_fu_287_mac_res_stream_write;
        else 
            mac_res_stream_write <= ap_const_logic_0;
        end if; 
    end process;


    mat_p_bram_address0_assign_proc : process(ap_CS_fsm_state74, grp_krnl_bp_Pipeline_l_load_input_fu_253_mat_p_bram_address0, grp_krnl_bp_Pipeline_l_main_fu_287_mat_p_bram_address0, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            mat_p_bram_address0 <= grp_krnl_bp_Pipeline_l_main_fu_287_mat_p_bram_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            mat_p_bram_address0 <= grp_krnl_bp_Pipeline_l_load_input_fu_253_mat_p_bram_address0;
        else 
            mat_p_bram_address0 <= "XXXXXX";
        end if; 
    end process;


    mat_p_bram_ce0_assign_proc : process(ap_CS_fsm_state74, grp_krnl_bp_Pipeline_l_load_input_fu_253_mat_p_bram_ce0, grp_krnl_bp_Pipeline_l_main_fu_287_mat_p_bram_ce0, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            mat_p_bram_ce0 <= grp_krnl_bp_Pipeline_l_main_fu_287_mat_p_bram_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            mat_p_bram_ce0 <= grp_krnl_bp_Pipeline_l_load_input_fu_253_mat_p_bram_ce0;
        else 
            mat_p_bram_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mat_p_bram_ce1_assign_proc : process(grp_krnl_bp_Pipeline_l_main_fu_287_mat_p_bram_ce1, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            mat_p_bram_ce1 <= grp_krnl_bp_Pipeline_l_main_fu_287_mat_p_bram_ce1;
        else 
            mat_p_bram_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    mat_p_bram_we0_assign_proc : process(ap_CS_fsm_state74, grp_krnl_bp_Pipeline_l_load_input_fu_253_mat_p_bram_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            mat_p_bram_we0 <= grp_krnl_bp_Pipeline_l_load_input_fu_253_mat_p_bram_we0;
        else 
            mat_p_bram_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln15_1_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln15_1_reg_444),64));

        sext_ln15_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_reg_438),64));

        sext_ln475_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln4_reg_449),64));


    u_stream_din_assign_proc : process(grp_krnl_bp_Pipeline_VITIS_LOOP_236_1_fu_269_u_stream_din, grp_krnl_bp_Pipeline_l_main_fu_287_u_stream_din, ap_CS_fsm_state76, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            u_stream_din <= grp_krnl_bp_Pipeline_l_main_fu_287_u_stream_din;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            u_stream_din <= grp_krnl_bp_Pipeline_VITIS_LOOP_236_1_fu_269_u_stream_din;
        else 
            u_stream_din <= grp_krnl_bp_Pipeline_l_main_fu_287_u_stream_din;
        end if; 
    end process;


    u_stream_read_assign_proc : process(grp_krnl_bp_Pipeline_l_main_fu_287_u_stream_read, grp_krnl_bp_Pipeline_VITIS_LOOP_229_1_fu_338_u_stream_read, ap_CS_fsm_state85, ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            u_stream_read <= grp_krnl_bp_Pipeline_VITIS_LOOP_229_1_fu_338_u_stream_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            u_stream_read <= grp_krnl_bp_Pipeline_l_main_fu_287_u_stream_read;
        else 
            u_stream_read <= ap_const_logic_0;
        end if; 
    end process;


    u_stream_write_assign_proc : process(grp_krnl_bp_Pipeline_VITIS_LOOP_236_1_fu_269_u_stream_write, grp_krnl_bp_Pipeline_l_main_fu_287_u_stream_write, ap_CS_fsm_state76, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            u_stream_write <= grp_krnl_bp_Pipeline_l_main_fu_287_u_stream_write;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            u_stream_write <= grp_krnl_bp_Pipeline_VITIS_LOOP_236_1_fu_269_u_stream_write;
        else 
            u_stream_write <= ap_const_logic_0;
        end if; 
    end process;


    vec_q_bram_address0_assign_proc : process(ap_CS_fsm_state74, grp_krnl_bp_Pipeline_l_load_input1_fu_262_vec_q_bram_address0, grp_krnl_bp_Pipeline_l_main_fu_287_vec_q_bram_address0, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            vec_q_bram_address0 <= grp_krnl_bp_Pipeline_l_main_fu_287_vec_q_bram_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            vec_q_bram_address0 <= grp_krnl_bp_Pipeline_l_load_input1_fu_262_vec_q_bram_address0;
        else 
            vec_q_bram_address0 <= "XXX";
        end if; 
    end process;


    vec_q_bram_ce0_assign_proc : process(ap_CS_fsm_state74, grp_krnl_bp_Pipeline_l_load_input1_fu_262_vec_q_bram_ce0, grp_krnl_bp_Pipeline_l_main_fu_287_vec_q_bram_ce0, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            vec_q_bram_ce0 <= grp_krnl_bp_Pipeline_l_main_fu_287_vec_q_bram_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            vec_q_bram_ce0 <= grp_krnl_bp_Pipeline_l_load_input1_fu_262_vec_q_bram_ce0;
        else 
            vec_q_bram_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    vec_q_bram_we0_assign_proc : process(ap_CS_fsm_state74, grp_krnl_bp_Pipeline_l_load_input1_fu_262_vec_q_bram_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            vec_q_bram_we0 <= grp_krnl_bp_Pipeline_l_load_input1_fu_262_vec_q_bram_we0;
        else 
            vec_q_bram_we0 <= ap_const_logic_0;
        end if; 
    end process;


    x_bram_address0_assign_proc : process(ap_CS_fsm_state94, grp_krnl_bp_Pipeline_l_main_fu_287_x_bram_address0, grp_krnl_bp_Pipeline_l_write_mem_fu_356_x_bram_address0, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            x_bram_address0 <= grp_krnl_bp_Pipeline_l_write_mem_fu_356_x_bram_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            x_bram_address0 <= grp_krnl_bp_Pipeline_l_main_fu_287_x_bram_address0;
        else 
            x_bram_address0 <= "XXX";
        end if; 
    end process;


    x_bram_ce0_assign_proc : process(ap_CS_fsm_state94, grp_krnl_bp_Pipeline_l_main_fu_287_x_bram_ce0, grp_krnl_bp_Pipeline_l_write_mem_fu_356_x_bram_ce0, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            x_bram_ce0 <= grp_krnl_bp_Pipeline_l_write_mem_fu_356_x_bram_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            x_bram_ce0 <= grp_krnl_bp_Pipeline_l_main_fu_287_x_bram_ce0;
        else 
            x_bram_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x_bram_we0_assign_proc : process(grp_krnl_bp_Pipeline_l_main_fu_287_x_bram_we0, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            x_bram_we0 <= grp_krnl_bp_Pipeline_l_main_fu_287_x_bram_we0;
        else 
            x_bram_we0 <= ap_const_logic_0;
        end if; 
    end process;


    z_copy_2_stream_din_assign_proc : process(grp_krnl_bp_Pipeline_VITIS_LOOP_236_12_fu_275_z_copy_2_stream_din, grp_krnl_bp_Pipeline_l_main_fu_287_z_copy_2_stream_din, ap_CS_fsm_state79, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            z_copy_2_stream_din <= grp_krnl_bp_Pipeline_l_main_fu_287_z_copy_2_stream_din;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            z_copy_2_stream_din <= grp_krnl_bp_Pipeline_VITIS_LOOP_236_12_fu_275_z_copy_2_stream_din;
        else 
            z_copy_2_stream_din <= grp_krnl_bp_Pipeline_l_main_fu_287_z_copy_2_stream_din;
        end if; 
    end process;


    z_copy_2_stream_read_assign_proc : process(ap_CS_fsm_state94, grp_krnl_bp_Pipeline_l_main_fu_287_z_copy_2_stream_read, grp_krnl_bp_Pipeline_VITIS_LOOP_229_15_fu_350_z_copy_2_stream_read, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            z_copy_2_stream_read <= grp_krnl_bp_Pipeline_VITIS_LOOP_229_15_fu_350_z_copy_2_stream_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            z_copy_2_stream_read <= grp_krnl_bp_Pipeline_l_main_fu_287_z_copy_2_stream_read;
        else 
            z_copy_2_stream_read <= ap_const_logic_0;
        end if; 
    end process;


    z_copy_2_stream_write_assign_proc : process(grp_krnl_bp_Pipeline_VITIS_LOOP_236_12_fu_275_z_copy_2_stream_write, grp_krnl_bp_Pipeline_l_main_fu_287_z_copy_2_stream_write, ap_CS_fsm_state79, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            z_copy_2_stream_write <= grp_krnl_bp_Pipeline_l_main_fu_287_z_copy_2_stream_write;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            z_copy_2_stream_write <= grp_krnl_bp_Pipeline_VITIS_LOOP_236_12_fu_275_z_copy_2_stream_write;
        else 
            z_copy_2_stream_write <= ap_const_logic_0;
        end if; 
    end process;


    z_old_stream_din_assign_proc : process(grp_krnl_bp_Pipeline_VITIS_LOOP_236_13_fu_281_z_old_stream_din, grp_krnl_bp_Pipeline_l_main_fu_287_z_old_stream_din, ap_CS_fsm_state82, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            z_old_stream_din <= grp_krnl_bp_Pipeline_l_main_fu_287_z_old_stream_din;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            z_old_stream_din <= grp_krnl_bp_Pipeline_VITIS_LOOP_236_13_fu_281_z_old_stream_din;
        else 
            z_old_stream_din <= grp_krnl_bp_Pipeline_l_main_fu_287_z_old_stream_din;
        end if; 
    end process;


    z_old_stream_read_assign_proc : process(grp_krnl_bp_Pipeline_l_main_fu_287_z_old_stream_read, grp_krnl_bp_Pipeline_VITIS_LOOP_229_14_fu_344_z_old_stream_read, ap_CS_fsm_state85, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            z_old_stream_read <= grp_krnl_bp_Pipeline_VITIS_LOOP_229_14_fu_344_z_old_stream_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            z_old_stream_read <= grp_krnl_bp_Pipeline_l_main_fu_287_z_old_stream_read;
        else 
            z_old_stream_read <= ap_const_logic_0;
        end if; 
    end process;


    z_old_stream_write_assign_proc : process(grp_krnl_bp_Pipeline_VITIS_LOOP_236_13_fu_281_z_old_stream_write, grp_krnl_bp_Pipeline_l_main_fu_287_z_old_stream_write, ap_CS_fsm_state82, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            z_old_stream_write <= grp_krnl_bp_Pipeline_l_main_fu_287_z_old_stream_write;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            z_old_stream_write <= grp_krnl_bp_Pipeline_VITIS_LOOP_236_13_fu_281_z_old_stream_write;
        else 
            z_old_stream_write <= ap_const_logic_0;
        end if; 
    end process;


    z_u_stream_read_assign_proc : process(grp_krnl_bp_Pipeline_l_main_fu_287_z_u_stream_read, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            z_u_stream_read <= grp_krnl_bp_Pipeline_l_main_fu_287_z_u_stream_read;
        else 
            z_u_stream_read <= ap_const_logic_0;
        end if; 
    end process;


    z_u_stream_write_assign_proc : process(grp_krnl_bp_Pipeline_l_main_fu_287_z_u_stream_write, ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            z_u_stream_write <= grp_krnl_bp_Pipeline_l_main_fu_287_z_u_stream_write;
        else 
            z_u_stream_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
