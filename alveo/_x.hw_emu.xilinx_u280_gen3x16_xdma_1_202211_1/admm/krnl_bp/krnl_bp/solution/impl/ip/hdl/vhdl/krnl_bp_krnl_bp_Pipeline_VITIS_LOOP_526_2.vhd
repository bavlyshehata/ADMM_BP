-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity krnl_bp_krnl_bp_Pipeline_VITIS_LOOP_526_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_stream_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    x_stream_empty_n : IN STD_LOGIC;
    x_stream_read : OUT STD_LOGIC;
    z_old_stream_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    z_old_stream_empty_n : IN STD_LOGIC;
    z_old_stream_read : OUT STD_LOGIC;
    x_hat_stream_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_hat_stream_full_n : IN STD_LOGIC;
    x_hat_stream_write : OUT STD_LOGIC;
    alpha : IN STD_LOGIC_VECTOR (31 downto 0);
    reg_alpha : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_ext_blocking_n : OUT STD_LOGIC;
    ap_str_blocking_n : OUT STD_LOGIC;
    ap_int_blocking_n : OUT STD_LOGIC;
    grp_fu_631_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_631_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_631_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_631_p_ce : OUT STD_LOGIC;
    grp_fu_636_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_636_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_636_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_636_p_ce : OUT STD_LOGIC;
    grp_fu_626_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_626_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_626_p_opcode : OUT STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_626_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_626_p_ce : OUT STD_LOGIC );
end;


architecture behav of krnl_bp_krnl_bp_Pipeline_VITIS_LOOP_526_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal tmp_1_nbreadreq_fu_62_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_nbreadreq_fu_70_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op38_read_state2 : BOOLEAN;
    signal ap_predicate_op39_read_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter12 : BOOLEAN;
    signal tmp_2_reg_172 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_172_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_168 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_168_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op40_write_state3 : BOOLEAN;
    signal ap_predicate_op43_write_state3 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln526_fu_118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal x_stream_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal z_old_stream_blk_n : STD_LOGIC;
    signal x_hat_stream_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_1_reg_168_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_168_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_168_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_168_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_168_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_168_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_168_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_168_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_168_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_168_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_172_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_172_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_172_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_172_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_172_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_172_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_172_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_172_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_172_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_172_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal x_stream_read_reg_176 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_old_stream_read_reg_181 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_val_fu_139_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_val_fu_143_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_i_reg_196 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul26_i_reg_201 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_reg_206 : STD_LOGIC_VECTOR (31 downto 0);
    signal ii_fu_46 : STD_LOGIC_VECTOR (3 downto 0);
    signal ii_13_fu_124_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_ii_12 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal bitcast_ln532_fu_135_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal grp_fu_98_ce : STD_LOGIC;
    signal grp_fu_102_ce : STD_LOGIC;
    signal grp_fu_106_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component krnl_bp_faddfsub_32ns_32ns_32_7_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component krnl_bp_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component krnl_bp_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component krnl_bp_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter12_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ii_fu_46_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln526_fu_118_p2 = ap_const_lv1_0))) then 
                    ii_fu_46 <= ii_13_fu_124_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    ii_fu_46 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                tmp_1_reg_168_pp0_iter10_reg <= tmp_1_reg_168_pp0_iter9_reg;
                tmp_1_reg_168_pp0_iter11_reg <= tmp_1_reg_168_pp0_iter10_reg;
                tmp_1_reg_168_pp0_iter12_reg <= tmp_1_reg_168_pp0_iter11_reg;
                tmp_1_reg_168_pp0_iter2_reg <= tmp_1_reg_168;
                tmp_1_reg_168_pp0_iter3_reg <= tmp_1_reg_168_pp0_iter2_reg;
                tmp_1_reg_168_pp0_iter4_reg <= tmp_1_reg_168_pp0_iter3_reg;
                tmp_1_reg_168_pp0_iter5_reg <= tmp_1_reg_168_pp0_iter4_reg;
                tmp_1_reg_168_pp0_iter6_reg <= tmp_1_reg_168_pp0_iter5_reg;
                tmp_1_reg_168_pp0_iter7_reg <= tmp_1_reg_168_pp0_iter6_reg;
                tmp_1_reg_168_pp0_iter8_reg <= tmp_1_reg_168_pp0_iter7_reg;
                tmp_1_reg_168_pp0_iter9_reg <= tmp_1_reg_168_pp0_iter8_reg;
                tmp_2_reg_172_pp0_iter10_reg <= tmp_2_reg_172_pp0_iter9_reg;
                tmp_2_reg_172_pp0_iter11_reg <= tmp_2_reg_172_pp0_iter10_reg;
                tmp_2_reg_172_pp0_iter12_reg <= tmp_2_reg_172_pp0_iter11_reg;
                tmp_2_reg_172_pp0_iter2_reg <= tmp_2_reg_172;
                tmp_2_reg_172_pp0_iter3_reg <= tmp_2_reg_172_pp0_iter2_reg;
                tmp_2_reg_172_pp0_iter4_reg <= tmp_2_reg_172_pp0_iter3_reg;
                tmp_2_reg_172_pp0_iter5_reg <= tmp_2_reg_172_pp0_iter4_reg;
                tmp_2_reg_172_pp0_iter6_reg <= tmp_2_reg_172_pp0_iter5_reg;
                tmp_2_reg_172_pp0_iter7_reg <= tmp_2_reg_172_pp0_iter6_reg;
                tmp_2_reg_172_pp0_iter8_reg <= tmp_2_reg_172_pp0_iter7_reg;
                tmp_2_reg_172_pp0_iter9_reg <= tmp_2_reg_172_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                tmp_1_reg_168 <= tmp_1_nbreadreq_fu_62_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_reg_172_pp0_iter4_reg = ap_const_lv1_1) and (tmp_1_reg_168_pp0_iter4_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul26_i_reg_201 <= grp_fu_636_p_dout0;
                mul_i_reg_196 <= grp_fu_631_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_reg_172_pp0_iter11_reg = ap_const_lv1_1) and (tmp_1_reg_168_pp0_iter11_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                result_reg_206 <= grp_fu_626_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_nbreadreq_fu_62_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_2_reg_172 <= tmp_2_nbreadreq_fu_70_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_predicate_op38_read_state2 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                x_stream_read_reg_176 <= x_stream_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_predicate_op39_read_state2 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                z_old_stream_read_reg_181 <= z_old_stream_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_00001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter13, x_stream_empty_n, ap_predicate_op38_read_state2, z_old_stream_empty_n, ap_predicate_op39_read_state2, x_hat_stream_full_n, ap_predicate_op40_write_state3, ap_predicate_op43_write_state3)
    begin
                ap_block_pp0_stage0_00001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((ap_predicate_op39_read_state2 = ap_const_boolean_1) and (z_old_stream_empty_n = ap_const_logic_0)) or ((ap_predicate_op38_read_state2 = ap_const_boolean_1) and (x_stream_empty_n = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (((ap_predicate_op43_write_state3 = ap_const_boolean_1) and (x_hat_stream_full_n = ap_const_logic_0)) or ((ap_predicate_op40_write_state3 = ap_const_boolean_1) and (x_hat_stream_full_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter13, x_stream_empty_n, ap_predicate_op38_read_state2, z_old_stream_empty_n, ap_predicate_op39_read_state2, x_hat_stream_full_n, ap_predicate_op40_write_state3, ap_predicate_op43_write_state3)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((ap_predicate_op39_read_state2 = ap_const_boolean_1) and (z_old_stream_empty_n = ap_const_logic_0)) or ((ap_predicate_op38_read_state2 = ap_const_boolean_1) and (x_stream_empty_n = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (((ap_predicate_op43_write_state3 = ap_const_boolean_1) and (x_hat_stream_full_n = ap_const_logic_0)) or ((ap_predicate_op40_write_state3 = ap_const_boolean_1) and (x_hat_stream_full_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter13, x_stream_empty_n, ap_predicate_op38_read_state2, z_old_stream_empty_n, ap_predicate_op39_read_state2, x_hat_stream_full_n, ap_predicate_op40_write_state3, ap_predicate_op43_write_state3)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((ap_predicate_op39_read_state2 = ap_const_boolean_1) and (z_old_stream_empty_n = ap_const_logic_0)) or ((ap_predicate_op38_read_state2 = ap_const_boolean_1) and (x_stream_empty_n = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (((ap_predicate_op43_write_state3 = ap_const_boolean_1) and (x_hat_stream_full_n = ap_const_logic_0)) or ((ap_predicate_op40_write_state3 = ap_const_boolean_1) and (x_hat_stream_full_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter13, x_stream_empty_n, ap_predicate_op38_read_state2, z_old_stream_empty_n, ap_predicate_op39_read_state2, x_hat_stream_full_n, ap_predicate_op40_write_state3, ap_predicate_op43_write_state3)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((ap_predicate_op39_read_state2 = ap_const_boolean_1) and (z_old_stream_empty_n = ap_const_logic_0)) or ((ap_predicate_op38_read_state2 = ap_const_boolean_1) and (x_stream_empty_n = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (((ap_predicate_op43_write_state3 = ap_const_boolean_1) and (x_hat_stream_full_n = ap_const_logic_0)) or ((ap_predicate_op40_write_state3 = ap_const_boolean_1) and (x_hat_stream_full_n = ap_const_logic_0)))));
    end process;

        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(x_stream_empty_n, ap_predicate_op38_read_state2, z_old_stream_empty_n, ap_predicate_op39_read_state2)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (((ap_predicate_op39_read_state2 = ap_const_boolean_1) and (z_old_stream_empty_n = ap_const_logic_0)) or ((ap_predicate_op38_read_state2 = ap_const_boolean_1) and (x_stream_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state3_pp0_stage0_iter13_assign_proc : process(x_hat_stream_full_n, ap_predicate_op40_write_state3, ap_predicate_op43_write_state3)
    begin
                ap_block_state3_pp0_stage0_iter13 <= (((ap_predicate_op43_write_state3 = ap_const_boolean_1) and (x_hat_stream_full_n = ap_const_logic_0)) or ((ap_predicate_op40_write_state3 = ap_const_boolean_1) and (x_hat_stream_full_n = ap_const_logic_0)));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln526_fu_118_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln526_fu_118_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter12_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter12_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;
    ap_ext_blocking_n <= (ap_const_logic_1 and ap_const_logic_1);

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_int_blocking_n <= (ap_const_logic_1 and ap_const_logic_1);
    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_predicate_op38_read_state2_assign_proc : process(tmp_1_nbreadreq_fu_62_p3, tmp_2_nbreadreq_fu_70_p3)
    begin
                ap_predicate_op38_read_state2 <= ((tmp_2_nbreadreq_fu_70_p3 = ap_const_lv1_1) and (tmp_1_nbreadreq_fu_62_p3 = ap_const_lv1_1));
    end process;


    ap_predicate_op39_read_state2_assign_proc : process(tmp_1_nbreadreq_fu_62_p3, tmp_2_nbreadreq_fu_70_p3)
    begin
                ap_predicate_op39_read_state2 <= ((tmp_2_nbreadreq_fu_70_p3 = ap_const_lv1_1) and (tmp_1_nbreadreq_fu_62_p3 = ap_const_lv1_1));
    end process;


    ap_predicate_op40_write_state3_assign_proc : process(tmp_2_reg_172_pp0_iter12_reg, tmp_1_reg_168_pp0_iter12_reg)
    begin
                ap_predicate_op40_write_state3 <= ((tmp_1_reg_168_pp0_iter12_reg = ap_const_lv1_0) or (tmp_2_reg_172_pp0_iter12_reg = ap_const_lv1_0));
    end process;


    ap_predicate_op43_write_state3_assign_proc : process(tmp_2_reg_172_pp0_iter12_reg, tmp_1_reg_168_pp0_iter12_reg)
    begin
                ap_predicate_op43_write_state3 <= ((tmp_1_reg_168_pp0_iter12_reg = ap_const_lv1_1) and (tmp_2_reg_172_pp0_iter12_reg = ap_const_lv1_1));
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_ii_12_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ii_fu_46, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_ii_12 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_ii_12 <= ii_fu_46;
        end if; 
    end process;

    ap_str_blocking_n <= (ap_const_logic_1 and ap_const_logic_1);
    bitcast_ln532_fu_135_p1 <= result_reg_206;

    grp_fu_102_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_102_ce <= ap_const_logic_1;
        else 
            grp_fu_102_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_106_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_106_ce <= ap_const_logic_1;
        else 
            grp_fu_106_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_626_p_ce <= grp_fu_98_ce;
    grp_fu_626_p_din0 <= mul_i_reg_196;
    grp_fu_626_p_din1 <= mul26_i_reg_201;
    grp_fu_626_p_opcode <= ap_const_lv2_0(1 - 1 downto 0);
    grp_fu_631_p_ce <= grp_fu_102_ce;
    grp_fu_631_p_din0 <= x_val_fu_139_p1;
    grp_fu_631_p_din1 <= alpha;
    grp_fu_636_p_ce <= grp_fu_106_ce;
    grp_fu_636_p_din0 <= reg_alpha;
    grp_fu_636_p_din1 <= z_val_fu_143_p1;

    grp_fu_98_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_98_ce <= ap_const_logic_1;
        else 
            grp_fu_98_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln526_fu_118_p2 <= "1" when (ap_sig_allocacmp_ii_12 = ap_const_lv4_8) else "0";
    ii_13_fu_124_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_ii_12) + unsigned(ap_const_lv4_1));
    tmp_1_nbreadreq_fu_62_p3 <= (0=>(x_stream_empty_n), others=>'-');
    tmp_2_nbreadreq_fu_70_p3 <= (0=>(z_old_stream_empty_n), others=>'-');

    x_hat_stream_blk_n_assign_proc : process(ap_enable_reg_pp0_iter13, x_hat_stream_full_n, ap_predicate_op40_write_state3, ap_predicate_op43_write_state3, ap_block_pp0_stage0)
    begin
        if ((((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op43_write_state3 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op40_write_state3 = ap_const_boolean_1)))) then 
            x_hat_stream_blk_n <= x_hat_stream_full_n;
        else 
            x_hat_stream_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x_hat_stream_din_assign_proc : process(ap_enable_reg_pp0_iter13, ap_predicate_op40_write_state3, ap_predicate_op43_write_state3, ap_block_pp0_stage0_01001, bitcast_ln532_fu_135_p1)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001))) then
            if ((ap_predicate_op43_write_state3 = ap_const_boolean_1)) then 
                x_hat_stream_din <= bitcast_ln532_fu_135_p1;
            elsif ((ap_predicate_op40_write_state3 = ap_const_boolean_1)) then 
                x_hat_stream_din <= ap_const_lv32_0;
            else 
                x_hat_stream_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            x_hat_stream_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x_hat_stream_write_assign_proc : process(ap_enable_reg_pp0_iter13, ap_predicate_op40_write_state3, ap_predicate_op43_write_state3, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op43_write_state3 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op40_write_state3 = ap_const_boolean_1)))) then 
            x_hat_stream_write <= ap_const_logic_1;
        else 
            x_hat_stream_write <= ap_const_logic_0;
        end if; 
    end process;


    x_stream_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, x_stream_empty_n, ap_predicate_op38_read_state2, ap_block_pp0_stage0)
    begin
        if (((ap_predicate_op38_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            x_stream_blk_n <= x_stream_empty_n;
        else 
            x_stream_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x_stream_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op38_read_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op38_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            x_stream_read <= ap_const_logic_1;
        else 
            x_stream_read <= ap_const_logic_0;
        end if; 
    end process;

    x_val_fu_139_p1 <= x_stream_read_reg_176;

    z_old_stream_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, z_old_stream_empty_n, ap_predicate_op39_read_state2, ap_block_pp0_stage0)
    begin
        if (((ap_predicate_op39_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            z_old_stream_blk_n <= z_old_stream_empty_n;
        else 
            z_old_stream_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    z_old_stream_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op39_read_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op39_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            z_old_stream_read <= ap_const_logic_1;
        else 
            z_old_stream_read <= ap_const_logic_0;
        end if; 
    end process;

    z_val_fu_143_p1 <= z_old_stream_read_reg_181;
end behav;
