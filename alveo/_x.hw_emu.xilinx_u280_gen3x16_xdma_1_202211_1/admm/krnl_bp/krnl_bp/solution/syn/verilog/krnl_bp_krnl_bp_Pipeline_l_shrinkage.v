// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module krnl_bp_krnl_bp_Pipeline_l_shrinkage (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_hat_u_stream_dout,
        x_hat_u_stream_empty_n,
        x_hat_u_stream_read,
        z_stream_din,
        z_stream_full_n,
        z_stream_write,
        rho,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n,
        grp_fu_626_p_din0,
        grp_fu_626_p_din1,
        grp_fu_626_p_opcode,
        grp_fu_626_p_dout0,
        grp_fu_626_p_ce,
        grp_fu_652_p_din0,
        grp_fu_652_p_din1,
        grp_fu_652_p_opcode,
        grp_fu_652_p_dout0,
        grp_fu_652_p_ce,
        grp_fu_656_p_din0,
        grp_fu_656_p_din1,
        grp_fu_656_p_opcode,
        grp_fu_656_p_dout0,
        grp_fu_656_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] x_hat_u_stream_dout;
input   x_hat_u_stream_empty_n;
output   x_hat_u_stream_read;
output  [31:0] z_stream_din;
input   z_stream_full_n;
output   z_stream_write;
input  [31:0] rho;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;
output  [31:0] grp_fu_626_p_din0;
output  [31:0] grp_fu_626_p_din1;
output  [0:0] grp_fu_626_p_opcode;
input  [31:0] grp_fu_626_p_dout0;
output   grp_fu_626_p_ce;
output  [31:0] grp_fu_652_p_din0;
output  [31:0] grp_fu_652_p_din1;
output  [4:0] grp_fu_652_p_opcode;
input  [0:0] grp_fu_652_p_dout0;
output   grp_fu_652_p_ce;
output  [31:0] grp_fu_656_p_din0;
output  [31:0] grp_fu_656_p_din1;
output  [4:0] grp_fu_656_p_opcode;
input  [0:0] grp_fu_656_p_dout0;
output   grp_fu_656_p_ce;

reg ap_idle;
reg x_hat_u_stream_read;
reg z_stream_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
wire    ap_block_state17_pp0_stage0_iter16;
wire    ap_block_state18_pp0_stage0_iter17;
reg    ap_block_state19_pp0_stage0_iter18;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln551_fu_107_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    x_hat_u_stream_blk_n;
wire    ap_block_pp0_stage0;
reg    z_stream_blk_n;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] x_hat_u_stream_read_reg_255;
wire   [31:0] xor_ln558_fu_124_p2;
reg   [31:0] xor_ln558_reg_260;
wire   [31:0] in_val_fu_130_p1;
reg   [31:0] sub0_reg_275;
reg   [31:0] sub0_reg_275_pp0_iter9_reg;
wire   [31:0] grp_fu_81_p2;
reg   [31:0] sub1_reg_282;
reg   [31:0] sub1_reg_282_pp0_iter9_reg;
wire   [31:0] abs0_1_fu_179_p3;
reg   [31:0] abs0_1_reg_289;
wire   [31:0] abs1_1_fu_227_p3;
reg   [31:0] abs1_1_reg_294;
wire   [31:0] grp_fu_85_p2;
reg   [31:0] sub7_i_reg_299;
reg   [3:0] ii_fu_54;
wire   [3:0] ii_9_fu_113_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_ii_8;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] grp_fu_81_p0;
wire   [31:0] bitcast_ln560_fu_138_p1;
wire   [7:0] tmp_10_fu_141_p4;
wire   [22:0] trunc_ln560_fu_151_p1;
wire   [0:0] icmp_ln560_1_fu_161_p2;
wire   [0:0] icmp_ln560_fu_155_p2;
wire   [0:0] or_ln560_fu_167_p2;
wire   [0:0] and_ln560_fu_173_p2;
wire   [31:0] bitcast_ln562_fu_186_p1;
wire   [7:0] tmp_s_fu_189_p4;
wire   [22:0] trunc_ln562_fu_199_p1;
wire   [0:0] icmp_ln562_1_fu_209_p2;
wire   [0:0] icmp_ln562_fu_203_p2;
wire   [0:0] or_ln562_fu_215_p2;
wire   [0:0] and_ln562_fu_221_p2;
reg    ap_block_pp0_stage0_00001;
reg    grp_fu_77_ce;
reg    grp_fu_81_ce;
reg    grp_fu_85_ce;
reg    grp_fu_89_ce;
reg    grp_fu_94_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg    ap_loop_exit_ready_pp0_iter17_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_done_reg = 1'b0;
end

krnl_bp_fsub_32ns_32ns_32_7_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsub_32ns_32ns_32_7_full_dsp_1_U59(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_81_p0),
    .din1(rho),
    .ce(grp_fu_81_ce),
    .dout(grp_fu_81_p2)
);

krnl_bp_fsub_32ns_32ns_32_7_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsub_32ns_32ns_32_7_full_dsp_1_U60(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(abs0_1_reg_289),
    .din1(abs1_1_reg_294),
    .ce(grp_fu_85_ce),
    .dout(grp_fu_85_p2)
);

krnl_bp_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter17_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln551_fu_107_p2 == 1'd0))) begin
            ii_fu_54 <= ii_9_fu_113_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            ii_fu_54 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        abs0_1_reg_289 <= abs0_1_fu_179_p3;
        abs1_1_reg_294 <= abs1_1_fu_227_p3;
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
        ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        sub0_reg_275 <= grp_fu_626_p_dout0;
        sub0_reg_275_pp0_iter9_reg <= sub0_reg_275;
        sub1_reg_282 <= grp_fu_81_p2;
        sub1_reg_282_pp0_iter9_reg <= sub1_reg_282;
        sub7_i_reg_299 <= grp_fu_85_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        x_hat_u_stream_read_reg_255 <= x_hat_u_stream_dout;
        xor_ln558_reg_260 <= xor_ln558_fu_124_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln551_fu_107_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter17_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_ii_8 = 4'd0;
    end else begin
        ap_sig_allocacmp_ii_8 = ii_fu_54;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_77_ce = 1'b1;
    end else begin
        grp_fu_77_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_81_ce = 1'b1;
    end else begin
        grp_fu_81_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_85_ce = 1'b1;
    end else begin
        grp_fu_85_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_89_ce = 1'b1;
    end else begin
        grp_fu_89_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_94_ce = 1'b1;
    end else begin
        grp_fu_94_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        x_hat_u_stream_blk_n = x_hat_u_stream_empty_n;
    end else begin
        x_hat_u_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_hat_u_stream_read = 1'b1;
    end else begin
        x_hat_u_stream_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        z_stream_blk_n = z_stream_full_n;
    end else begin
        z_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        z_stream_write = 1'b1;
    end else begin
        z_stream_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign abs0_1_fu_179_p3 = ((and_ln560_fu_173_p2[0:0] == 1'b1) ? sub0_reg_275_pp0_iter9_reg : 32'd0);

assign abs1_1_fu_227_p3 = ((and_ln562_fu_221_p2[0:0] == 1'b1) ? sub1_reg_282_pp0_iter9_reg : 32'd0);

assign and_ln560_fu_173_p2 = (or_ln560_fu_167_p2 & grp_fu_652_p_dout0);

assign and_ln562_fu_221_p2 = (or_ln562_fu_215_p2 & grp_fu_656_p_dout0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_00001 = (((x_hat_u_stream_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter18 == 1'b1) & (z_stream_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((x_hat_u_stream_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter18 == 1'b1) & (z_stream_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((x_hat_u_stream_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter18 == 1'b1) & (z_stream_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((x_hat_u_stream_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter18 == 1'b1) & (z_stream_full_n == 1'b0)));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state19_pp0_stage0_iter18 = (z_stream_full_n == 1'b0);
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (x_hat_u_stream_empty_n == 1'b0);
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_ext_blocking_n = (1'b1 & 1'b1);

assign ap_int_blocking_n = (1'b1 & 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_str_blocking_n = (1'b1 & 1'b1);

assign bitcast_ln560_fu_138_p1 = sub0_reg_275_pp0_iter9_reg;

assign bitcast_ln562_fu_186_p1 = sub1_reg_282_pp0_iter9_reg;

assign grp_fu_626_p_ce = grp_fu_77_ce;

assign grp_fu_626_p_din0 = in_val_fu_130_p1;

assign grp_fu_626_p_din1 = rho;

assign grp_fu_626_p_opcode = 2'd1;

assign grp_fu_652_p_ce = grp_fu_89_ce;

assign grp_fu_652_p_din0 = sub0_reg_275;

assign grp_fu_652_p_din1 = 32'd0;

assign grp_fu_652_p_opcode = 5'd2;

assign grp_fu_656_p_ce = grp_fu_94_ce;

assign grp_fu_656_p_din0 = sub1_reg_282;

assign grp_fu_656_p_din1 = 32'd0;

assign grp_fu_656_p_opcode = 5'd2;

assign grp_fu_81_p0 = xor_ln558_reg_260;

assign icmp_ln551_fu_107_p2 = ((ap_sig_allocacmp_ii_8 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln560_1_fu_161_p2 = ((trunc_ln560_fu_151_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln560_fu_155_p2 = ((tmp_10_fu_141_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln562_1_fu_209_p2 = ((trunc_ln562_fu_199_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln562_fu_203_p2 = ((tmp_s_fu_189_p4 != 8'd255) ? 1'b1 : 1'b0);

assign ii_9_fu_113_p2 = (ap_sig_allocacmp_ii_8 + 4'd1);

assign in_val_fu_130_p1 = x_hat_u_stream_read_reg_255;

assign or_ln560_fu_167_p2 = (icmp_ln560_fu_155_p2 | icmp_ln560_1_fu_161_p2);

assign or_ln562_fu_215_p2 = (icmp_ln562_fu_203_p2 | icmp_ln562_1_fu_209_p2);

assign tmp_10_fu_141_p4 = {{bitcast_ln560_fu_138_p1[30:23]}};

assign tmp_s_fu_189_p4 = {{bitcast_ln562_fu_186_p1[30:23]}};

assign trunc_ln560_fu_151_p1 = bitcast_ln560_fu_138_p1[22:0];

assign trunc_ln562_fu_199_p1 = bitcast_ln562_fu_186_p1[22:0];

assign xor_ln558_fu_124_p2 = (x_hat_u_stream_dout ^ 32'd2147483648);

assign z_stream_din = sub7_i_reg_299;

endmodule //krnl_bp_krnl_bp_Pipeline_l_shrinkage
