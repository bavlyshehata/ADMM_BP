// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module krnl_bp_krnl_bp_Pipeline_VITIS_LOOP_636_7 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem1_AWVALID,
        m_axi_gmem1_AWREADY,
        m_axi_gmem1_AWADDR,
        m_axi_gmem1_AWID,
        m_axi_gmem1_AWLEN,
        m_axi_gmem1_AWSIZE,
        m_axi_gmem1_AWBURST,
        m_axi_gmem1_AWLOCK,
        m_axi_gmem1_AWCACHE,
        m_axi_gmem1_AWPROT,
        m_axi_gmem1_AWQOS,
        m_axi_gmem1_AWREGION,
        m_axi_gmem1_AWUSER,
        m_axi_gmem1_WVALID,
        m_axi_gmem1_WREADY,
        m_axi_gmem1_WDATA,
        m_axi_gmem1_WSTRB,
        m_axi_gmem1_WLAST,
        m_axi_gmem1_WID,
        m_axi_gmem1_WUSER,
        m_axi_gmem1_ARVALID,
        m_axi_gmem1_ARREADY,
        m_axi_gmem1_ARADDR,
        m_axi_gmem1_ARID,
        m_axi_gmem1_ARLEN,
        m_axi_gmem1_ARSIZE,
        m_axi_gmem1_ARBURST,
        m_axi_gmem1_ARLOCK,
        m_axi_gmem1_ARCACHE,
        m_axi_gmem1_ARPROT,
        m_axi_gmem1_ARQOS,
        m_axi_gmem1_ARREGION,
        m_axi_gmem1_ARUSER,
        m_axi_gmem1_RVALID,
        m_axi_gmem1_RREADY,
        m_axi_gmem1_RDATA,
        m_axi_gmem1_RLAST,
        m_axi_gmem1_RID,
        m_axi_gmem1_RFIFONUM,
        m_axi_gmem1_RUSER,
        m_axi_gmem1_RRESP,
        m_axi_gmem1_BVALID,
        m_axi_gmem1_BREADY,
        m_axi_gmem1_BRESP,
        m_axi_gmem1_BID,
        m_axi_gmem1_BUSER,
        chunk,
        sext_ln636,
        x_15_address0,
        x_15_ce0,
        x_15_we0,
        x_15_d0,
        x_14_address0,
        x_14_ce0,
        x_14_we0,
        x_14_d0,
        x_13_address0,
        x_13_ce0,
        x_13_we0,
        x_13_d0,
        x_12_address0,
        x_12_ce0,
        x_12_we0,
        x_12_d0,
        x_11_address0,
        x_11_ce0,
        x_11_we0,
        x_11_d0,
        x_10_address0,
        x_10_ce0,
        x_10_we0,
        x_10_d0,
        x_9_address0,
        x_9_ce0,
        x_9_we0,
        x_9_d0,
        x_8_address0,
        x_8_ce0,
        x_8_we0,
        x_8_d0,
        x_7_address0,
        x_7_ce0,
        x_7_we0,
        x_7_d0,
        x_6_address0,
        x_6_ce0,
        x_6_we0,
        x_6_d0,
        x_5_address0,
        x_5_ce0,
        x_5_we0,
        x_5_d0,
        x_4_address0,
        x_4_ce0,
        x_4_we0,
        x_4_d0,
        x_3_address0,
        x_3_ce0,
        x_3_we0,
        x_3_d0,
        x_2_address0,
        x_2_ce0,
        x_2_we0,
        x_2_d0,
        x_1_address0,
        x_1_ce0,
        x_1_we0,
        x_1_d0,
        x_address0,
        x_ce0,
        x_we0,
        x_d0,
        mac_res_address0,
        mac_res_ce0,
        mac_res_q0,
        mac_res_1_address0,
        mac_res_1_ce0,
        mac_res_1_q0,
        mac_res_2_address0,
        mac_res_2_ce0,
        mac_res_2_q0,
        mac_res_3_address0,
        mac_res_3_ce0,
        mac_res_3_q0,
        mac_res_4_address0,
        mac_res_4_ce0,
        mac_res_4_q0,
        mac_res_5_address0,
        mac_res_5_ce0,
        mac_res_5_q0,
        mac_res_6_address0,
        mac_res_6_ce0,
        mac_res_6_q0,
        mac_res_7_address0,
        mac_res_7_ce0,
        mac_res_7_q0,
        mac_res_8_address0,
        mac_res_8_ce0,
        mac_res_8_q0,
        mac_res_9_address0,
        mac_res_9_ce0,
        mac_res_9_q0,
        mac_res_10_address0,
        mac_res_10_ce0,
        mac_res_10_q0,
        mac_res_11_address0,
        mac_res_11_ce0,
        mac_res_11_q0,
        mac_res_12_address0,
        mac_res_12_ce0,
        mac_res_12_q0,
        mac_res_13_address0,
        mac_res_13_ce0,
        mac_res_13_q0,
        mac_res_14_address0,
        mac_res_14_ce0,
        mac_res_14_q0,
        mac_res_15_address0,
        mac_res_15_ce0,
        mac_res_15_q0,
        grp_fu_1657_p_din0,
        grp_fu_1657_p_din1,
        grp_fu_1657_p_opcode,
        grp_fu_1657_p_dout0,
        grp_fu_1657_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem1_AWVALID;
input   m_axi_gmem1_AWREADY;
output  [63:0] m_axi_gmem1_AWADDR;
output  [0:0] m_axi_gmem1_AWID;
output  [31:0] m_axi_gmem1_AWLEN;
output  [2:0] m_axi_gmem1_AWSIZE;
output  [1:0] m_axi_gmem1_AWBURST;
output  [1:0] m_axi_gmem1_AWLOCK;
output  [3:0] m_axi_gmem1_AWCACHE;
output  [2:0] m_axi_gmem1_AWPROT;
output  [3:0] m_axi_gmem1_AWQOS;
output  [3:0] m_axi_gmem1_AWREGION;
output  [0:0] m_axi_gmem1_AWUSER;
output   m_axi_gmem1_WVALID;
input   m_axi_gmem1_WREADY;
output  [31:0] m_axi_gmem1_WDATA;
output  [3:0] m_axi_gmem1_WSTRB;
output   m_axi_gmem1_WLAST;
output  [0:0] m_axi_gmem1_WID;
output  [0:0] m_axi_gmem1_WUSER;
output   m_axi_gmem1_ARVALID;
input   m_axi_gmem1_ARREADY;
output  [63:0] m_axi_gmem1_ARADDR;
output  [0:0] m_axi_gmem1_ARID;
output  [31:0] m_axi_gmem1_ARLEN;
output  [2:0] m_axi_gmem1_ARSIZE;
output  [1:0] m_axi_gmem1_ARBURST;
output  [1:0] m_axi_gmem1_ARLOCK;
output  [3:0] m_axi_gmem1_ARCACHE;
output  [2:0] m_axi_gmem1_ARPROT;
output  [3:0] m_axi_gmem1_ARQOS;
output  [3:0] m_axi_gmem1_ARREGION;
output  [0:0] m_axi_gmem1_ARUSER;
input   m_axi_gmem1_RVALID;
output   m_axi_gmem1_RREADY;
input  [31:0] m_axi_gmem1_RDATA;
input   m_axi_gmem1_RLAST;
input  [0:0] m_axi_gmem1_RID;
input  [10:0] m_axi_gmem1_RFIFONUM;
input  [0:0] m_axi_gmem1_RUSER;
input  [1:0] m_axi_gmem1_RRESP;
input   m_axi_gmem1_BVALID;
output   m_axi_gmem1_BREADY;
input  [1:0] m_axi_gmem1_BRESP;
input  [0:0] m_axi_gmem1_BID;
input  [0:0] m_axi_gmem1_BUSER;
input  [30:0] chunk;
input  [61:0] sext_ln636;
output  [2:0] x_15_address0;
output   x_15_ce0;
output   x_15_we0;
output  [31:0] x_15_d0;
output  [2:0] x_14_address0;
output   x_14_ce0;
output   x_14_we0;
output  [31:0] x_14_d0;
output  [2:0] x_13_address0;
output   x_13_ce0;
output   x_13_we0;
output  [31:0] x_13_d0;
output  [2:0] x_12_address0;
output   x_12_ce0;
output   x_12_we0;
output  [31:0] x_12_d0;
output  [2:0] x_11_address0;
output   x_11_ce0;
output   x_11_we0;
output  [31:0] x_11_d0;
output  [2:0] x_10_address0;
output   x_10_ce0;
output   x_10_we0;
output  [31:0] x_10_d0;
output  [2:0] x_9_address0;
output   x_9_ce0;
output   x_9_we0;
output  [31:0] x_9_d0;
output  [2:0] x_8_address0;
output   x_8_ce0;
output   x_8_we0;
output  [31:0] x_8_d0;
output  [2:0] x_7_address0;
output   x_7_ce0;
output   x_7_we0;
output  [31:0] x_7_d0;
output  [2:0] x_6_address0;
output   x_6_ce0;
output   x_6_we0;
output  [31:0] x_6_d0;
output  [2:0] x_5_address0;
output   x_5_ce0;
output   x_5_we0;
output  [31:0] x_5_d0;
output  [2:0] x_4_address0;
output   x_4_ce0;
output   x_4_we0;
output  [31:0] x_4_d0;
output  [2:0] x_3_address0;
output   x_3_ce0;
output   x_3_we0;
output  [31:0] x_3_d0;
output  [2:0] x_2_address0;
output   x_2_ce0;
output   x_2_we0;
output  [31:0] x_2_d0;
output  [2:0] x_1_address0;
output   x_1_ce0;
output   x_1_we0;
output  [31:0] x_1_d0;
output  [2:0] x_address0;
output   x_ce0;
output   x_we0;
output  [31:0] x_d0;
output  [2:0] mac_res_address0;
output   mac_res_ce0;
input  [31:0] mac_res_q0;
output  [2:0] mac_res_1_address0;
output   mac_res_1_ce0;
input  [31:0] mac_res_1_q0;
output  [2:0] mac_res_2_address0;
output   mac_res_2_ce0;
input  [31:0] mac_res_2_q0;
output  [2:0] mac_res_3_address0;
output   mac_res_3_ce0;
input  [31:0] mac_res_3_q0;
output  [2:0] mac_res_4_address0;
output   mac_res_4_ce0;
input  [31:0] mac_res_4_q0;
output  [2:0] mac_res_5_address0;
output   mac_res_5_ce0;
input  [31:0] mac_res_5_q0;
output  [2:0] mac_res_6_address0;
output   mac_res_6_ce0;
input  [31:0] mac_res_6_q0;
output  [2:0] mac_res_7_address0;
output   mac_res_7_ce0;
input  [31:0] mac_res_7_q0;
output  [2:0] mac_res_8_address0;
output   mac_res_8_ce0;
input  [31:0] mac_res_8_q0;
output  [2:0] mac_res_9_address0;
output   mac_res_9_ce0;
input  [31:0] mac_res_9_q0;
output  [2:0] mac_res_10_address0;
output   mac_res_10_ce0;
input  [31:0] mac_res_10_q0;
output  [2:0] mac_res_11_address0;
output   mac_res_11_ce0;
input  [31:0] mac_res_11_q0;
output  [2:0] mac_res_12_address0;
output   mac_res_12_ce0;
input  [31:0] mac_res_12_q0;
output  [2:0] mac_res_13_address0;
output   mac_res_13_ce0;
input  [31:0] mac_res_13_q0;
output  [2:0] mac_res_14_address0;
output   mac_res_14_ce0;
input  [31:0] mac_res_14_q0;
output  [2:0] mac_res_15_address0;
output   mac_res_15_ce0;
input  [31:0] mac_res_15_q0;
output  [31:0] grp_fu_1657_p_din0;
output  [31:0] grp_fu_1657_p_din1;
output  [0:0] grp_fu_1657_p_opcode;
input  [31:0] grp_fu_1657_p_dout0;
output   grp_fu_1657_p_ce;

reg ap_idle;
reg m_axi_gmem1_RREADY;
reg x_15_ce0;
reg x_15_we0;
reg x_14_ce0;
reg x_14_we0;
reg x_13_ce0;
reg x_13_we0;
reg x_12_ce0;
reg x_12_we0;
reg x_11_ce0;
reg x_11_we0;
reg x_10_ce0;
reg x_10_we0;
reg x_9_ce0;
reg x_9_we0;
reg x_8_ce0;
reg x_8_we0;
reg x_7_ce0;
reg x_7_we0;
reg x_6_ce0;
reg x_6_we0;
reg x_5_ce0;
reg x_5_we0;
reg x_4_ce0;
reg x_4_we0;
reg x_3_ce0;
reg x_3_we0;
reg x_2_ce0;
reg x_2_we0;
reg x_1_ce0;
reg x_1_we0;
reg x_ce0;
reg x_we0;
reg mac_res_ce0;
reg mac_res_1_ce0;
reg mac_res_2_ce0;
reg mac_res_3_ce0;
reg mac_res_4_ce0;
reg mac_res_5_ce0;
reg mac_res_6_ce0;
reg mac_res_7_ce0;
reg mac_res_8_ce0;
reg mac_res_9_ce0;
reg mac_res_10_ce0;
reg mac_res_11_ce0;
reg mac_res_12_ce0;
reg mac_res_13_ce0;
reg mac_res_14_ce0;
reg mac_res_15_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_idle_pp0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln636_fu_595_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem1_blk_n_R;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [3:0] trunc_ln636_fu_607_p1;
reg   [3:0] trunc_ln636_reg_759;
reg   [3:0] trunc_ln636_reg_759_pp0_iter1_reg;
reg   [3:0] trunc_ln636_reg_759_pp0_iter2_reg;
reg   [3:0] trunc_ln636_reg_759_pp0_iter3_reg;
reg   [3:0] trunc_ln636_reg_759_pp0_iter4_reg;
reg   [3:0] trunc_ln636_reg_759_pp0_iter5_reg;
reg   [3:0] trunc_ln636_reg_759_pp0_iter6_reg;
reg   [3:0] trunc_ln636_reg_759_pp0_iter7_reg;
reg   [3:0] trunc_ln636_reg_759_pp0_iter8_reg;
reg   [2:0] x_addr_reg_844;
reg   [2:0] x_addr_reg_844_pp0_iter1_reg;
reg   [2:0] x_addr_reg_844_pp0_iter2_reg;
reg   [2:0] x_addr_reg_844_pp0_iter3_reg;
reg   [2:0] x_addr_reg_844_pp0_iter4_reg;
reg   [2:0] x_addr_reg_844_pp0_iter5_reg;
reg   [2:0] x_addr_reg_844_pp0_iter6_reg;
reg   [2:0] x_addr_reg_844_pp0_iter7_reg;
reg   [2:0] x_addr_reg_844_pp0_iter8_reg;
reg   [2:0] x_1_addr_reg_849;
reg   [2:0] x_1_addr_reg_849_pp0_iter1_reg;
reg   [2:0] x_1_addr_reg_849_pp0_iter2_reg;
reg   [2:0] x_1_addr_reg_849_pp0_iter3_reg;
reg   [2:0] x_1_addr_reg_849_pp0_iter4_reg;
reg   [2:0] x_1_addr_reg_849_pp0_iter5_reg;
reg   [2:0] x_1_addr_reg_849_pp0_iter6_reg;
reg   [2:0] x_1_addr_reg_849_pp0_iter7_reg;
reg   [2:0] x_1_addr_reg_849_pp0_iter8_reg;
reg   [2:0] x_2_addr_reg_854;
reg   [2:0] x_2_addr_reg_854_pp0_iter1_reg;
reg   [2:0] x_2_addr_reg_854_pp0_iter2_reg;
reg   [2:0] x_2_addr_reg_854_pp0_iter3_reg;
reg   [2:0] x_2_addr_reg_854_pp0_iter4_reg;
reg   [2:0] x_2_addr_reg_854_pp0_iter5_reg;
reg   [2:0] x_2_addr_reg_854_pp0_iter6_reg;
reg   [2:0] x_2_addr_reg_854_pp0_iter7_reg;
reg   [2:0] x_2_addr_reg_854_pp0_iter8_reg;
reg   [2:0] x_3_addr_reg_859;
reg   [2:0] x_3_addr_reg_859_pp0_iter1_reg;
reg   [2:0] x_3_addr_reg_859_pp0_iter2_reg;
reg   [2:0] x_3_addr_reg_859_pp0_iter3_reg;
reg   [2:0] x_3_addr_reg_859_pp0_iter4_reg;
reg   [2:0] x_3_addr_reg_859_pp0_iter5_reg;
reg   [2:0] x_3_addr_reg_859_pp0_iter6_reg;
reg   [2:0] x_3_addr_reg_859_pp0_iter7_reg;
reg   [2:0] x_3_addr_reg_859_pp0_iter8_reg;
reg   [2:0] x_4_addr_reg_864;
reg   [2:0] x_4_addr_reg_864_pp0_iter1_reg;
reg   [2:0] x_4_addr_reg_864_pp0_iter2_reg;
reg   [2:0] x_4_addr_reg_864_pp0_iter3_reg;
reg   [2:0] x_4_addr_reg_864_pp0_iter4_reg;
reg   [2:0] x_4_addr_reg_864_pp0_iter5_reg;
reg   [2:0] x_4_addr_reg_864_pp0_iter6_reg;
reg   [2:0] x_4_addr_reg_864_pp0_iter7_reg;
reg   [2:0] x_4_addr_reg_864_pp0_iter8_reg;
reg   [2:0] x_5_addr_reg_869;
reg   [2:0] x_5_addr_reg_869_pp0_iter1_reg;
reg   [2:0] x_5_addr_reg_869_pp0_iter2_reg;
reg   [2:0] x_5_addr_reg_869_pp0_iter3_reg;
reg   [2:0] x_5_addr_reg_869_pp0_iter4_reg;
reg   [2:0] x_5_addr_reg_869_pp0_iter5_reg;
reg   [2:0] x_5_addr_reg_869_pp0_iter6_reg;
reg   [2:0] x_5_addr_reg_869_pp0_iter7_reg;
reg   [2:0] x_5_addr_reg_869_pp0_iter8_reg;
reg   [2:0] x_6_addr_reg_874;
reg   [2:0] x_6_addr_reg_874_pp0_iter1_reg;
reg   [2:0] x_6_addr_reg_874_pp0_iter2_reg;
reg   [2:0] x_6_addr_reg_874_pp0_iter3_reg;
reg   [2:0] x_6_addr_reg_874_pp0_iter4_reg;
reg   [2:0] x_6_addr_reg_874_pp0_iter5_reg;
reg   [2:0] x_6_addr_reg_874_pp0_iter6_reg;
reg   [2:0] x_6_addr_reg_874_pp0_iter7_reg;
reg   [2:0] x_6_addr_reg_874_pp0_iter8_reg;
reg   [2:0] x_7_addr_reg_879;
reg   [2:0] x_7_addr_reg_879_pp0_iter1_reg;
reg   [2:0] x_7_addr_reg_879_pp0_iter2_reg;
reg   [2:0] x_7_addr_reg_879_pp0_iter3_reg;
reg   [2:0] x_7_addr_reg_879_pp0_iter4_reg;
reg   [2:0] x_7_addr_reg_879_pp0_iter5_reg;
reg   [2:0] x_7_addr_reg_879_pp0_iter6_reg;
reg   [2:0] x_7_addr_reg_879_pp0_iter7_reg;
reg   [2:0] x_7_addr_reg_879_pp0_iter8_reg;
reg   [2:0] x_8_addr_reg_884;
reg   [2:0] x_8_addr_reg_884_pp0_iter1_reg;
reg   [2:0] x_8_addr_reg_884_pp0_iter2_reg;
reg   [2:0] x_8_addr_reg_884_pp0_iter3_reg;
reg   [2:0] x_8_addr_reg_884_pp0_iter4_reg;
reg   [2:0] x_8_addr_reg_884_pp0_iter5_reg;
reg   [2:0] x_8_addr_reg_884_pp0_iter6_reg;
reg   [2:0] x_8_addr_reg_884_pp0_iter7_reg;
reg   [2:0] x_8_addr_reg_884_pp0_iter8_reg;
reg   [2:0] x_9_addr_reg_889;
reg   [2:0] x_9_addr_reg_889_pp0_iter1_reg;
reg   [2:0] x_9_addr_reg_889_pp0_iter2_reg;
reg   [2:0] x_9_addr_reg_889_pp0_iter3_reg;
reg   [2:0] x_9_addr_reg_889_pp0_iter4_reg;
reg   [2:0] x_9_addr_reg_889_pp0_iter5_reg;
reg   [2:0] x_9_addr_reg_889_pp0_iter6_reg;
reg   [2:0] x_9_addr_reg_889_pp0_iter7_reg;
reg   [2:0] x_9_addr_reg_889_pp0_iter8_reg;
reg   [2:0] x_10_addr_reg_894;
reg   [2:0] x_10_addr_reg_894_pp0_iter1_reg;
reg   [2:0] x_10_addr_reg_894_pp0_iter2_reg;
reg   [2:0] x_10_addr_reg_894_pp0_iter3_reg;
reg   [2:0] x_10_addr_reg_894_pp0_iter4_reg;
reg   [2:0] x_10_addr_reg_894_pp0_iter5_reg;
reg   [2:0] x_10_addr_reg_894_pp0_iter6_reg;
reg   [2:0] x_10_addr_reg_894_pp0_iter7_reg;
reg   [2:0] x_10_addr_reg_894_pp0_iter8_reg;
reg   [2:0] x_11_addr_reg_899;
reg   [2:0] x_11_addr_reg_899_pp0_iter1_reg;
reg   [2:0] x_11_addr_reg_899_pp0_iter2_reg;
reg   [2:0] x_11_addr_reg_899_pp0_iter3_reg;
reg   [2:0] x_11_addr_reg_899_pp0_iter4_reg;
reg   [2:0] x_11_addr_reg_899_pp0_iter5_reg;
reg   [2:0] x_11_addr_reg_899_pp0_iter6_reg;
reg   [2:0] x_11_addr_reg_899_pp0_iter7_reg;
reg   [2:0] x_11_addr_reg_899_pp0_iter8_reg;
reg   [2:0] x_12_addr_reg_904;
reg   [2:0] x_12_addr_reg_904_pp0_iter1_reg;
reg   [2:0] x_12_addr_reg_904_pp0_iter2_reg;
reg   [2:0] x_12_addr_reg_904_pp0_iter3_reg;
reg   [2:0] x_12_addr_reg_904_pp0_iter4_reg;
reg   [2:0] x_12_addr_reg_904_pp0_iter5_reg;
reg   [2:0] x_12_addr_reg_904_pp0_iter6_reg;
reg   [2:0] x_12_addr_reg_904_pp0_iter7_reg;
reg   [2:0] x_12_addr_reg_904_pp0_iter8_reg;
reg   [2:0] x_13_addr_reg_909;
reg   [2:0] x_13_addr_reg_909_pp0_iter1_reg;
reg   [2:0] x_13_addr_reg_909_pp0_iter2_reg;
reg   [2:0] x_13_addr_reg_909_pp0_iter3_reg;
reg   [2:0] x_13_addr_reg_909_pp0_iter4_reg;
reg   [2:0] x_13_addr_reg_909_pp0_iter5_reg;
reg   [2:0] x_13_addr_reg_909_pp0_iter6_reg;
reg   [2:0] x_13_addr_reg_909_pp0_iter7_reg;
reg   [2:0] x_13_addr_reg_909_pp0_iter8_reg;
reg   [2:0] x_14_addr_reg_914;
reg   [2:0] x_14_addr_reg_914_pp0_iter1_reg;
reg   [2:0] x_14_addr_reg_914_pp0_iter2_reg;
reg   [2:0] x_14_addr_reg_914_pp0_iter3_reg;
reg   [2:0] x_14_addr_reg_914_pp0_iter4_reg;
reg   [2:0] x_14_addr_reg_914_pp0_iter5_reg;
reg   [2:0] x_14_addr_reg_914_pp0_iter6_reg;
reg   [2:0] x_14_addr_reg_914_pp0_iter7_reg;
reg   [2:0] x_14_addr_reg_914_pp0_iter8_reg;
reg   [2:0] x_15_addr_reg_919;
reg   [2:0] x_15_addr_reg_919_pp0_iter1_reg;
reg   [2:0] x_15_addr_reg_919_pp0_iter2_reg;
reg   [2:0] x_15_addr_reg_919_pp0_iter3_reg;
reg   [2:0] x_15_addr_reg_919_pp0_iter4_reg;
reg   [2:0] x_15_addr_reg_919_pp0_iter5_reg;
reg   [2:0] x_15_addr_reg_919_pp0_iter6_reg;
reg   [2:0] x_15_addr_reg_919_pp0_iter7_reg;
reg   [2:0] x_15_addr_reg_919_pp0_iter8_reg;
wire   [31:0] tmp_3_fu_668_p35;
reg   [31:0] tmp_3_reg_924;
reg   [31:0] gmem1_addr_read_reg_929;
wire   [31:0] bitcast_ln638_fu_739_p1;
reg   [31:0] add_reg_939;
wire   [63:0] zext_ln636_fu_621_p1;
reg   [30:0] i_4_fu_158;
wire   [30:0] add_ln636_fu_601_p2;
wire    ap_loop_init;
reg   [30:0] ap_sig_allocacmp_i;
wire   [2:0] lshr_ln4_fu_611_p4;
wire   [31:0] tmp_3_fu_668_p33;
reg    ap_block_pp0_stage0_00001;
reg    grp_fu_579_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [3:0] tmp_3_fu_668_p1;
wire   [3:0] tmp_3_fu_668_p3;
wire   [3:0] tmp_3_fu_668_p5;
wire   [3:0] tmp_3_fu_668_p7;
wire   [3:0] tmp_3_fu_668_p9;
wire   [3:0] tmp_3_fu_668_p11;
wire   [3:0] tmp_3_fu_668_p13;
wire   [3:0] tmp_3_fu_668_p15;
wire  signed [3:0] tmp_3_fu_668_p17;
wire  signed [3:0] tmp_3_fu_668_p19;
wire  signed [3:0] tmp_3_fu_668_p21;
wire  signed [3:0] tmp_3_fu_668_p23;
wire  signed [3:0] tmp_3_fu_668_p25;
wire  signed [3:0] tmp_3_fu_668_p27;
wire  signed [3:0] tmp_3_fu_668_p29;
wire  signed [3:0] tmp_3_fu_668_p31;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 i_4_fu_158 = 31'd0;
#0 ap_done_reg = 1'b0;
end

krnl_bp_sparsemux_33_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 4'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 4'hB ),
    .din11_WIDTH( 32 ),
    .CASE12( 4'hC ),
    .din12_WIDTH( 32 ),
    .CASE13( 4'hD ),
    .din13_WIDTH( 32 ),
    .CASE14( 4'hE ),
    .din14_WIDTH( 32 ),
    .CASE15( 4'hF ),
    .din15_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_33_4_32_1_1_U120(
    .din0(mac_res_q0),
    .din1(mac_res_1_q0),
    .din2(mac_res_2_q0),
    .din3(mac_res_3_q0),
    .din4(mac_res_4_q0),
    .din5(mac_res_5_q0),
    .din6(mac_res_6_q0),
    .din7(mac_res_7_q0),
    .din8(mac_res_8_q0),
    .din9(mac_res_9_q0),
    .din10(mac_res_10_q0),
    .din11(mac_res_11_q0),
    .din12(mac_res_12_q0),
    .din13(mac_res_13_q0),
    .din14(mac_res_14_q0),
    .din15(mac_res_15_q0),
    .def(tmp_3_fu_668_p33),
    .sel(trunc_ln636_reg_759),
    .dout(tmp_3_fu_668_p35)
);

krnl_bp_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter8_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln636_fu_595_p2 == 1'd0))) begin
            i_4_fu_158 <= add_ln636_fu_601_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_4_fu_158 <= 31'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_reg_939 <= grp_fu_1657_p_dout0;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        trunc_ln636_reg_759_pp0_iter2_reg <= trunc_ln636_reg_759_pp0_iter1_reg;
        trunc_ln636_reg_759_pp0_iter3_reg <= trunc_ln636_reg_759_pp0_iter2_reg;
        trunc_ln636_reg_759_pp0_iter4_reg <= trunc_ln636_reg_759_pp0_iter3_reg;
        trunc_ln636_reg_759_pp0_iter5_reg <= trunc_ln636_reg_759_pp0_iter4_reg;
        trunc_ln636_reg_759_pp0_iter6_reg <= trunc_ln636_reg_759_pp0_iter5_reg;
        trunc_ln636_reg_759_pp0_iter7_reg <= trunc_ln636_reg_759_pp0_iter6_reg;
        trunc_ln636_reg_759_pp0_iter8_reg <= trunc_ln636_reg_759_pp0_iter7_reg;
        x_10_addr_reg_894_pp0_iter2_reg <= x_10_addr_reg_894_pp0_iter1_reg;
        x_10_addr_reg_894_pp0_iter3_reg <= x_10_addr_reg_894_pp0_iter2_reg;
        x_10_addr_reg_894_pp0_iter4_reg <= x_10_addr_reg_894_pp0_iter3_reg;
        x_10_addr_reg_894_pp0_iter5_reg <= x_10_addr_reg_894_pp0_iter4_reg;
        x_10_addr_reg_894_pp0_iter6_reg <= x_10_addr_reg_894_pp0_iter5_reg;
        x_10_addr_reg_894_pp0_iter7_reg <= x_10_addr_reg_894_pp0_iter6_reg;
        x_10_addr_reg_894_pp0_iter8_reg <= x_10_addr_reg_894_pp0_iter7_reg;
        x_11_addr_reg_899_pp0_iter2_reg <= x_11_addr_reg_899_pp0_iter1_reg;
        x_11_addr_reg_899_pp0_iter3_reg <= x_11_addr_reg_899_pp0_iter2_reg;
        x_11_addr_reg_899_pp0_iter4_reg <= x_11_addr_reg_899_pp0_iter3_reg;
        x_11_addr_reg_899_pp0_iter5_reg <= x_11_addr_reg_899_pp0_iter4_reg;
        x_11_addr_reg_899_pp0_iter6_reg <= x_11_addr_reg_899_pp0_iter5_reg;
        x_11_addr_reg_899_pp0_iter7_reg <= x_11_addr_reg_899_pp0_iter6_reg;
        x_11_addr_reg_899_pp0_iter8_reg <= x_11_addr_reg_899_pp0_iter7_reg;
        x_12_addr_reg_904_pp0_iter2_reg <= x_12_addr_reg_904_pp0_iter1_reg;
        x_12_addr_reg_904_pp0_iter3_reg <= x_12_addr_reg_904_pp0_iter2_reg;
        x_12_addr_reg_904_pp0_iter4_reg <= x_12_addr_reg_904_pp0_iter3_reg;
        x_12_addr_reg_904_pp0_iter5_reg <= x_12_addr_reg_904_pp0_iter4_reg;
        x_12_addr_reg_904_pp0_iter6_reg <= x_12_addr_reg_904_pp0_iter5_reg;
        x_12_addr_reg_904_pp0_iter7_reg <= x_12_addr_reg_904_pp0_iter6_reg;
        x_12_addr_reg_904_pp0_iter8_reg <= x_12_addr_reg_904_pp0_iter7_reg;
        x_13_addr_reg_909_pp0_iter2_reg <= x_13_addr_reg_909_pp0_iter1_reg;
        x_13_addr_reg_909_pp0_iter3_reg <= x_13_addr_reg_909_pp0_iter2_reg;
        x_13_addr_reg_909_pp0_iter4_reg <= x_13_addr_reg_909_pp0_iter3_reg;
        x_13_addr_reg_909_pp0_iter5_reg <= x_13_addr_reg_909_pp0_iter4_reg;
        x_13_addr_reg_909_pp0_iter6_reg <= x_13_addr_reg_909_pp0_iter5_reg;
        x_13_addr_reg_909_pp0_iter7_reg <= x_13_addr_reg_909_pp0_iter6_reg;
        x_13_addr_reg_909_pp0_iter8_reg <= x_13_addr_reg_909_pp0_iter7_reg;
        x_14_addr_reg_914_pp0_iter2_reg <= x_14_addr_reg_914_pp0_iter1_reg;
        x_14_addr_reg_914_pp0_iter3_reg <= x_14_addr_reg_914_pp0_iter2_reg;
        x_14_addr_reg_914_pp0_iter4_reg <= x_14_addr_reg_914_pp0_iter3_reg;
        x_14_addr_reg_914_pp0_iter5_reg <= x_14_addr_reg_914_pp0_iter4_reg;
        x_14_addr_reg_914_pp0_iter6_reg <= x_14_addr_reg_914_pp0_iter5_reg;
        x_14_addr_reg_914_pp0_iter7_reg <= x_14_addr_reg_914_pp0_iter6_reg;
        x_14_addr_reg_914_pp0_iter8_reg <= x_14_addr_reg_914_pp0_iter7_reg;
        x_15_addr_reg_919_pp0_iter2_reg <= x_15_addr_reg_919_pp0_iter1_reg;
        x_15_addr_reg_919_pp0_iter3_reg <= x_15_addr_reg_919_pp0_iter2_reg;
        x_15_addr_reg_919_pp0_iter4_reg <= x_15_addr_reg_919_pp0_iter3_reg;
        x_15_addr_reg_919_pp0_iter5_reg <= x_15_addr_reg_919_pp0_iter4_reg;
        x_15_addr_reg_919_pp0_iter6_reg <= x_15_addr_reg_919_pp0_iter5_reg;
        x_15_addr_reg_919_pp0_iter7_reg <= x_15_addr_reg_919_pp0_iter6_reg;
        x_15_addr_reg_919_pp0_iter8_reg <= x_15_addr_reg_919_pp0_iter7_reg;
        x_1_addr_reg_849_pp0_iter2_reg <= x_1_addr_reg_849_pp0_iter1_reg;
        x_1_addr_reg_849_pp0_iter3_reg <= x_1_addr_reg_849_pp0_iter2_reg;
        x_1_addr_reg_849_pp0_iter4_reg <= x_1_addr_reg_849_pp0_iter3_reg;
        x_1_addr_reg_849_pp0_iter5_reg <= x_1_addr_reg_849_pp0_iter4_reg;
        x_1_addr_reg_849_pp0_iter6_reg <= x_1_addr_reg_849_pp0_iter5_reg;
        x_1_addr_reg_849_pp0_iter7_reg <= x_1_addr_reg_849_pp0_iter6_reg;
        x_1_addr_reg_849_pp0_iter8_reg <= x_1_addr_reg_849_pp0_iter7_reg;
        x_2_addr_reg_854_pp0_iter2_reg <= x_2_addr_reg_854_pp0_iter1_reg;
        x_2_addr_reg_854_pp0_iter3_reg <= x_2_addr_reg_854_pp0_iter2_reg;
        x_2_addr_reg_854_pp0_iter4_reg <= x_2_addr_reg_854_pp0_iter3_reg;
        x_2_addr_reg_854_pp0_iter5_reg <= x_2_addr_reg_854_pp0_iter4_reg;
        x_2_addr_reg_854_pp0_iter6_reg <= x_2_addr_reg_854_pp0_iter5_reg;
        x_2_addr_reg_854_pp0_iter7_reg <= x_2_addr_reg_854_pp0_iter6_reg;
        x_2_addr_reg_854_pp0_iter8_reg <= x_2_addr_reg_854_pp0_iter7_reg;
        x_3_addr_reg_859_pp0_iter2_reg <= x_3_addr_reg_859_pp0_iter1_reg;
        x_3_addr_reg_859_pp0_iter3_reg <= x_3_addr_reg_859_pp0_iter2_reg;
        x_3_addr_reg_859_pp0_iter4_reg <= x_3_addr_reg_859_pp0_iter3_reg;
        x_3_addr_reg_859_pp0_iter5_reg <= x_3_addr_reg_859_pp0_iter4_reg;
        x_3_addr_reg_859_pp0_iter6_reg <= x_3_addr_reg_859_pp0_iter5_reg;
        x_3_addr_reg_859_pp0_iter7_reg <= x_3_addr_reg_859_pp0_iter6_reg;
        x_3_addr_reg_859_pp0_iter8_reg <= x_3_addr_reg_859_pp0_iter7_reg;
        x_4_addr_reg_864_pp0_iter2_reg <= x_4_addr_reg_864_pp0_iter1_reg;
        x_4_addr_reg_864_pp0_iter3_reg <= x_4_addr_reg_864_pp0_iter2_reg;
        x_4_addr_reg_864_pp0_iter4_reg <= x_4_addr_reg_864_pp0_iter3_reg;
        x_4_addr_reg_864_pp0_iter5_reg <= x_4_addr_reg_864_pp0_iter4_reg;
        x_4_addr_reg_864_pp0_iter6_reg <= x_4_addr_reg_864_pp0_iter5_reg;
        x_4_addr_reg_864_pp0_iter7_reg <= x_4_addr_reg_864_pp0_iter6_reg;
        x_4_addr_reg_864_pp0_iter8_reg <= x_4_addr_reg_864_pp0_iter7_reg;
        x_5_addr_reg_869_pp0_iter2_reg <= x_5_addr_reg_869_pp0_iter1_reg;
        x_5_addr_reg_869_pp0_iter3_reg <= x_5_addr_reg_869_pp0_iter2_reg;
        x_5_addr_reg_869_pp0_iter4_reg <= x_5_addr_reg_869_pp0_iter3_reg;
        x_5_addr_reg_869_pp0_iter5_reg <= x_5_addr_reg_869_pp0_iter4_reg;
        x_5_addr_reg_869_pp0_iter6_reg <= x_5_addr_reg_869_pp0_iter5_reg;
        x_5_addr_reg_869_pp0_iter7_reg <= x_5_addr_reg_869_pp0_iter6_reg;
        x_5_addr_reg_869_pp0_iter8_reg <= x_5_addr_reg_869_pp0_iter7_reg;
        x_6_addr_reg_874_pp0_iter2_reg <= x_6_addr_reg_874_pp0_iter1_reg;
        x_6_addr_reg_874_pp0_iter3_reg <= x_6_addr_reg_874_pp0_iter2_reg;
        x_6_addr_reg_874_pp0_iter4_reg <= x_6_addr_reg_874_pp0_iter3_reg;
        x_6_addr_reg_874_pp0_iter5_reg <= x_6_addr_reg_874_pp0_iter4_reg;
        x_6_addr_reg_874_pp0_iter6_reg <= x_6_addr_reg_874_pp0_iter5_reg;
        x_6_addr_reg_874_pp0_iter7_reg <= x_6_addr_reg_874_pp0_iter6_reg;
        x_6_addr_reg_874_pp0_iter8_reg <= x_6_addr_reg_874_pp0_iter7_reg;
        x_7_addr_reg_879_pp0_iter2_reg <= x_7_addr_reg_879_pp0_iter1_reg;
        x_7_addr_reg_879_pp0_iter3_reg <= x_7_addr_reg_879_pp0_iter2_reg;
        x_7_addr_reg_879_pp0_iter4_reg <= x_7_addr_reg_879_pp0_iter3_reg;
        x_7_addr_reg_879_pp0_iter5_reg <= x_7_addr_reg_879_pp0_iter4_reg;
        x_7_addr_reg_879_pp0_iter6_reg <= x_7_addr_reg_879_pp0_iter5_reg;
        x_7_addr_reg_879_pp0_iter7_reg <= x_7_addr_reg_879_pp0_iter6_reg;
        x_7_addr_reg_879_pp0_iter8_reg <= x_7_addr_reg_879_pp0_iter7_reg;
        x_8_addr_reg_884_pp0_iter2_reg <= x_8_addr_reg_884_pp0_iter1_reg;
        x_8_addr_reg_884_pp0_iter3_reg <= x_8_addr_reg_884_pp0_iter2_reg;
        x_8_addr_reg_884_pp0_iter4_reg <= x_8_addr_reg_884_pp0_iter3_reg;
        x_8_addr_reg_884_pp0_iter5_reg <= x_8_addr_reg_884_pp0_iter4_reg;
        x_8_addr_reg_884_pp0_iter6_reg <= x_8_addr_reg_884_pp0_iter5_reg;
        x_8_addr_reg_884_pp0_iter7_reg <= x_8_addr_reg_884_pp0_iter6_reg;
        x_8_addr_reg_884_pp0_iter8_reg <= x_8_addr_reg_884_pp0_iter7_reg;
        x_9_addr_reg_889_pp0_iter2_reg <= x_9_addr_reg_889_pp0_iter1_reg;
        x_9_addr_reg_889_pp0_iter3_reg <= x_9_addr_reg_889_pp0_iter2_reg;
        x_9_addr_reg_889_pp0_iter4_reg <= x_9_addr_reg_889_pp0_iter3_reg;
        x_9_addr_reg_889_pp0_iter5_reg <= x_9_addr_reg_889_pp0_iter4_reg;
        x_9_addr_reg_889_pp0_iter6_reg <= x_9_addr_reg_889_pp0_iter5_reg;
        x_9_addr_reg_889_pp0_iter7_reg <= x_9_addr_reg_889_pp0_iter6_reg;
        x_9_addr_reg_889_pp0_iter8_reg <= x_9_addr_reg_889_pp0_iter7_reg;
        x_addr_reg_844_pp0_iter2_reg <= x_addr_reg_844_pp0_iter1_reg;
        x_addr_reg_844_pp0_iter3_reg <= x_addr_reg_844_pp0_iter2_reg;
        x_addr_reg_844_pp0_iter4_reg <= x_addr_reg_844_pp0_iter3_reg;
        x_addr_reg_844_pp0_iter5_reg <= x_addr_reg_844_pp0_iter4_reg;
        x_addr_reg_844_pp0_iter6_reg <= x_addr_reg_844_pp0_iter5_reg;
        x_addr_reg_844_pp0_iter7_reg <= x_addr_reg_844_pp0_iter6_reg;
        x_addr_reg_844_pp0_iter8_reg <= x_addr_reg_844_pp0_iter7_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        gmem1_addr_read_reg_929 <= m_axi_gmem1_RDATA;
        tmp_3_reg_924 <= tmp_3_fu_668_p35;
        trunc_ln636_reg_759 <= trunc_ln636_fu_607_p1;
        trunc_ln636_reg_759_pp0_iter1_reg <= trunc_ln636_reg_759;
        x_10_addr_reg_894 <= zext_ln636_fu_621_p1;
        x_10_addr_reg_894_pp0_iter1_reg <= x_10_addr_reg_894;
        x_11_addr_reg_899 <= zext_ln636_fu_621_p1;
        x_11_addr_reg_899_pp0_iter1_reg <= x_11_addr_reg_899;
        x_12_addr_reg_904 <= zext_ln636_fu_621_p1;
        x_12_addr_reg_904_pp0_iter1_reg <= x_12_addr_reg_904;
        x_13_addr_reg_909 <= zext_ln636_fu_621_p1;
        x_13_addr_reg_909_pp0_iter1_reg <= x_13_addr_reg_909;
        x_14_addr_reg_914 <= zext_ln636_fu_621_p1;
        x_14_addr_reg_914_pp0_iter1_reg <= x_14_addr_reg_914;
        x_15_addr_reg_919 <= zext_ln636_fu_621_p1;
        x_15_addr_reg_919_pp0_iter1_reg <= x_15_addr_reg_919;
        x_1_addr_reg_849 <= zext_ln636_fu_621_p1;
        x_1_addr_reg_849_pp0_iter1_reg <= x_1_addr_reg_849;
        x_2_addr_reg_854 <= zext_ln636_fu_621_p1;
        x_2_addr_reg_854_pp0_iter1_reg <= x_2_addr_reg_854;
        x_3_addr_reg_859 <= zext_ln636_fu_621_p1;
        x_3_addr_reg_859_pp0_iter1_reg <= x_3_addr_reg_859;
        x_4_addr_reg_864 <= zext_ln636_fu_621_p1;
        x_4_addr_reg_864_pp0_iter1_reg <= x_4_addr_reg_864;
        x_5_addr_reg_869 <= zext_ln636_fu_621_p1;
        x_5_addr_reg_869_pp0_iter1_reg <= x_5_addr_reg_869;
        x_6_addr_reg_874 <= zext_ln636_fu_621_p1;
        x_6_addr_reg_874_pp0_iter1_reg <= x_6_addr_reg_874;
        x_7_addr_reg_879 <= zext_ln636_fu_621_p1;
        x_7_addr_reg_879_pp0_iter1_reg <= x_7_addr_reg_879;
        x_8_addr_reg_884 <= zext_ln636_fu_621_p1;
        x_8_addr_reg_884_pp0_iter1_reg <= x_8_addr_reg_884;
        x_9_addr_reg_889 <= zext_ln636_fu_621_p1;
        x_9_addr_reg_889_pp0_iter1_reg <= x_9_addr_reg_889;
        x_addr_reg_844 <= zext_ln636_fu_621_p1;
        x_addr_reg_844_pp0_iter1_reg <= x_addr_reg_844;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln636_fu_595_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter8_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i = 31'd0;
    end else begin
        ap_sig_allocacmp_i = i_4_fu_158;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem1_blk_n_R = m_axi_gmem1_RVALID;
    end else begin
        gmem1_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_579_ce = 1'b1;
    end else begin
        grp_fu_579_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem1_RREADY = 1'b1;
    end else begin
        m_axi_gmem1_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mac_res_10_ce0 = 1'b1;
    end else begin
        mac_res_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mac_res_11_ce0 = 1'b1;
    end else begin
        mac_res_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mac_res_12_ce0 = 1'b1;
    end else begin
        mac_res_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mac_res_13_ce0 = 1'b1;
    end else begin
        mac_res_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mac_res_14_ce0 = 1'b1;
    end else begin
        mac_res_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mac_res_15_ce0 = 1'b1;
    end else begin
        mac_res_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mac_res_1_ce0 = 1'b1;
    end else begin
        mac_res_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mac_res_2_ce0 = 1'b1;
    end else begin
        mac_res_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mac_res_3_ce0 = 1'b1;
    end else begin
        mac_res_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mac_res_4_ce0 = 1'b1;
    end else begin
        mac_res_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mac_res_5_ce0 = 1'b1;
    end else begin
        mac_res_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mac_res_6_ce0 = 1'b1;
    end else begin
        mac_res_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mac_res_7_ce0 = 1'b1;
    end else begin
        mac_res_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mac_res_8_ce0 = 1'b1;
    end else begin
        mac_res_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mac_res_9_ce0 = 1'b1;
    end else begin
        mac_res_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mac_res_ce0 = 1'b1;
    end else begin
        mac_res_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_10_ce0 = 1'b1;
    end else begin
        x_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (trunc_ln636_reg_759_pp0_iter8_reg == 4'd10) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_10_we0 = 1'b1;
    end else begin
        x_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_11_ce0 = 1'b1;
    end else begin
        x_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (trunc_ln636_reg_759_pp0_iter8_reg == 4'd11) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_11_we0 = 1'b1;
    end else begin
        x_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_12_ce0 = 1'b1;
    end else begin
        x_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (trunc_ln636_reg_759_pp0_iter8_reg == 4'd12) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_12_we0 = 1'b1;
    end else begin
        x_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_13_ce0 = 1'b1;
    end else begin
        x_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (trunc_ln636_reg_759_pp0_iter8_reg == 4'd13) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_13_we0 = 1'b1;
    end else begin
        x_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_14_ce0 = 1'b1;
    end else begin
        x_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (trunc_ln636_reg_759_pp0_iter8_reg == 4'd14) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_14_we0 = 1'b1;
    end else begin
        x_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_15_ce0 = 1'b1;
    end else begin
        x_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (trunc_ln636_reg_759_pp0_iter8_reg == 4'd15) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_15_we0 = 1'b1;
    end else begin
        x_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_1_ce0 = 1'b1;
    end else begin
        x_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (trunc_ln636_reg_759_pp0_iter8_reg == 4'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_1_we0 = 1'b1;
    end else begin
        x_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_2_ce0 = 1'b1;
    end else begin
        x_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (trunc_ln636_reg_759_pp0_iter8_reg == 4'd2) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_2_we0 = 1'b1;
    end else begin
        x_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_3_ce0 = 1'b1;
    end else begin
        x_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (trunc_ln636_reg_759_pp0_iter8_reg == 4'd3) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_3_we0 = 1'b1;
    end else begin
        x_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_4_ce0 = 1'b1;
    end else begin
        x_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (trunc_ln636_reg_759_pp0_iter8_reg == 4'd4) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_4_we0 = 1'b1;
    end else begin
        x_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_5_ce0 = 1'b1;
    end else begin
        x_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (trunc_ln636_reg_759_pp0_iter8_reg == 4'd5) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_5_we0 = 1'b1;
    end else begin
        x_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_6_ce0 = 1'b1;
    end else begin
        x_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (trunc_ln636_reg_759_pp0_iter8_reg == 4'd6) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_6_we0 = 1'b1;
    end else begin
        x_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_7_ce0 = 1'b1;
    end else begin
        x_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (trunc_ln636_reg_759_pp0_iter8_reg == 4'd7) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_7_we0 = 1'b1;
    end else begin
        x_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_8_ce0 = 1'b1;
    end else begin
        x_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (trunc_ln636_reg_759_pp0_iter8_reg == 4'd8) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_8_we0 = 1'b1;
    end else begin
        x_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_9_ce0 = 1'b1;
    end else begin
        x_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (trunc_ln636_reg_759_pp0_iter8_reg == 4'd9) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_9_we0 = 1'b1;
    end else begin
        x_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_ce0 = 1'b1;
    end else begin
        x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (trunc_ln636_reg_759_pp0_iter8_reg == 4'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_we0 = 1'b1;
    end else begin
        x_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln636_fu_601_p2 = (ap_sig_allocacmp_i + 31'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_00001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (m_axi_gmem1_RVALID == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln638_fu_739_p1 = gmem1_addr_read_reg_929;

assign grp_fu_1657_p_ce = grp_fu_579_ce;

assign grp_fu_1657_p_din0 = tmp_3_reg_924;

assign grp_fu_1657_p_din1 = bitcast_ln638_fu_739_p1;

assign grp_fu_1657_p_opcode = 2'd0;

assign icmp_ln636_fu_595_p2 = ((ap_sig_allocacmp_i == chunk) ? 1'b1 : 1'b0);

assign lshr_ln4_fu_611_p4 = {{ap_sig_allocacmp_i[6:4]}};

assign m_axi_gmem1_ARADDR = 64'd0;

assign m_axi_gmem1_ARBURST = 2'd0;

assign m_axi_gmem1_ARCACHE = 4'd0;

assign m_axi_gmem1_ARID = 1'd0;

assign m_axi_gmem1_ARLEN = 32'd0;

assign m_axi_gmem1_ARLOCK = 2'd0;

assign m_axi_gmem1_ARPROT = 3'd0;

assign m_axi_gmem1_ARQOS = 4'd0;

assign m_axi_gmem1_ARREGION = 4'd0;

assign m_axi_gmem1_ARSIZE = 3'd0;

assign m_axi_gmem1_ARUSER = 1'd0;

assign m_axi_gmem1_ARVALID = 1'b0;

assign m_axi_gmem1_AWADDR = 64'd0;

assign m_axi_gmem1_AWBURST = 2'd0;

assign m_axi_gmem1_AWCACHE = 4'd0;

assign m_axi_gmem1_AWID = 1'd0;

assign m_axi_gmem1_AWLEN = 32'd0;

assign m_axi_gmem1_AWLOCK = 2'd0;

assign m_axi_gmem1_AWPROT = 3'd0;

assign m_axi_gmem1_AWQOS = 4'd0;

assign m_axi_gmem1_AWREGION = 4'd0;

assign m_axi_gmem1_AWSIZE = 3'd0;

assign m_axi_gmem1_AWUSER = 1'd0;

assign m_axi_gmem1_AWVALID = 1'b0;

assign m_axi_gmem1_BREADY = 1'b0;

assign m_axi_gmem1_WDATA = 32'd0;

assign m_axi_gmem1_WID = 1'd0;

assign m_axi_gmem1_WLAST = 1'b0;

assign m_axi_gmem1_WSTRB = 4'd0;

assign m_axi_gmem1_WUSER = 1'd0;

assign m_axi_gmem1_WVALID = 1'b0;

assign mac_res_10_address0 = zext_ln636_fu_621_p1;

assign mac_res_11_address0 = zext_ln636_fu_621_p1;

assign mac_res_12_address0 = zext_ln636_fu_621_p1;

assign mac_res_13_address0 = zext_ln636_fu_621_p1;

assign mac_res_14_address0 = zext_ln636_fu_621_p1;

assign mac_res_15_address0 = zext_ln636_fu_621_p1;

assign mac_res_1_address0 = zext_ln636_fu_621_p1;

assign mac_res_2_address0 = zext_ln636_fu_621_p1;

assign mac_res_3_address0 = zext_ln636_fu_621_p1;

assign mac_res_4_address0 = zext_ln636_fu_621_p1;

assign mac_res_5_address0 = zext_ln636_fu_621_p1;

assign mac_res_6_address0 = zext_ln636_fu_621_p1;

assign mac_res_7_address0 = zext_ln636_fu_621_p1;

assign mac_res_8_address0 = zext_ln636_fu_621_p1;

assign mac_res_9_address0 = zext_ln636_fu_621_p1;

assign mac_res_address0 = zext_ln636_fu_621_p1;

assign tmp_3_fu_668_p33 = 'bx;

assign trunc_ln636_fu_607_p1 = ap_sig_allocacmp_i[3:0];

assign x_10_address0 = x_10_addr_reg_894_pp0_iter8_reg;

assign x_10_d0 = add_reg_939;

assign x_11_address0 = x_11_addr_reg_899_pp0_iter8_reg;

assign x_11_d0 = add_reg_939;

assign x_12_address0 = x_12_addr_reg_904_pp0_iter8_reg;

assign x_12_d0 = add_reg_939;

assign x_13_address0 = x_13_addr_reg_909_pp0_iter8_reg;

assign x_13_d0 = add_reg_939;

assign x_14_address0 = x_14_addr_reg_914_pp0_iter8_reg;

assign x_14_d0 = add_reg_939;

assign x_15_address0 = x_15_addr_reg_919_pp0_iter8_reg;

assign x_15_d0 = add_reg_939;

assign x_1_address0 = x_1_addr_reg_849_pp0_iter8_reg;

assign x_1_d0 = add_reg_939;

assign x_2_address0 = x_2_addr_reg_854_pp0_iter8_reg;

assign x_2_d0 = add_reg_939;

assign x_3_address0 = x_3_addr_reg_859_pp0_iter8_reg;

assign x_3_d0 = add_reg_939;

assign x_4_address0 = x_4_addr_reg_864_pp0_iter8_reg;

assign x_4_d0 = add_reg_939;

assign x_5_address0 = x_5_addr_reg_869_pp0_iter8_reg;

assign x_5_d0 = add_reg_939;

assign x_6_address0 = x_6_addr_reg_874_pp0_iter8_reg;

assign x_6_d0 = add_reg_939;

assign x_7_address0 = x_7_addr_reg_879_pp0_iter8_reg;

assign x_7_d0 = add_reg_939;

assign x_8_address0 = x_8_addr_reg_884_pp0_iter8_reg;

assign x_8_d0 = add_reg_939;

assign x_9_address0 = x_9_addr_reg_889_pp0_iter8_reg;

assign x_9_d0 = add_reg_939;

assign x_address0 = x_addr_reg_844_pp0_iter8_reg;

assign x_d0 = add_reg_939;

assign zext_ln636_fu_621_p1 = lshr_ln4_fu_611_p4;

endmodule //krnl_bp_krnl_bp_Pipeline_VITIS_LOOP_636_7
