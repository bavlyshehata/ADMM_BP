-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity krnl_bp_krnl_bp_Pipeline_VITIS_LOOP_636_7 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem1_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_WREADY : IN STD_LOGIC;
    m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RVALID : IN STD_LOGIC;
    m_axi_gmem1_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_RLAST : IN STD_LOGIC;
    m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
    m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BVALID : IN STD_LOGIC;
    m_axi_gmem1_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    chunk : IN STD_LOGIC_VECTOR (30 downto 0);
    sext_ln636 : IN STD_LOGIC_VECTOR (61 downto 0);
    x_15_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    x_15_ce0 : OUT STD_LOGIC;
    x_15_we0 : OUT STD_LOGIC;
    x_15_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_14_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    x_14_ce0 : OUT STD_LOGIC;
    x_14_we0 : OUT STD_LOGIC;
    x_14_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_13_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    x_13_ce0 : OUT STD_LOGIC;
    x_13_we0 : OUT STD_LOGIC;
    x_13_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_12_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    x_12_ce0 : OUT STD_LOGIC;
    x_12_we0 : OUT STD_LOGIC;
    x_12_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_11_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    x_11_ce0 : OUT STD_LOGIC;
    x_11_we0 : OUT STD_LOGIC;
    x_11_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_10_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    x_10_ce0 : OUT STD_LOGIC;
    x_10_we0 : OUT STD_LOGIC;
    x_10_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_9_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    x_9_ce0 : OUT STD_LOGIC;
    x_9_we0 : OUT STD_LOGIC;
    x_9_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_8_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    x_8_ce0 : OUT STD_LOGIC;
    x_8_we0 : OUT STD_LOGIC;
    x_8_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_7_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    x_7_ce0 : OUT STD_LOGIC;
    x_7_we0 : OUT STD_LOGIC;
    x_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    x_6_ce0 : OUT STD_LOGIC;
    x_6_we0 : OUT STD_LOGIC;
    x_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_5_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    x_5_ce0 : OUT STD_LOGIC;
    x_5_we0 : OUT STD_LOGIC;
    x_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    x_4_ce0 : OUT STD_LOGIC;
    x_4_we0 : OUT STD_LOGIC;
    x_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    x_3_ce0 : OUT STD_LOGIC;
    x_3_we0 : OUT STD_LOGIC;
    x_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    x_2_ce0 : OUT STD_LOGIC;
    x_2_we0 : OUT STD_LOGIC;
    x_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    x_1_ce0 : OUT STD_LOGIC;
    x_1_we0 : OUT STD_LOGIC;
    x_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    x_ce0 : OUT STD_LOGIC;
    x_we0 : OUT STD_LOGIC;
    x_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    mac_res_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    mac_res_ce0 : OUT STD_LOGIC;
    mac_res_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_res_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    mac_res_1_ce0 : OUT STD_LOGIC;
    mac_res_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_res_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    mac_res_2_ce0 : OUT STD_LOGIC;
    mac_res_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_res_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    mac_res_3_ce0 : OUT STD_LOGIC;
    mac_res_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_res_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    mac_res_4_ce0 : OUT STD_LOGIC;
    mac_res_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_res_5_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    mac_res_5_ce0 : OUT STD_LOGIC;
    mac_res_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_res_6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    mac_res_6_ce0 : OUT STD_LOGIC;
    mac_res_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_res_7_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    mac_res_7_ce0 : OUT STD_LOGIC;
    mac_res_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_res_8_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    mac_res_8_ce0 : OUT STD_LOGIC;
    mac_res_8_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_res_9_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    mac_res_9_ce0 : OUT STD_LOGIC;
    mac_res_9_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_res_10_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    mac_res_10_ce0 : OUT STD_LOGIC;
    mac_res_10_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_res_11_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    mac_res_11_ce0 : OUT STD_LOGIC;
    mac_res_11_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_res_12_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    mac_res_12_ce0 : OUT STD_LOGIC;
    mac_res_12_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_res_13_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    mac_res_13_ce0 : OUT STD_LOGIC;
    mac_res_13_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_res_14_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    mac_res_14_ce0 : OUT STD_LOGIC;
    mac_res_14_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_res_15_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    mac_res_15_ce0 : OUT STD_LOGIC;
    mac_res_15_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1657_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1657_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1657_p_opcode : OUT STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_1657_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1657_p_ce : OUT STD_LOGIC );
end;


architecture behav of krnl_bp_krnl_bp_Pipeline_VITIS_LOOP_636_7 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln636_fu_595_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem1_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln636_fu_607_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln636_reg_759 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln636_reg_759_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln636_reg_759_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln636_reg_759_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln636_reg_759_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln636_reg_759_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln636_reg_759_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln636_reg_759_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln636_reg_759_pp0_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal x_addr_reg_844 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_addr_reg_844_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_addr_reg_844_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_addr_reg_844_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_addr_reg_844_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_addr_reg_844_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_addr_reg_844_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_addr_reg_844_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_addr_reg_844_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_1_addr_reg_849 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_1_addr_reg_849_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_1_addr_reg_849_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_1_addr_reg_849_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_1_addr_reg_849_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_1_addr_reg_849_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_1_addr_reg_849_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_1_addr_reg_849_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_1_addr_reg_849_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_2_addr_reg_854 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_2_addr_reg_854_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_2_addr_reg_854_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_2_addr_reg_854_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_2_addr_reg_854_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_2_addr_reg_854_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_2_addr_reg_854_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_2_addr_reg_854_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_2_addr_reg_854_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_3_addr_reg_859 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_3_addr_reg_859_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_3_addr_reg_859_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_3_addr_reg_859_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_3_addr_reg_859_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_3_addr_reg_859_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_3_addr_reg_859_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_3_addr_reg_859_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_3_addr_reg_859_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_4_addr_reg_864 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_4_addr_reg_864_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_4_addr_reg_864_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_4_addr_reg_864_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_4_addr_reg_864_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_4_addr_reg_864_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_4_addr_reg_864_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_4_addr_reg_864_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_4_addr_reg_864_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_5_addr_reg_869 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_5_addr_reg_869_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_5_addr_reg_869_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_5_addr_reg_869_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_5_addr_reg_869_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_5_addr_reg_869_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_5_addr_reg_869_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_5_addr_reg_869_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_5_addr_reg_869_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_6_addr_reg_874 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_6_addr_reg_874_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_6_addr_reg_874_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_6_addr_reg_874_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_6_addr_reg_874_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_6_addr_reg_874_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_6_addr_reg_874_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_6_addr_reg_874_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_6_addr_reg_874_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_7_addr_reg_879 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_7_addr_reg_879_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_7_addr_reg_879_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_7_addr_reg_879_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_7_addr_reg_879_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_7_addr_reg_879_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_7_addr_reg_879_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_7_addr_reg_879_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_7_addr_reg_879_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_8_addr_reg_884 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_8_addr_reg_884_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_8_addr_reg_884_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_8_addr_reg_884_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_8_addr_reg_884_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_8_addr_reg_884_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_8_addr_reg_884_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_8_addr_reg_884_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_8_addr_reg_884_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_9_addr_reg_889 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_9_addr_reg_889_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_9_addr_reg_889_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_9_addr_reg_889_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_9_addr_reg_889_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_9_addr_reg_889_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_9_addr_reg_889_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_9_addr_reg_889_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_9_addr_reg_889_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_10_addr_reg_894 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_10_addr_reg_894_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_10_addr_reg_894_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_10_addr_reg_894_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_10_addr_reg_894_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_10_addr_reg_894_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_10_addr_reg_894_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_10_addr_reg_894_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_10_addr_reg_894_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_11_addr_reg_899 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_11_addr_reg_899_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_11_addr_reg_899_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_11_addr_reg_899_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_11_addr_reg_899_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_11_addr_reg_899_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_11_addr_reg_899_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_11_addr_reg_899_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_11_addr_reg_899_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_12_addr_reg_904 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_12_addr_reg_904_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_12_addr_reg_904_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_12_addr_reg_904_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_12_addr_reg_904_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_12_addr_reg_904_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_12_addr_reg_904_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_12_addr_reg_904_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_12_addr_reg_904_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_13_addr_reg_909 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_13_addr_reg_909_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_13_addr_reg_909_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_13_addr_reg_909_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_13_addr_reg_909_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_13_addr_reg_909_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_13_addr_reg_909_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_13_addr_reg_909_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_13_addr_reg_909_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_14_addr_reg_914 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_14_addr_reg_914_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_14_addr_reg_914_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_14_addr_reg_914_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_14_addr_reg_914_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_14_addr_reg_914_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_14_addr_reg_914_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_14_addr_reg_914_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_14_addr_reg_914_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_15_addr_reg_919 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_15_addr_reg_919_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_15_addr_reg_919_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_15_addr_reg_919_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_15_addr_reg_919_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_15_addr_reg_919_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_15_addr_reg_919_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_15_addr_reg_919_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal x_15_addr_reg_919_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_668_p35 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_924 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem1_addr_read_reg_929 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln638_fu_739_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_reg_939 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln636_fu_621_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_4_fu_158 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal add_ln636_fu_601_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (30 downto 0);
    signal lshr_ln4_fu_611_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_668_p33 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal grp_fu_579_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal tmp_3_fu_668_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_668_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_668_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_668_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_668_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_668_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_668_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_668_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_668_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_668_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_668_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_668_p23 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_668_p25 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_668_p27 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_668_p29 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_668_p31 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component krnl_bp_faddfsub_32ns_32ns_32_7_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component krnl_bp_sparsemux_33_4_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (3 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (3 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (3 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (3 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (3 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (3 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (3 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (3 downto 0);
        din7_WIDTH : INTEGER;
        CASE8 : STD_LOGIC_VECTOR (3 downto 0);
        din8_WIDTH : INTEGER;
        CASE9 : STD_LOGIC_VECTOR (3 downto 0);
        din9_WIDTH : INTEGER;
        CASE10 : STD_LOGIC_VECTOR (3 downto 0);
        din10_WIDTH : INTEGER;
        CASE11 : STD_LOGIC_VECTOR (3 downto 0);
        din11_WIDTH : INTEGER;
        CASE12 : STD_LOGIC_VECTOR (3 downto 0);
        din12_WIDTH : INTEGER;
        CASE13 : STD_LOGIC_VECTOR (3 downto 0);
        din13_WIDTH : INTEGER;
        CASE14 : STD_LOGIC_VECTOR (3 downto 0);
        din14_WIDTH : INTEGER;
        CASE15 : STD_LOGIC_VECTOR (3 downto 0);
        din15_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (31 downto 0);
        din12 : IN STD_LOGIC_VECTOR (31 downto 0);
        din13 : IN STD_LOGIC_VECTOR (31 downto 0);
        din14 : IN STD_LOGIC_VECTOR (31 downto 0);
        din15 : IN STD_LOGIC_VECTOR (31 downto 0);
        def : IN STD_LOGIC_VECTOR (31 downto 0);
        sel : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component krnl_bp_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sparsemux_33_4_32_1_1_U120 : component krnl_bp_sparsemux_33_4_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 32,
        CASE1 => "0001",
        din1_WIDTH => 32,
        CASE2 => "0010",
        din2_WIDTH => 32,
        CASE3 => "0011",
        din3_WIDTH => 32,
        CASE4 => "0100",
        din4_WIDTH => 32,
        CASE5 => "0101",
        din5_WIDTH => 32,
        CASE6 => "0110",
        din6_WIDTH => 32,
        CASE7 => "0111",
        din7_WIDTH => 32,
        CASE8 => "1000",
        din8_WIDTH => 32,
        CASE9 => "1001",
        din9_WIDTH => 32,
        CASE10 => "1010",
        din10_WIDTH => 32,
        CASE11 => "1011",
        din11_WIDTH => 32,
        CASE12 => "1100",
        din12_WIDTH => 32,
        CASE13 => "1101",
        din13_WIDTH => 32,
        CASE14 => "1110",
        din14_WIDTH => 32,
        CASE15 => "1111",
        din15_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => mac_res_q0,
        din1 => mac_res_1_q0,
        din2 => mac_res_2_q0,
        din3 => mac_res_3_q0,
        din4 => mac_res_4_q0,
        din5 => mac_res_5_q0,
        din6 => mac_res_6_q0,
        din7 => mac_res_7_q0,
        din8 => mac_res_8_q0,
        din9 => mac_res_9_q0,
        din10 => mac_res_10_q0,
        din11 => mac_res_11_q0,
        din12 => mac_res_12_q0,
        din13 => mac_res_13_q0,
        din14 => mac_res_14_q0,
        din15 => mac_res_15_q0,
        def => tmp_3_fu_668_p33,
        sel => trunc_ln636_reg_759,
        dout => tmp_3_fu_668_p35);

    flow_control_loop_pipe_sequential_init_U : component krnl_bp_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_4_fu_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln636_fu_595_p2 = ap_const_lv1_0))) then 
                    i_4_fu_158 <= add_ln636_fu_601_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_4_fu_158 <= ap_const_lv31_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_reg_939 <= grp_fu_1657_p_dout0;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                trunc_ln636_reg_759_pp0_iter2_reg <= trunc_ln636_reg_759_pp0_iter1_reg;
                trunc_ln636_reg_759_pp0_iter3_reg <= trunc_ln636_reg_759_pp0_iter2_reg;
                trunc_ln636_reg_759_pp0_iter4_reg <= trunc_ln636_reg_759_pp0_iter3_reg;
                trunc_ln636_reg_759_pp0_iter5_reg <= trunc_ln636_reg_759_pp0_iter4_reg;
                trunc_ln636_reg_759_pp0_iter6_reg <= trunc_ln636_reg_759_pp0_iter5_reg;
                trunc_ln636_reg_759_pp0_iter7_reg <= trunc_ln636_reg_759_pp0_iter6_reg;
                trunc_ln636_reg_759_pp0_iter8_reg <= trunc_ln636_reg_759_pp0_iter7_reg;
                x_10_addr_reg_894_pp0_iter2_reg <= x_10_addr_reg_894_pp0_iter1_reg;
                x_10_addr_reg_894_pp0_iter3_reg <= x_10_addr_reg_894_pp0_iter2_reg;
                x_10_addr_reg_894_pp0_iter4_reg <= x_10_addr_reg_894_pp0_iter3_reg;
                x_10_addr_reg_894_pp0_iter5_reg <= x_10_addr_reg_894_pp0_iter4_reg;
                x_10_addr_reg_894_pp0_iter6_reg <= x_10_addr_reg_894_pp0_iter5_reg;
                x_10_addr_reg_894_pp0_iter7_reg <= x_10_addr_reg_894_pp0_iter6_reg;
                x_10_addr_reg_894_pp0_iter8_reg <= x_10_addr_reg_894_pp0_iter7_reg;
                x_11_addr_reg_899_pp0_iter2_reg <= x_11_addr_reg_899_pp0_iter1_reg;
                x_11_addr_reg_899_pp0_iter3_reg <= x_11_addr_reg_899_pp0_iter2_reg;
                x_11_addr_reg_899_pp0_iter4_reg <= x_11_addr_reg_899_pp0_iter3_reg;
                x_11_addr_reg_899_pp0_iter5_reg <= x_11_addr_reg_899_pp0_iter4_reg;
                x_11_addr_reg_899_pp0_iter6_reg <= x_11_addr_reg_899_pp0_iter5_reg;
                x_11_addr_reg_899_pp0_iter7_reg <= x_11_addr_reg_899_pp0_iter6_reg;
                x_11_addr_reg_899_pp0_iter8_reg <= x_11_addr_reg_899_pp0_iter7_reg;
                x_12_addr_reg_904_pp0_iter2_reg <= x_12_addr_reg_904_pp0_iter1_reg;
                x_12_addr_reg_904_pp0_iter3_reg <= x_12_addr_reg_904_pp0_iter2_reg;
                x_12_addr_reg_904_pp0_iter4_reg <= x_12_addr_reg_904_pp0_iter3_reg;
                x_12_addr_reg_904_pp0_iter5_reg <= x_12_addr_reg_904_pp0_iter4_reg;
                x_12_addr_reg_904_pp0_iter6_reg <= x_12_addr_reg_904_pp0_iter5_reg;
                x_12_addr_reg_904_pp0_iter7_reg <= x_12_addr_reg_904_pp0_iter6_reg;
                x_12_addr_reg_904_pp0_iter8_reg <= x_12_addr_reg_904_pp0_iter7_reg;
                x_13_addr_reg_909_pp0_iter2_reg <= x_13_addr_reg_909_pp0_iter1_reg;
                x_13_addr_reg_909_pp0_iter3_reg <= x_13_addr_reg_909_pp0_iter2_reg;
                x_13_addr_reg_909_pp0_iter4_reg <= x_13_addr_reg_909_pp0_iter3_reg;
                x_13_addr_reg_909_pp0_iter5_reg <= x_13_addr_reg_909_pp0_iter4_reg;
                x_13_addr_reg_909_pp0_iter6_reg <= x_13_addr_reg_909_pp0_iter5_reg;
                x_13_addr_reg_909_pp0_iter7_reg <= x_13_addr_reg_909_pp0_iter6_reg;
                x_13_addr_reg_909_pp0_iter8_reg <= x_13_addr_reg_909_pp0_iter7_reg;
                x_14_addr_reg_914_pp0_iter2_reg <= x_14_addr_reg_914_pp0_iter1_reg;
                x_14_addr_reg_914_pp0_iter3_reg <= x_14_addr_reg_914_pp0_iter2_reg;
                x_14_addr_reg_914_pp0_iter4_reg <= x_14_addr_reg_914_pp0_iter3_reg;
                x_14_addr_reg_914_pp0_iter5_reg <= x_14_addr_reg_914_pp0_iter4_reg;
                x_14_addr_reg_914_pp0_iter6_reg <= x_14_addr_reg_914_pp0_iter5_reg;
                x_14_addr_reg_914_pp0_iter7_reg <= x_14_addr_reg_914_pp0_iter6_reg;
                x_14_addr_reg_914_pp0_iter8_reg <= x_14_addr_reg_914_pp0_iter7_reg;
                x_15_addr_reg_919_pp0_iter2_reg <= x_15_addr_reg_919_pp0_iter1_reg;
                x_15_addr_reg_919_pp0_iter3_reg <= x_15_addr_reg_919_pp0_iter2_reg;
                x_15_addr_reg_919_pp0_iter4_reg <= x_15_addr_reg_919_pp0_iter3_reg;
                x_15_addr_reg_919_pp0_iter5_reg <= x_15_addr_reg_919_pp0_iter4_reg;
                x_15_addr_reg_919_pp0_iter6_reg <= x_15_addr_reg_919_pp0_iter5_reg;
                x_15_addr_reg_919_pp0_iter7_reg <= x_15_addr_reg_919_pp0_iter6_reg;
                x_15_addr_reg_919_pp0_iter8_reg <= x_15_addr_reg_919_pp0_iter7_reg;
                x_1_addr_reg_849_pp0_iter2_reg <= x_1_addr_reg_849_pp0_iter1_reg;
                x_1_addr_reg_849_pp0_iter3_reg <= x_1_addr_reg_849_pp0_iter2_reg;
                x_1_addr_reg_849_pp0_iter4_reg <= x_1_addr_reg_849_pp0_iter3_reg;
                x_1_addr_reg_849_pp0_iter5_reg <= x_1_addr_reg_849_pp0_iter4_reg;
                x_1_addr_reg_849_pp0_iter6_reg <= x_1_addr_reg_849_pp0_iter5_reg;
                x_1_addr_reg_849_pp0_iter7_reg <= x_1_addr_reg_849_pp0_iter6_reg;
                x_1_addr_reg_849_pp0_iter8_reg <= x_1_addr_reg_849_pp0_iter7_reg;
                x_2_addr_reg_854_pp0_iter2_reg <= x_2_addr_reg_854_pp0_iter1_reg;
                x_2_addr_reg_854_pp0_iter3_reg <= x_2_addr_reg_854_pp0_iter2_reg;
                x_2_addr_reg_854_pp0_iter4_reg <= x_2_addr_reg_854_pp0_iter3_reg;
                x_2_addr_reg_854_pp0_iter5_reg <= x_2_addr_reg_854_pp0_iter4_reg;
                x_2_addr_reg_854_pp0_iter6_reg <= x_2_addr_reg_854_pp0_iter5_reg;
                x_2_addr_reg_854_pp0_iter7_reg <= x_2_addr_reg_854_pp0_iter6_reg;
                x_2_addr_reg_854_pp0_iter8_reg <= x_2_addr_reg_854_pp0_iter7_reg;
                x_3_addr_reg_859_pp0_iter2_reg <= x_3_addr_reg_859_pp0_iter1_reg;
                x_3_addr_reg_859_pp0_iter3_reg <= x_3_addr_reg_859_pp0_iter2_reg;
                x_3_addr_reg_859_pp0_iter4_reg <= x_3_addr_reg_859_pp0_iter3_reg;
                x_3_addr_reg_859_pp0_iter5_reg <= x_3_addr_reg_859_pp0_iter4_reg;
                x_3_addr_reg_859_pp0_iter6_reg <= x_3_addr_reg_859_pp0_iter5_reg;
                x_3_addr_reg_859_pp0_iter7_reg <= x_3_addr_reg_859_pp0_iter6_reg;
                x_3_addr_reg_859_pp0_iter8_reg <= x_3_addr_reg_859_pp0_iter7_reg;
                x_4_addr_reg_864_pp0_iter2_reg <= x_4_addr_reg_864_pp0_iter1_reg;
                x_4_addr_reg_864_pp0_iter3_reg <= x_4_addr_reg_864_pp0_iter2_reg;
                x_4_addr_reg_864_pp0_iter4_reg <= x_4_addr_reg_864_pp0_iter3_reg;
                x_4_addr_reg_864_pp0_iter5_reg <= x_4_addr_reg_864_pp0_iter4_reg;
                x_4_addr_reg_864_pp0_iter6_reg <= x_4_addr_reg_864_pp0_iter5_reg;
                x_4_addr_reg_864_pp0_iter7_reg <= x_4_addr_reg_864_pp0_iter6_reg;
                x_4_addr_reg_864_pp0_iter8_reg <= x_4_addr_reg_864_pp0_iter7_reg;
                x_5_addr_reg_869_pp0_iter2_reg <= x_5_addr_reg_869_pp0_iter1_reg;
                x_5_addr_reg_869_pp0_iter3_reg <= x_5_addr_reg_869_pp0_iter2_reg;
                x_5_addr_reg_869_pp0_iter4_reg <= x_5_addr_reg_869_pp0_iter3_reg;
                x_5_addr_reg_869_pp0_iter5_reg <= x_5_addr_reg_869_pp0_iter4_reg;
                x_5_addr_reg_869_pp0_iter6_reg <= x_5_addr_reg_869_pp0_iter5_reg;
                x_5_addr_reg_869_pp0_iter7_reg <= x_5_addr_reg_869_pp0_iter6_reg;
                x_5_addr_reg_869_pp0_iter8_reg <= x_5_addr_reg_869_pp0_iter7_reg;
                x_6_addr_reg_874_pp0_iter2_reg <= x_6_addr_reg_874_pp0_iter1_reg;
                x_6_addr_reg_874_pp0_iter3_reg <= x_6_addr_reg_874_pp0_iter2_reg;
                x_6_addr_reg_874_pp0_iter4_reg <= x_6_addr_reg_874_pp0_iter3_reg;
                x_6_addr_reg_874_pp0_iter5_reg <= x_6_addr_reg_874_pp0_iter4_reg;
                x_6_addr_reg_874_pp0_iter6_reg <= x_6_addr_reg_874_pp0_iter5_reg;
                x_6_addr_reg_874_pp0_iter7_reg <= x_6_addr_reg_874_pp0_iter6_reg;
                x_6_addr_reg_874_pp0_iter8_reg <= x_6_addr_reg_874_pp0_iter7_reg;
                x_7_addr_reg_879_pp0_iter2_reg <= x_7_addr_reg_879_pp0_iter1_reg;
                x_7_addr_reg_879_pp0_iter3_reg <= x_7_addr_reg_879_pp0_iter2_reg;
                x_7_addr_reg_879_pp0_iter4_reg <= x_7_addr_reg_879_pp0_iter3_reg;
                x_7_addr_reg_879_pp0_iter5_reg <= x_7_addr_reg_879_pp0_iter4_reg;
                x_7_addr_reg_879_pp0_iter6_reg <= x_7_addr_reg_879_pp0_iter5_reg;
                x_7_addr_reg_879_pp0_iter7_reg <= x_7_addr_reg_879_pp0_iter6_reg;
                x_7_addr_reg_879_pp0_iter8_reg <= x_7_addr_reg_879_pp0_iter7_reg;
                x_8_addr_reg_884_pp0_iter2_reg <= x_8_addr_reg_884_pp0_iter1_reg;
                x_8_addr_reg_884_pp0_iter3_reg <= x_8_addr_reg_884_pp0_iter2_reg;
                x_8_addr_reg_884_pp0_iter4_reg <= x_8_addr_reg_884_pp0_iter3_reg;
                x_8_addr_reg_884_pp0_iter5_reg <= x_8_addr_reg_884_pp0_iter4_reg;
                x_8_addr_reg_884_pp0_iter6_reg <= x_8_addr_reg_884_pp0_iter5_reg;
                x_8_addr_reg_884_pp0_iter7_reg <= x_8_addr_reg_884_pp0_iter6_reg;
                x_8_addr_reg_884_pp0_iter8_reg <= x_8_addr_reg_884_pp0_iter7_reg;
                x_9_addr_reg_889_pp0_iter2_reg <= x_9_addr_reg_889_pp0_iter1_reg;
                x_9_addr_reg_889_pp0_iter3_reg <= x_9_addr_reg_889_pp0_iter2_reg;
                x_9_addr_reg_889_pp0_iter4_reg <= x_9_addr_reg_889_pp0_iter3_reg;
                x_9_addr_reg_889_pp0_iter5_reg <= x_9_addr_reg_889_pp0_iter4_reg;
                x_9_addr_reg_889_pp0_iter6_reg <= x_9_addr_reg_889_pp0_iter5_reg;
                x_9_addr_reg_889_pp0_iter7_reg <= x_9_addr_reg_889_pp0_iter6_reg;
                x_9_addr_reg_889_pp0_iter8_reg <= x_9_addr_reg_889_pp0_iter7_reg;
                x_addr_reg_844_pp0_iter2_reg <= x_addr_reg_844_pp0_iter1_reg;
                x_addr_reg_844_pp0_iter3_reg <= x_addr_reg_844_pp0_iter2_reg;
                x_addr_reg_844_pp0_iter4_reg <= x_addr_reg_844_pp0_iter3_reg;
                x_addr_reg_844_pp0_iter5_reg <= x_addr_reg_844_pp0_iter4_reg;
                x_addr_reg_844_pp0_iter6_reg <= x_addr_reg_844_pp0_iter5_reg;
                x_addr_reg_844_pp0_iter7_reg <= x_addr_reg_844_pp0_iter6_reg;
                x_addr_reg_844_pp0_iter8_reg <= x_addr_reg_844_pp0_iter7_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                gmem1_addr_read_reg_929 <= m_axi_gmem1_RDATA;
                tmp_3_reg_924 <= tmp_3_fu_668_p35;
                trunc_ln636_reg_759 <= trunc_ln636_fu_607_p1;
                trunc_ln636_reg_759_pp0_iter1_reg <= trunc_ln636_reg_759;
                x_10_addr_reg_894 <= zext_ln636_fu_621_p1(3 - 1 downto 0);
                x_10_addr_reg_894_pp0_iter1_reg <= x_10_addr_reg_894;
                x_11_addr_reg_899 <= zext_ln636_fu_621_p1(3 - 1 downto 0);
                x_11_addr_reg_899_pp0_iter1_reg <= x_11_addr_reg_899;
                x_12_addr_reg_904 <= zext_ln636_fu_621_p1(3 - 1 downto 0);
                x_12_addr_reg_904_pp0_iter1_reg <= x_12_addr_reg_904;
                x_13_addr_reg_909 <= zext_ln636_fu_621_p1(3 - 1 downto 0);
                x_13_addr_reg_909_pp0_iter1_reg <= x_13_addr_reg_909;
                x_14_addr_reg_914 <= zext_ln636_fu_621_p1(3 - 1 downto 0);
                x_14_addr_reg_914_pp0_iter1_reg <= x_14_addr_reg_914;
                x_15_addr_reg_919 <= zext_ln636_fu_621_p1(3 - 1 downto 0);
                x_15_addr_reg_919_pp0_iter1_reg <= x_15_addr_reg_919;
                x_1_addr_reg_849 <= zext_ln636_fu_621_p1(3 - 1 downto 0);
                x_1_addr_reg_849_pp0_iter1_reg <= x_1_addr_reg_849;
                x_2_addr_reg_854 <= zext_ln636_fu_621_p1(3 - 1 downto 0);
                x_2_addr_reg_854_pp0_iter1_reg <= x_2_addr_reg_854;
                x_3_addr_reg_859 <= zext_ln636_fu_621_p1(3 - 1 downto 0);
                x_3_addr_reg_859_pp0_iter1_reg <= x_3_addr_reg_859;
                x_4_addr_reg_864 <= zext_ln636_fu_621_p1(3 - 1 downto 0);
                x_4_addr_reg_864_pp0_iter1_reg <= x_4_addr_reg_864;
                x_5_addr_reg_869 <= zext_ln636_fu_621_p1(3 - 1 downto 0);
                x_5_addr_reg_869_pp0_iter1_reg <= x_5_addr_reg_869;
                x_6_addr_reg_874 <= zext_ln636_fu_621_p1(3 - 1 downto 0);
                x_6_addr_reg_874_pp0_iter1_reg <= x_6_addr_reg_874;
                x_7_addr_reg_879 <= zext_ln636_fu_621_p1(3 - 1 downto 0);
                x_7_addr_reg_879_pp0_iter1_reg <= x_7_addr_reg_879;
                x_8_addr_reg_884 <= zext_ln636_fu_621_p1(3 - 1 downto 0);
                x_8_addr_reg_884_pp0_iter1_reg <= x_8_addr_reg_884;
                x_9_addr_reg_889 <= zext_ln636_fu_621_p1(3 - 1 downto 0);
                x_9_addr_reg_889_pp0_iter1_reg <= x_9_addr_reg_889;
                x_addr_reg_844 <= zext_ln636_fu_621_p1(3 - 1 downto 0);
                x_addr_reg_844_pp0_iter1_reg <= x_addr_reg_844;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln636_fu_601_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv31_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_00001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_00001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(m_axi_gmem1_RVALID)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (m_axi_gmem1_RVALID = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln636_fu_595_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln636_fu_595_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter8_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_4_fu_158, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_i <= ap_const_lv31_0;
        else 
            ap_sig_allocacmp_i <= i_4_fu_158;
        end if; 
    end process;

    bitcast_ln638_fu_739_p1 <= gmem1_addr_read_reg_929;

    gmem1_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, m_axi_gmem1_RVALID, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmem1_blk_n_R <= m_axi_gmem1_RVALID;
        else 
            gmem1_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_1657_p_ce <= grp_fu_579_ce;
    grp_fu_1657_p_din0 <= tmp_3_reg_924;
    grp_fu_1657_p_din1 <= bitcast_ln638_fu_739_p1;
    grp_fu_1657_p_opcode <= ap_const_lv2_0(1 - 1 downto 0);

    grp_fu_579_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_579_ce <= ap_const_logic_1;
        else 
            grp_fu_579_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln636_fu_595_p2 <= "1" when (ap_sig_allocacmp_i = chunk) else "0";
    lshr_ln4_fu_611_p4 <= ap_sig_allocacmp_i(6 downto 4);
    m_axi_gmem1_ARADDR <= ap_const_lv64_0;
    m_axi_gmem1_ARBURST <= ap_const_lv2_0;
    m_axi_gmem1_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem1_ARID <= ap_const_lv1_0;
    m_axi_gmem1_ARLEN <= ap_const_lv32_0;
    m_axi_gmem1_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem1_ARPROT <= ap_const_lv3_0;
    m_axi_gmem1_ARQOS <= ap_const_lv4_0;
    m_axi_gmem1_ARREGION <= ap_const_lv4_0;
    m_axi_gmem1_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem1_ARUSER <= ap_const_lv1_0;
    m_axi_gmem1_ARVALID <= ap_const_logic_0;
    m_axi_gmem1_AWADDR <= ap_const_lv64_0;
    m_axi_gmem1_AWBURST <= ap_const_lv2_0;
    m_axi_gmem1_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem1_AWID <= ap_const_lv1_0;
    m_axi_gmem1_AWLEN <= ap_const_lv32_0;
    m_axi_gmem1_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem1_AWPROT <= ap_const_lv3_0;
    m_axi_gmem1_AWQOS <= ap_const_lv4_0;
    m_axi_gmem1_AWREGION <= ap_const_lv4_0;
    m_axi_gmem1_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem1_AWUSER <= ap_const_lv1_0;
    m_axi_gmem1_AWVALID <= ap_const_logic_0;
    m_axi_gmem1_BREADY <= ap_const_logic_0;

    m_axi_gmem1_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmem1_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem1_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem1_WDATA <= ap_const_lv32_0;
    m_axi_gmem1_WID <= ap_const_lv1_0;
    m_axi_gmem1_WLAST <= ap_const_logic_0;
    m_axi_gmem1_WSTRB <= ap_const_lv4_0;
    m_axi_gmem1_WUSER <= ap_const_lv1_0;
    m_axi_gmem1_WVALID <= ap_const_logic_0;
    mac_res_10_address0 <= zext_ln636_fu_621_p1(3 - 1 downto 0);

    mac_res_10_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            mac_res_10_ce0 <= ap_const_logic_1;
        else 
            mac_res_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mac_res_11_address0 <= zext_ln636_fu_621_p1(3 - 1 downto 0);

    mac_res_11_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            mac_res_11_ce0 <= ap_const_logic_1;
        else 
            mac_res_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mac_res_12_address0 <= zext_ln636_fu_621_p1(3 - 1 downto 0);

    mac_res_12_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            mac_res_12_ce0 <= ap_const_logic_1;
        else 
            mac_res_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mac_res_13_address0 <= zext_ln636_fu_621_p1(3 - 1 downto 0);

    mac_res_13_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            mac_res_13_ce0 <= ap_const_logic_1;
        else 
            mac_res_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mac_res_14_address0 <= zext_ln636_fu_621_p1(3 - 1 downto 0);

    mac_res_14_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            mac_res_14_ce0 <= ap_const_logic_1;
        else 
            mac_res_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mac_res_15_address0 <= zext_ln636_fu_621_p1(3 - 1 downto 0);

    mac_res_15_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            mac_res_15_ce0 <= ap_const_logic_1;
        else 
            mac_res_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mac_res_1_address0 <= zext_ln636_fu_621_p1(3 - 1 downto 0);

    mac_res_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            mac_res_1_ce0 <= ap_const_logic_1;
        else 
            mac_res_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mac_res_2_address0 <= zext_ln636_fu_621_p1(3 - 1 downto 0);

    mac_res_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            mac_res_2_ce0 <= ap_const_logic_1;
        else 
            mac_res_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mac_res_3_address0 <= zext_ln636_fu_621_p1(3 - 1 downto 0);

    mac_res_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            mac_res_3_ce0 <= ap_const_logic_1;
        else 
            mac_res_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mac_res_4_address0 <= zext_ln636_fu_621_p1(3 - 1 downto 0);

    mac_res_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            mac_res_4_ce0 <= ap_const_logic_1;
        else 
            mac_res_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mac_res_5_address0 <= zext_ln636_fu_621_p1(3 - 1 downto 0);

    mac_res_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            mac_res_5_ce0 <= ap_const_logic_1;
        else 
            mac_res_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mac_res_6_address0 <= zext_ln636_fu_621_p1(3 - 1 downto 0);

    mac_res_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            mac_res_6_ce0 <= ap_const_logic_1;
        else 
            mac_res_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mac_res_7_address0 <= zext_ln636_fu_621_p1(3 - 1 downto 0);

    mac_res_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            mac_res_7_ce0 <= ap_const_logic_1;
        else 
            mac_res_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mac_res_8_address0 <= zext_ln636_fu_621_p1(3 - 1 downto 0);

    mac_res_8_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            mac_res_8_ce0 <= ap_const_logic_1;
        else 
            mac_res_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mac_res_9_address0 <= zext_ln636_fu_621_p1(3 - 1 downto 0);

    mac_res_9_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            mac_res_9_ce0 <= ap_const_logic_1;
        else 
            mac_res_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mac_res_address0 <= zext_ln636_fu_621_p1(3 - 1 downto 0);

    mac_res_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            mac_res_ce0 <= ap_const_logic_1;
        else 
            mac_res_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_3_fu_668_p33 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    trunc_ln636_fu_607_p1 <= ap_sig_allocacmp_i(4 - 1 downto 0);
    x_10_address0 <= x_10_addr_reg_894_pp0_iter8_reg;

    x_10_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            x_10_ce0 <= ap_const_logic_1;
        else 
            x_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_10_d0 <= add_reg_939;

    x_10_we0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001, trunc_ln636_reg_759_pp0_iter8_reg)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (trunc_ln636_reg_759_pp0_iter8_reg = ap_const_lv4_A) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            x_10_we0 <= ap_const_logic_1;
        else 
            x_10_we0 <= ap_const_logic_0;
        end if; 
    end process;

    x_11_address0 <= x_11_addr_reg_899_pp0_iter8_reg;

    x_11_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            x_11_ce0 <= ap_const_logic_1;
        else 
            x_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_11_d0 <= add_reg_939;

    x_11_we0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001, trunc_ln636_reg_759_pp0_iter8_reg)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (trunc_ln636_reg_759_pp0_iter8_reg = ap_const_lv4_B) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            x_11_we0 <= ap_const_logic_1;
        else 
            x_11_we0 <= ap_const_logic_0;
        end if; 
    end process;

    x_12_address0 <= x_12_addr_reg_904_pp0_iter8_reg;

    x_12_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            x_12_ce0 <= ap_const_logic_1;
        else 
            x_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_12_d0 <= add_reg_939;

    x_12_we0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001, trunc_ln636_reg_759_pp0_iter8_reg)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (trunc_ln636_reg_759_pp0_iter8_reg = ap_const_lv4_C) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            x_12_we0 <= ap_const_logic_1;
        else 
            x_12_we0 <= ap_const_logic_0;
        end if; 
    end process;

    x_13_address0 <= x_13_addr_reg_909_pp0_iter8_reg;

    x_13_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            x_13_ce0 <= ap_const_logic_1;
        else 
            x_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_13_d0 <= add_reg_939;

    x_13_we0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001, trunc_ln636_reg_759_pp0_iter8_reg)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (trunc_ln636_reg_759_pp0_iter8_reg = ap_const_lv4_D) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            x_13_we0 <= ap_const_logic_1;
        else 
            x_13_we0 <= ap_const_logic_0;
        end if; 
    end process;

    x_14_address0 <= x_14_addr_reg_914_pp0_iter8_reg;

    x_14_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            x_14_ce0 <= ap_const_logic_1;
        else 
            x_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_14_d0 <= add_reg_939;

    x_14_we0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001, trunc_ln636_reg_759_pp0_iter8_reg)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (trunc_ln636_reg_759_pp0_iter8_reg = ap_const_lv4_E) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            x_14_we0 <= ap_const_logic_1;
        else 
            x_14_we0 <= ap_const_logic_0;
        end if; 
    end process;

    x_15_address0 <= x_15_addr_reg_919_pp0_iter8_reg;

    x_15_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            x_15_ce0 <= ap_const_logic_1;
        else 
            x_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_15_d0 <= add_reg_939;

    x_15_we0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001, trunc_ln636_reg_759_pp0_iter8_reg)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (trunc_ln636_reg_759_pp0_iter8_reg = ap_const_lv4_F) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            x_15_we0 <= ap_const_logic_1;
        else 
            x_15_we0 <= ap_const_logic_0;
        end if; 
    end process;

    x_1_address0 <= x_1_addr_reg_849_pp0_iter8_reg;

    x_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            x_1_ce0 <= ap_const_logic_1;
        else 
            x_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_1_d0 <= add_reg_939;

    x_1_we0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001, trunc_ln636_reg_759_pp0_iter8_reg)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (trunc_ln636_reg_759_pp0_iter8_reg = ap_const_lv4_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            x_1_we0 <= ap_const_logic_1;
        else 
            x_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    x_2_address0 <= x_2_addr_reg_854_pp0_iter8_reg;

    x_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            x_2_ce0 <= ap_const_logic_1;
        else 
            x_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_2_d0 <= add_reg_939;

    x_2_we0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001, trunc_ln636_reg_759_pp0_iter8_reg)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (trunc_ln636_reg_759_pp0_iter8_reg = ap_const_lv4_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            x_2_we0 <= ap_const_logic_1;
        else 
            x_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    x_3_address0 <= x_3_addr_reg_859_pp0_iter8_reg;

    x_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            x_3_ce0 <= ap_const_logic_1;
        else 
            x_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_3_d0 <= add_reg_939;

    x_3_we0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001, trunc_ln636_reg_759_pp0_iter8_reg)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (trunc_ln636_reg_759_pp0_iter8_reg = ap_const_lv4_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            x_3_we0 <= ap_const_logic_1;
        else 
            x_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    x_4_address0 <= x_4_addr_reg_864_pp0_iter8_reg;

    x_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            x_4_ce0 <= ap_const_logic_1;
        else 
            x_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_4_d0 <= add_reg_939;

    x_4_we0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001, trunc_ln636_reg_759_pp0_iter8_reg)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (trunc_ln636_reg_759_pp0_iter8_reg = ap_const_lv4_4) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            x_4_we0 <= ap_const_logic_1;
        else 
            x_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    x_5_address0 <= x_5_addr_reg_869_pp0_iter8_reg;

    x_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            x_5_ce0 <= ap_const_logic_1;
        else 
            x_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_5_d0 <= add_reg_939;

    x_5_we0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001, trunc_ln636_reg_759_pp0_iter8_reg)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (trunc_ln636_reg_759_pp0_iter8_reg = ap_const_lv4_5) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            x_5_we0 <= ap_const_logic_1;
        else 
            x_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    x_6_address0 <= x_6_addr_reg_874_pp0_iter8_reg;

    x_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            x_6_ce0 <= ap_const_logic_1;
        else 
            x_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_6_d0 <= add_reg_939;

    x_6_we0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001, trunc_ln636_reg_759_pp0_iter8_reg)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (trunc_ln636_reg_759_pp0_iter8_reg = ap_const_lv4_6) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            x_6_we0 <= ap_const_logic_1;
        else 
            x_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    x_7_address0 <= x_7_addr_reg_879_pp0_iter8_reg;

    x_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            x_7_ce0 <= ap_const_logic_1;
        else 
            x_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_7_d0 <= add_reg_939;

    x_7_we0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001, trunc_ln636_reg_759_pp0_iter8_reg)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (trunc_ln636_reg_759_pp0_iter8_reg = ap_const_lv4_7) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            x_7_we0 <= ap_const_logic_1;
        else 
            x_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    x_8_address0 <= x_8_addr_reg_884_pp0_iter8_reg;

    x_8_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            x_8_ce0 <= ap_const_logic_1;
        else 
            x_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_8_d0 <= add_reg_939;

    x_8_we0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001, trunc_ln636_reg_759_pp0_iter8_reg)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (trunc_ln636_reg_759_pp0_iter8_reg = ap_const_lv4_8) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            x_8_we0 <= ap_const_logic_1;
        else 
            x_8_we0 <= ap_const_logic_0;
        end if; 
    end process;

    x_9_address0 <= x_9_addr_reg_889_pp0_iter8_reg;

    x_9_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            x_9_ce0 <= ap_const_logic_1;
        else 
            x_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_9_d0 <= add_reg_939;

    x_9_we0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001, trunc_ln636_reg_759_pp0_iter8_reg)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (trunc_ln636_reg_759_pp0_iter8_reg = ap_const_lv4_9) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            x_9_we0 <= ap_const_logic_1;
        else 
            x_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    x_address0 <= x_addr_reg_844_pp0_iter8_reg;

    x_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            x_ce0 <= ap_const_logic_1;
        else 
            x_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_d0 <= add_reg_939;

    x_we0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001, trunc_ln636_reg_759_pp0_iter8_reg)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (trunc_ln636_reg_759_pp0_iter8_reg = ap_const_lv4_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            x_we0 <= ap_const_logic_1;
        else 
            x_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln636_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln4_fu_611_p4),64));
end behav;
