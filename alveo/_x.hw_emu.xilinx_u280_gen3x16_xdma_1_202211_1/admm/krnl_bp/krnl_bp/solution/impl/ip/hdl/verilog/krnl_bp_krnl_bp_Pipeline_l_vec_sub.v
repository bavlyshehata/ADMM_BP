// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module krnl_bp_krnl_bp_Pipeline_l_vec_sub (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        z_copy_2_stream_dout,
        z_copy_2_stream_empty_n,
        z_copy_2_stream_read,
        u_copy_1_stream_dout,
        u_copy_1_stream_empty_n,
        u_copy_1_stream_read,
        z_u_stream_din,
        z_u_stream_full_n,
        z_u_stream_write,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n,
        grp_fu_626_p_din0,
        grp_fu_626_p_din1,
        grp_fu_626_p_opcode,
        grp_fu_626_p_dout0,
        grp_fu_626_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] z_copy_2_stream_dout;
input   z_copy_2_stream_empty_n;
output   z_copy_2_stream_read;
input  [31:0] u_copy_1_stream_dout;
input   u_copy_1_stream_empty_n;
output   u_copy_1_stream_read;
output  [31:0] z_u_stream_din;
input   z_u_stream_full_n;
output   z_u_stream_write;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;
output  [31:0] grp_fu_626_p_din0;
output  [31:0] grp_fu_626_p_din1;
output  [0:0] grp_fu_626_p_opcode;
input  [31:0] grp_fu_626_p_dout0;
output   grp_fu_626_p_ce;

reg ap_idle;
reg z_copy_2_stream_read;
reg u_copy_1_stream_read;
reg[31:0] z_u_stream_din;
reg z_u_stream_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] tmp_s_nbreadreq_fu_44_p3;
wire   [0:0] tmp_4_nbreadreq_fu_52_p3;
reg    ap_predicate_op32_read_state2;
reg    ap_predicate_op33_read_state2;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
reg   [0:0] tmp_4_reg_136;
reg   [0:0] tmp_4_reg_136_pp0_iter8_reg;
reg   [0:0] tmp_s_reg_132;
reg   [0:0] tmp_s_reg_132_pp0_iter8_reg;
reg    ap_predicate_op34_write_state3;
reg    ap_predicate_op37_write_state3;
reg    ap_block_state3_pp0_stage0_iter9;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln52_fu_92_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    z_copy_2_stream_blk_n;
wire    ap_block_pp0_stage0;
reg    u_copy_1_stream_blk_n;
reg    z_u_stream_blk_n;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] tmp_s_reg_132_pp0_iter2_reg;
reg   [0:0] tmp_s_reg_132_pp0_iter3_reg;
reg   [0:0] tmp_s_reg_132_pp0_iter4_reg;
reg   [0:0] tmp_s_reg_132_pp0_iter5_reg;
reg   [0:0] tmp_s_reg_132_pp0_iter6_reg;
reg   [0:0] tmp_s_reg_132_pp0_iter7_reg;
reg   [0:0] tmp_4_reg_136_pp0_iter2_reg;
reg   [0:0] tmp_4_reg_136_pp0_iter3_reg;
reg   [0:0] tmp_4_reg_136_pp0_iter4_reg;
reg   [0:0] tmp_4_reg_136_pp0_iter5_reg;
reg   [0:0] tmp_4_reg_136_pp0_iter6_reg;
reg   [0:0] tmp_4_reg_136_pp0_iter7_reg;
reg   [31:0] z_copy_2_stream_read_reg_140;
reg   [31:0] u_copy_1_stream_read_reg_145;
wire   [31:0] in1_val_fu_113_p1;
wire   [31:0] in2_val_fu_117_p1;
reg   [31:0] result_reg_160;
reg   [3:0] ii_6_fu_40;
wire   [3:0] ii_7_fu_98_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_ii;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] bitcast_ln59_fu_109_p1;
reg    ap_block_pp0_stage0_00001;
reg    grp_fu_80_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_done_reg = 1'b0;
end

krnl_bp_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter8_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln52_fu_92_p2 == 1'd0))) begin
            ii_6_fu_40 <= ii_7_fu_98_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            ii_6_fu_40 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        tmp_s_reg_132 <= tmp_s_nbreadreq_fu_44_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        tmp_4_reg_136_pp0_iter2_reg <= tmp_4_reg_136;
        tmp_4_reg_136_pp0_iter3_reg <= tmp_4_reg_136_pp0_iter2_reg;
        tmp_4_reg_136_pp0_iter4_reg <= tmp_4_reg_136_pp0_iter3_reg;
        tmp_4_reg_136_pp0_iter5_reg <= tmp_4_reg_136_pp0_iter4_reg;
        tmp_4_reg_136_pp0_iter6_reg <= tmp_4_reg_136_pp0_iter5_reg;
        tmp_4_reg_136_pp0_iter7_reg <= tmp_4_reg_136_pp0_iter6_reg;
        tmp_4_reg_136_pp0_iter8_reg <= tmp_4_reg_136_pp0_iter7_reg;
        tmp_s_reg_132_pp0_iter2_reg <= tmp_s_reg_132;
        tmp_s_reg_132_pp0_iter3_reg <= tmp_s_reg_132_pp0_iter2_reg;
        tmp_s_reg_132_pp0_iter4_reg <= tmp_s_reg_132_pp0_iter3_reg;
        tmp_s_reg_132_pp0_iter5_reg <= tmp_s_reg_132_pp0_iter4_reg;
        tmp_s_reg_132_pp0_iter6_reg <= tmp_s_reg_132_pp0_iter5_reg;
        tmp_s_reg_132_pp0_iter7_reg <= tmp_s_reg_132_pp0_iter6_reg;
        tmp_s_reg_132_pp0_iter8_reg <= tmp_s_reg_132_pp0_iter7_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_4_reg_136_pp0_iter7_reg == 1'd1) & (tmp_s_reg_132_pp0_iter7_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        result_reg_160 <= grp_fu_626_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_nbreadreq_fu_44_p3 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_4_reg_136 <= tmp_4_nbreadreq_fu_52_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_predicate_op33_read_state2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        u_copy_1_stream_read_reg_145 <= u_copy_1_stream_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_predicate_op32_read_state2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        z_copy_2_stream_read_reg_140 <= z_copy_2_stream_dout;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln52_fu_92_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter8_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_ii = 4'd0;
    end else begin
        ap_sig_allocacmp_ii = ii_6_fu_40;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_80_ce = 1'b1;
    end else begin
        grp_fu_80_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op33_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        u_copy_1_stream_blk_n = u_copy_1_stream_empty_n;
    end else begin
        u_copy_1_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op33_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        u_copy_1_stream_read = 1'b1;
    end else begin
        u_copy_1_stream_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op32_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        z_copy_2_stream_blk_n = z_copy_2_stream_empty_n;
    end else begin
        z_copy_2_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op32_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        z_copy_2_stream_read = 1'b1;
    end else begin
        z_copy_2_stream_read = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op37_write_state3 == 1'b1)) | ((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op34_write_state3 == 1'b1)))) begin
        z_u_stream_blk_n = z_u_stream_full_n;
    end else begin
        z_u_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        if ((ap_predicate_op37_write_state3 == 1'b1)) begin
            z_u_stream_din = bitcast_ln59_fu_109_p1;
        end else if ((ap_predicate_op34_write_state3 == 1'b1)) begin
            z_u_stream_din = 32'd0;
        end else begin
            z_u_stream_din = 'bx;
        end
    end else begin
        z_u_stream_din = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op37_write_state3 == 1'b1)) | ((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op34_write_state3 == 1'b1)))) begin
        z_u_stream_write = 1'b1;
    end else begin
        z_u_stream_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_00001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (((ap_predicate_op33_read_state2 == 1'b1) & (u_copy_1_stream_empty_n == 1'b0)) | ((ap_predicate_op32_read_state2 == 1'b1) & (z_copy_2_stream_empty_n == 1'b0)))) | ((ap_enable_reg_pp0_iter9 == 1'b1) & (((z_u_stream_full_n == 1'b0) & (ap_predicate_op37_write_state3 == 1'b1)) | ((z_u_stream_full_n == 1'b0) & (ap_predicate_op34_write_state3 == 1'b1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (((ap_predicate_op33_read_state2 == 1'b1) & (u_copy_1_stream_empty_n == 1'b0)) | ((ap_predicate_op32_read_state2 == 1'b1) & (z_copy_2_stream_empty_n == 1'b0)))) | ((ap_enable_reg_pp0_iter9 == 1'b1) & (((z_u_stream_full_n == 1'b0) & (ap_predicate_op37_write_state3 == 1'b1)) | ((z_u_stream_full_n == 1'b0) & (ap_predicate_op34_write_state3 == 1'b1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (((ap_predicate_op33_read_state2 == 1'b1) & (u_copy_1_stream_empty_n == 1'b0)) | ((ap_predicate_op32_read_state2 == 1'b1) & (z_copy_2_stream_empty_n == 1'b0)))) | ((ap_enable_reg_pp0_iter9 == 1'b1) & (((z_u_stream_full_n == 1'b0) & (ap_predicate_op37_write_state3 == 1'b1)) | ((z_u_stream_full_n == 1'b0) & (ap_predicate_op34_write_state3 == 1'b1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (((ap_predicate_op33_read_state2 == 1'b1) & (u_copy_1_stream_empty_n == 1'b0)) | ((ap_predicate_op32_read_state2 == 1'b1) & (z_copy_2_stream_empty_n == 1'b0)))) | ((ap_enable_reg_pp0_iter9 == 1'b1) & (((z_u_stream_full_n == 1'b0) & (ap_predicate_op37_write_state3 == 1'b1)) | ((z_u_stream_full_n == 1'b0) & (ap_predicate_op34_write_state3 == 1'b1)))));
end

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((ap_predicate_op33_read_state2 == 1'b1) & (u_copy_1_stream_empty_n == 1'b0)) | ((ap_predicate_op32_read_state2 == 1'b1) & (z_copy_2_stream_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter9 = (((z_u_stream_full_n == 1'b0) & (ap_predicate_op37_write_state3 == 1'b1)) | ((z_u_stream_full_n == 1'b0) & (ap_predicate_op34_write_state3 == 1'b1)));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_ext_blocking_n = (1'b1 & 1'b1);

assign ap_int_blocking_n = (1'b1 & 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

always @ (*) begin
    ap_predicate_op32_read_state2 = ((tmp_4_nbreadreq_fu_52_p3 == 1'd1) & (tmp_s_nbreadreq_fu_44_p3 == 1'd1));
end

always @ (*) begin
    ap_predicate_op33_read_state2 = ((tmp_4_nbreadreq_fu_52_p3 == 1'd1) & (tmp_s_nbreadreq_fu_44_p3 == 1'd1));
end

always @ (*) begin
    ap_predicate_op34_write_state3 = ((tmp_s_reg_132_pp0_iter8_reg == 1'd0) | (tmp_4_reg_136_pp0_iter8_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op37_write_state3 = ((tmp_s_reg_132_pp0_iter8_reg == 1'd1) & (tmp_4_reg_136_pp0_iter8_reg == 1'd1));
end

assign ap_str_blocking_n = (1'b1 & 1'b1);

assign bitcast_ln59_fu_109_p1 = result_reg_160;

assign grp_fu_626_p_ce = grp_fu_80_ce;

assign grp_fu_626_p_din0 = in1_val_fu_113_p1;

assign grp_fu_626_p_din1 = in2_val_fu_117_p1;

assign grp_fu_626_p_opcode = 2'd1;

assign icmp_ln52_fu_92_p2 = ((ap_sig_allocacmp_ii == 4'd8) ? 1'b1 : 1'b0);

assign ii_7_fu_98_p2 = (ap_sig_allocacmp_ii + 4'd1);

assign in1_val_fu_113_p1 = z_copy_2_stream_read_reg_140;

assign in2_val_fu_117_p1 = u_copy_1_stream_read_reg_145;

assign tmp_4_nbreadreq_fu_52_p3 = u_copy_1_stream_empty_n;

assign tmp_s_nbreadreq_fu_44_p3 = z_copy_2_stream_empty_n;

endmodule //krnl_bp_krnl_bp_Pipeline_l_vec_sub
